name: build
on: [push, pull_request]
jobs:
  test_e2e:
    env:
      warped: true
      XDG_RUNTIME_DIR: /run
    strategy:
      matrix:
        go-version: [1.21.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure podman socket
        run: |
          sudo systemctl restart dbus && sudo systemctl enable --now podman.socket

      - name: Build and start the mixnet, and send 10 pings over it
        run: |
          cd docker && sudo -E make pings=10 start wait run-ping

      - name: run client end to end tests
        run: cd client && sudo -E make testargs=-coverprofile=coverage.part dockerdockertest && cat coverage.part >> ../coverage.out

      - name: run memspool end to end tests
        run: cd memspool && sudo -E make testargs=-coverprofile=coverage.part dockerdockertest && cat client/coverage.part >> ../coverage.out

      - name: run catshadow end to end tests
        run: cd catshadow && sudo -E make testargs=-coverprofile=coverage.part dockerdockertest && cat coverage.part >> ../coverage.out

      - name: run benchmark tests
        run: cd bench && sudo -E make testargs=-coverprofile=coverage.part dockerdockertest && cat coverage.part >> ../coverage.out

      - name: Stop the mixnet
        run: |
          cd docker && sudo -E make stop

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
        go-version: [ "1.21.x", "1.22.x"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate mixnet configuration
        run: cd genconfig && go build && ./genconfig -wirekem xwing -v -b /conf -o ../docker/voting_mixnet/

      - name: Run authority unit tests
        run: sudo sh -c "cd authority && ulimit -l 64435 && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./..."

      - name: Run catshadow unit tests
        run: sudo sh -c "cd catshadow && ulimit -l 64435 && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./..."

      - name: Run client unit tests
        run: sudo sh -c "cd client && ulimit -l 64435 && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./..."

      - name: Run core unit tests
        run: sudo sh -c "cd core && ulimit -l 64435 && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./..."

      - name: Run NIKE Sphinx unit tests with CTIDH
        run: sudo sh -c "cd core/sphinx && ulimit -l 64435 && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./..."

      - name: Run doubleratchet unit tests
        run: sudo sh -c "cd doubleratchet && ulimit -l 64435 && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./..."

      - name: Run memspool unit tests
        run: sudo sh -c "cd memspool && ulimit -l 64435 && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./..."

      - name: Run panda unit tests
        run: sudo sh -c "cd panda && ulimit -l 64435 && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./..."

      - name: Run reunion unit tests
        run: sudo sh -c "cd reunion && ulimit -l 64435 && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./..."

      - name: Run server unit tests
        run: sudo sh -c "cd server && ulimit -l 64435 && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./..."

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  test-windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        OS: ["windows-2022"]
        CC: ["gcc"]
        ENVIRONMENT: ["MINGW64"] # https://www.msys2.org/docs/environments/
        go-version: ["1.21.x", "1.22.x"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.ENVIRONMENT }}
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-gcc
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-x86_64-go
            mingw-w64-ucrt-x86_64-go
            make
            git
            gcc

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Gather runtime environment
        shell: msys2 {0}
        run: |
         echo ${{ matrix.ENVIRONMENT }}
         uname -a
         bash --version
         ${{ matrix.CC }} -v
         go version

      - name: Install golang dependencies
        shell: msys2 {0}
        run: |
          export HIGHCTIDH_PORTABLE=1
          export CGO_ENABLED=1
          go get -v ./...

      - name: Build golang
        shell: msys2 {0}
        run: |
          export HIGHCTIDH_PORTABLE=1
          export CGO_ENABLED=1
          export GOEXPERIMENT=cgocheck2
          export GODEBUG=cgocheck=1
          go build -v ./...

      - name: Golang test
        shell: msys2 {0}
        run: |
          export HIGHCTIDH_PORTABLE=1
          export CGO_ENABLED=1
          export GOEXPERIMENT=cgocheck2
          export GODEBUG=cgocheck=1
          export CGO_LDFLAGS="-Wl,--no-as-needed -Wl,-allow-multiple-definition"
          go test -v ./...
