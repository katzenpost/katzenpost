name: build
on: [push]
env:
  CGO_CFLAGS_ALLOW: "-DPARAMS=sphincs-shake-256f"

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.19.x]
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate mixnet configuration
        run: cd genconfig && go build && ./genconfig -v -b /conf -o ../docker/voting_mixnet/

      - name: Run all package unit tests
        run: sudo sh -c "ulimit -l 64435 && CGO_CFLAGS_ALLOW=-DPARAMS=sphincs-shake-256f GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -timeout 0 ./..."

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  test_e2e:
    env:
      warped: true
      XDG_RUNTIME_DIR: /run
    strategy:
      matrix:
        go-version: [1.19.x]
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Build dependencies
        run: |
          sudo apt update && sudo apt install --no-install-recommends -y make podman dbus-user-session

      - name: Start podman
        run: |
          sudo systemctl restart dbus && sudo systemctl enable --now podman.socket

      - name: Build voting authority docker image
        run: |
          cd docker && sudo -E make voting_authority

      - name: Build server docker image
        run: |
          cd docker && sudo -E make server

      - name: Start the mixnet
        run: |
          cd docker && sudo -E make start-voting-testnet

      - name: Wait for consensus
        run: |
          cd docker && sudo -E make wait-for-network

      - name: run client end to end tests
        run: cd client && sudo -E make testargs=-coverprofile=coverage.part dockerdockertest && cat coverage.part >> ../coverage.out

      - name: run memspool end to end tests
        run: cd memspool && sudo -E make testargs=-coverprofile=coverage.part dockerdockertest && cat client/coverage.part >> ../coverage.out

      - name: run catshadow end to end tests
        run: cd catshadow && sudo -E make testargs=-coverprofile=coverage.part dockerdockertest && cat coverage.part >> ../coverage.out

      - name: run ping
        run: cd docker && sudo -E make testargs=-coverprofile=coverage.part run-ping && cat coverage.part >> ../coverage.out

      - name: Stop the mixnet
        run: |
          cd docker && sudo -E make stop-voting-testnet

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
