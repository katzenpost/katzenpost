name: docker mixnet integration tests
on: [pull_request]
jobs:

  test_e2e_client2:
    env:
      warped: true
      no_mixdecoy: false
      no_decoy: false
    strategy:
      matrix:
        go-version: [1.22.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Configure podman socket
        run: |
          systemctl --user start podman.socket

      - name: Build and start the mixnet
        run: |
          cd docker && make start wait

      - name: Sleep for a few seconds to allow the mixnet to fully start
        run: sleep 5

      - name: run old client core end to end tests
        run: cd client2 && make testargs=-coverprofile=coverage.part dockertest-legacy && cat coverage.part >> ../coverage.out

      - name: run NEW client Pigeonhole Channel end to end tests
        run: cd client2 && make testargs=-coverprofile=coverage.part dockertest-channels-new && cat coverage.part >> ../coverage.out

      - name: run NEW client Pigeonhole Channel single read query test
        run: cd client2 && make testargs=-coverprofile=coverage.part dockertest-single-read && cat coverage.part >> ../coverage.out

      - name: Stop the mixnet
        run: |
          cd docker && make stop

      - name: Upload testnet state
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mixnet-${{ github.run_id }}-${{ github.job }}
          path: |
            docker/voting_mixnet/*/*.log
