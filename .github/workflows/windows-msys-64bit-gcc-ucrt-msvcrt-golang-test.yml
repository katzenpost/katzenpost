name: Windows Msys2 64bit unit tests test

on: [pull_request]

jobs:
  windows-build-and-test-golang:
    env:
      HIGHCTIDH_PORTABLE: 1
      CGO_ENABLED: 1
      GOEXPERIMENT: cgocheck2
      GODEBUG: cgocheck=1
      CGO_LDFLAGS: "-Wl,--no-as-needed -Wl,-allow-multiple-definition"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        OS: ["windows-2022"]
        CC: ["gcc"]
        ENVIRONMENT: ["MINGW64"] # https://www.msys2.org/docs/environments/
        go-version: ["1.22.x"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.ENVIRONMENT }}
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-go
            make
            git
            gcc

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Gather runtime environment
        shell: msys2 {0}
        run: |
         echo ${{ matrix.ENVIRONMENT }}
         uname -a
         bash --version
         ${{ matrix.CC }} -v
         go version

      - name: Generate mixnet configuration
        shell: msys2 {0}
        run: |
          cd genconfig && go build && ./genconfig -wirekem xwing -v -b /conf -o ../docker/voting_mixnet/

      - name: Run authority unit tests
        shell: msys2 {0}
        run: cd authority && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run catshadow unit tests
        shell: msys2 {0}
        run: cd catshadow && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run client unit tests
        shell: msys2 {0}
        run: cd client && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run client2 unit tests
        shell: msys2 {0}
        run: cd client2 && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run core unit tests
        shell: msys2 {0}
        run: cd core && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run NIKE Sphinx unit tests with CTIDH
        shell: msys2 {0}
        run: cd core/sphinx && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run doubleratchet unit tests
        shell: msys2 {0}
        run:  cd doubleratchet && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run memspool unit tests
        shell: msys2 {0}
        run:  cd memspool && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run panda unit tests
        shell: msys2 {0}
        run:  cd panda && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run reunion unit tests
        shell: msys2 {0}
        run:  cd reunion && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run server unit tests
        shell: msys2 {0}
        run:  cd server && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run storage replica server unit tests
        run: cd replica && sudo apt install rocksdb && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...

      - name: Run courier unit tests
        run: cd courier && GORACE=history_size=7 go test -coverprofile=coverage.out -race -v -failfast -timeout 30m ./...
