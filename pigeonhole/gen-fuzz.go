// Code generated by trunnel. DO NOT EDIT.

//go:build gofuzz
// +build gofuzz

package pigeonhole

func FuzzCourierEnvelope(data []byte) int {
	_, err := ParseCourierEnvelope(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzCourierEnvelopeReply(data []byte) int {
	_, err := ParseCourierEnvelopeReply(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzCourierQuery(data []byte) int {
	_, err := ParseCourierQuery(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzCourierQueryReply(data []byte) int {
	_, err := ParseCourierQueryReply(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzReplicaRead(data []byte) int {
	_, err := ParseReplicaRead(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzReplicaReadReply(data []byte) int {
	_, err := ParseReplicaReadReply(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzReplicaInnerMessage(data []byte) int {
	_, err := ParseReplicaInnerMessage(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzReplicaWrite(data []byte) int {
	_, err := ParseReplicaWrite(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzReplicaMessageReplyInnerMessage(data []byte) int {
	_, err := ParseReplicaMessageReplyInnerMessage(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzReplicaWriteReply(data []byte) int {
	_, err := ParseReplicaWriteReply(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzBox(data []byte) int {
	_, err := ParseBox(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzCopyCommand(data []byte) int {
	_, err := ParseCopyCommand(data)
	if err != nil {
		return 0
	}
	return 1
}

func FuzzCopyCommandReply(data []byte) int {
	_, err := ParseCopyCommandReply(data)
	if err != nil {
		return 0
	}
	return 1
}
