Katzenpost PKI: A Panoramix Mix Network Public Key Infrastructure Specification
Yawning Angel
Ania Piotrowska
David Stainton

Version 0

Abstract

   This document describes the message formats and protocols of a
   decryption mix network public key infrastructure system. It has some
   specific design features which aid in traffic analysis resistance.
   This document is meant to serve as an implementation guide.

Table of Contents

   1. Introduction
      1.1 Conventions Used in This Document
      1.2 Terminology
      1.3 Security Properties Overview
      1.4 Differences from Tor and Mixminion Directory Authority systems
   2. Overview of Mix PKI Interaction
      2.1 PKI Protocol Schedule
      2.2 Scheduling Mix Downtime
   3. Voting for Consensus Protocol
      3.1 Protocol Messages
         3.1.1 Mix Descriptor and Directory Signing
      3.2 Voting
      3.3 Vote Tabulation and Production of Network Consensus Documents
      3.4 Consensus Success or Failure
   4. PKI Protocol Data Structures
      4.1 Mix Descriptor Format
      4.2 Directory Format
   5. PKI Wire Protocols
      5.1 The HTTP based protocol
         5.1.1 Retrieving a directory
         5.1.2. Publishing a mix descriptor
      5.2 Katzenpost noise based protocol extensions for mix descriptor publication
         5.2.1 The post_descriptor Command
         5.2.2 The post_descriptor_status Command
   6. Scalability Considerations
      6.1 Consensus Cacheing
         6.1.1 The get_consensus Command
         6.1.2 The consensus Command
   7. Future Work
   8. Anonymity Considerations
   9. Security Considerations
   10. Acknowledgments
   Appendix A. References
      Appendix A.1 Normative References
      Appendix A.2 Informative References

1. Introduction

   Mixnets are designed with the assumption that a PKI exists and it
   gives each client the same view of the network. This specification
   is inspired by the Tor and Mixminion Directory Authority systems
   [MIXMINIONDIRAUTH] [TORDIRAUTH] whose main features are precisely what
   we need in our PKI. These are decentralized systems meant to be
   collectively operated by multiple entities.

   The mix network directory authority system (PKI) is essentially a
   cooperative decentralized database and voting system that is used
   to produce network consensus documents which mix clients
   periodically retrieve and use for their path selection algorithm
   when creating Sphinx packets. These network consensus documents are
   derived from a voting process between the Directory Authority
   servers.

   This design prevents mix clients from using only a partial view of
   the network for their path selection so as to avoid fingerprinting
   and bridging attacks [FINGERPRINTING] [BRIDGING] [LOCALVIEW].

   The PKI is also used by Authority operators to specify network-wide
   parameters, for example in the Panoramix Decryption Mix Network
   [PANMIXNET] the Poisson mix strategy is used and therefore all the
   clients must use the same lambda parameter for their exponential
   distribution function when choosing hop delays in the path
   selection. The Mix Network Directory Authority system aka PKI
   SHALL be used to distribute such network-wide parameters in the network
   consensus document that have an impact on security and performance.

1.1 Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

1.2 Terminology

   PKI - public key infrastructure

   Directory Authority system - refers to specific PKI schemes used by
                                Mixminion and Tor

   MSL - maximum segment lifetime

   mix descriptor - A database record which describes a component mix

   family - Identifier of security domains or entities operating one
            or more mixes in the network. This is used to inform the
            path selection algorithm.

   nickname - simply a nickname string that is unique in the consensus
              document; see "Panoramix Mix Network Specification"
              section "2.2. Network Topology".

   layer - The layer indicates which network topology layer a
           particular mix resides in.

   Provider - A service operated by a third party that Clients
              communicate directly with to communicate with the Mixnet.
              It is responsible for Client authentication,
              forwarding outgoing messages to the Mixnet, and storing incoming
              messages for the Client. The Provider MUST have the ability to
              perform cryptographic operations on the relayed messages.

1.3 Security Properties Overview

   This Directory Authority system has the following feature goals and
   security properties:

      * All Directory Authority servers must agree with each other on
        the set of Directory Authorities.

      * All Directory Authority servers must agree with each other on
        the set of mixes.

      * is intentionally designed to provide identical
        network consensus documents to each mix client. This mitigates
        epistemic attacks against the client path selection algorithm
        such as fingerprinting and bridge attacks [FINGERPRINTING]
        [BRIDGING].

      * is NOT byzantine-fault-tolerant, it instead allows
        for manual intervention upon consensus fault by the Directory
        Authority operators. Further, these operators are responsible
        for expelling bad acting operators from the system.

      * enforces the network policies such as mix join policy wherein
        intentionally closed mixnets will prevent arbitrary hosts from
        joining the network by authenticating all descriptor signatures
        with a list of allowed public keys.

      * The Directory Authority/PKI system for a given mix network is
        essentially the root of all authority.

1.4 Differences from Tor and Mixminion Directory Authority systems

   In this document we specify a Directory Authority system
   which is different from that of Tor's and Mixminion's in a number
   of ways:

      * The list of valid mixes is expressed in a white list. For
        the time being there is no specified "bandwidth authority"
        system which verifies the health of mixes.
        (Further research required.)

      * There's no non-directory channel to inform clients that a node
        is down, so it will end up being a lot of packet loss, since
        clients will continue to include the missing node in their
        path selection till keys published by the node expire and it
        falls out of the consensus.

      * The schema of the mix descriptors is different from that used
        in Mixminion and Tor, including a change which allows our mix
        descriptor to express n Sphinx mix routing public keys in a
        single mix descriptor whereas in the Tor and Mixminion Directory
        Authority systems, n descriptors are used.

      * The serialization format of mix descriptors is different from
        that used in Mixminion and Tor.

   // XXX David: add more differences to this list

2. Overview of Mix PKI Interaction

   Each Mix MUST rotate the key pair used for Sphinx packet processing
   periodically for forward secrecy reasons and to keep the list of
   seen packet tags short. [SPHINX09] [SPHINXSPEC] The Panoramix Mix
   Network uses a fixed interval (epoch), so that key rotations happen
   simultaneously throughout the network, at predictable times.

   Each Directory Authority server MUST use some time synchronization
   protocol in order to correctly use this protocol. This Directory
   Authority system requires time synchronization to within a few
   minutes.

   Let each epoch be exactly 10800 seconds (3 hours) in duration, and
   the 0th Epoch begin at 2017-06-01 00:00 UTC.

   To facilitate smooth operation of the network and to allow for
   delays that span across epoch boundaries, Mixes MUST publish keys
   to the PKI for at least 3 epochs in advance, unless the mix will
   be otherwise unavailable in the near future due to planned downtime.

   Thus, at any time, keys for all Mixes for the Nth through N + 2nd
   epoch will be available, allowing for a maximum round trip (forward
   message + SURB) delay + transit time of 6 hours. SURB lifetime is
   limited to a few hours because of the key rotation epoch, however
   this shouldn't present any useability problems since SURBs are only
   used for sending ACK messages from the destination Provider to the
   sender as described in [PANEND2END].

2.1 PKI Protocol Schedule

   // XXX: It would be good to have some analysis of why you chose 3-hour
   // epochs, and 3 epochs worth of publiction.  What are the tradeoffs?

2.1.1 Directory Authority Server Schedule

   Directory Authority server interactions are conducted according to
   the following schedule, where T is the beginning of the current epoch.

   T                         - Epoch begins

   T + 2 hours               - Vote exchange

   T + 2 hours + 7.5 minutes - Tabulation and signature exchange

   T + 2 hours + 15 minutes  - Publish consensus


2.1.2 Mix Schedule

   Mix PKI interactions are conducted according to the following
   schedule, where T is the beginning of the current epoch.

    T + 2 hours              - Deadline for publication of all mixes documents
                               for the next epoch.

    T + 2 hours + 15 min     - This marks the beginning of the period
                               where mixes perform staggered fetches
                               of the PKI consensus document.

    T + 2 hours + 30 min     - Start establishing connections to the new set of
                               relevant mixes in advance of the next epoch.

    T + 3 hours - 1MSL       - Start accepting new Sphinx packets encrypted to
                               the next epoch's keys.

    T + 3 hours + 1MSL       - Stop accepting new Sphinx packets encrypted to
                               the previous epoch's keys, close connections to
                               peers no longer listed in the PKI documents and
                               erase the list of seen packet tags.

   As it stands, mixes have ~2 hours to publish, the PKI has 15 mins
   to vote, and the mixes have 28 mins to establish connections before
   there is network connectivity failure.

3. Voting for Consensus Protocol

   In our Directory Authority protocol, all the actors conduct their
   behavior according to a common schedule as outlined in section "2.1
   PKI Protocol Schedule". The Directory Authority servers exchange
   messages to reach consensus about the network. Other tasks they
   perform include collecting mix descriptor uploads from each mix for
   each key rotation epoch, voting, signature exchange and publishing
   of the network consensus documents.

3.1 Protocol Messages

   There are only two document types in this protocol:

   * mix_descriptor: A mix descriptor describes a mix.

   * directory: A directory contains a list of descriptors and other
     information that describe the mix network.

   Mix descriptor and directory documents MUST be properly signed.

3.1.1 Mix Descriptor and Directory Signing

   Mixes MUST compose mix descriptors which are signed using their
   private identity key, an ed25519 key. Directories are signed by one
   or more Directory Authority servers using their authority key, also
   an ed25519 key. In all cases, signing is done using JWS [RFC7515].

3.2 Vote Exchange

   As described in section "2.1 PKI Protocol Schedule", the Directory
   Authority servers begin the voting process 2 hours after epoch
   beginning.  Each Authority exchanges vote directory messages with
   each other.

   Authorities archive votes from other authorities and make them
   available for retreival. Upon receiving a new vote, the authority
   examines it for new descriptors and fetches them from that
   authority. It includes the new descriptors in the next epoch's
   voting round.

3.3 Vote Tabulation for Consensus Computation

   The main design constraint of the vote tabulation algorithm is that
   it MUST be a deterministic process that produces that same result
   for each directory authority server. This result is known as a
   network consensus file. Such a document is a well formed directory
   struct where the "status" field is set to "consensus" and contains
   0 or more descriptors, the mix directory is signed by 0 or more
   directory authority servers. If signed by the full voting group
   then this is called a fully signed consensus.

   1. Validate each vote directory:
      - that the liveness fields correspond to the following epoch
      - status is "vote"
      - version number matches ours

   2. Compute a consensus directory:
      Here we include a modified section from the Mixminion PKI spec
      [MIXMINIONDIRAUTH]:

      - For each distinct mix identity in any vote directory:
            - If there are multiple nicknames for a given identity, do not
              include any descriptors for that identity.
            - If half or fewer of the votes include the identity, do not
              include any descriptors for the identity.  [This also
              guarantees that there will be only one identity per nickname.]
            - If we are including the identity, then for each distinct
              descriptor that appears in any vote directory:
                - Do not include the descriptor if it will have expired
                  on the date the directory will be published.
                - Do not include the descriptor if it is superseded by
                  other descriptors for this identity.
                - Do not include the descriptor if it not valid in the
                  next epoch.
                - Otherwise, include the descriptor.

      - Sort the list of descriptors by the signature field so that
        creation of the consensus is reproducible.
      - Set directory "status" field to "consensus".

3.4 Signature Collection

   Each Authority exchanges their newly generated consensus files with
   each other.  Upon receiving signed consensus documents from the
   other Authorities, peer signatures are appended to the current
   local consensus file if the signed contents match. The Authority
   SHOULD warn the administrator if network partition is detected.

3.5 Publication

   If the consensus is signed by all members of the voting group then
   it's a valid consensus and it is published. Otherwise if there is
   disagreement about the consensus directory, each authority collects
   signatures from only the servers which it agrees with about the
   final consensus.

   Upon consensus failure detection, the Directory Authority SHOULD
   report to its administrator that the consensus has failed, and
   explain how. Passive consumer clients downloading the network
   consensus documents SHOULD also receive a warning or error message.

4. PKI Protocol Data Structures

4.1 Mix Descriptor Format

   Note that there is no signature field. This is because mix
   descriptors are serialized and signed using JWS. The
   `IdentityKey` field is a public ed25519 key.  The `MixKeys` field
   is a map from epoch to public X25519 keys which is what the Sphinx
   packet format uses.

   // XXX David: replace the following example
   // with a JWS example:

   {
       "Version": 0,
       "Name": "",
       "Family": "",
       "Email": "",
       "AltContactInfo":"",
       "IdentityKey": "",
       "LinkKey":"",
       "MixKeys": {
          "Epoch": "EpochPubKey",
       },
       "Addresses": ["IP:Port"],
       "Layer": 0,
       "LoadWeight":0
   }

4.1.1 Scheduling Mix Downtime

   Mix operators can publish a half empty mix descriptor for future
   epochs to schedule downtime. The mix descriptor fields that MUST
   be populated are:

   * Version
   * Name
   * Family
   * Email
   * Layer
   * IdentityKey
   * MixKeys

   The map in the field called "MixKeys" should reflect the scheduled
   downtown for one or more epochs by not have those epochs as keys in
   the map.


4.2 Directory Format

   // XXX David: replace the following JSON example
   // with a JWS

   {
       "Signatures": [],
       "Version": 0,
       "Status": "vote",
       "Lambda" : 0.274,
       "MaxDelay" : 30,
       "Topology" : [],
       "Providers" : [],
   }

5. PKI Wire Protocols

   Two wire protocols are supported, the Katzenpost noise-based
   cryptographic wire protocol and the HTTP based protocol can be used
   by mixes to publish mix descriptors and to retreive status.

5.1 The HTTP based protocol

   The HTTP based protocol uses the following URLs for
   publishing and retrieving are constructed using SERVER and EPOCH
   where SERVER is the address of the Directory Authority server and
   EPOCH is the monotonically increasing integer indicating the epoch
   as described in section "2. Overview of Mix PKI Interaction".

5.1.1 Retrieving a directory

   A directory may be retreived from a Directory Authority server with
   a URL of the form BASEURL/v0/get/EPOCH, for example:

      http://192.168.1.11/katzenpost/v0/get/1234

   If the request is made with an old epoch or one too far in the
   future, then authority will return Gone, Internal Server Error, Not
   Found, with "Internal Sever Error" being extremely unlikely past
   the initial bootstrapping.

5.1.2. Publishing a mix descriptor

   A mix descriptor may be uploaded to a Directory Authority server with
   a URL of the form BASEURL/v0/post/EPOCH, for example:

      http://192.168.1.11/katzenpost/v0/post/133

   The Authority replies with either Accepted and Forbidden http error codes.

5.2 Katzenpost noise based protocol extensions for mix descriptor publication

   We define additional wire protocol [PANMIXWIRE] commands for
   publishing mix descriptors and setting mix descriptor status:

   enum {
         /* Extending the wire protocol Commands. */
         post_descriptor(20),
         post_descriptor_status(21),
   }

   The structures of these command are defined as follows:

      struct {
         opaque payload[];
      } PostDescriptor;

      struct {
         uint8 error_code;
      } PostDescriptorStatus;

5.2.1 The post_descriptor Command

   The post_descriptor command allows mixes to publish their
   descriptors.

5.2.2 The post_descriptor_status Command

   The post_descriptor_status command is sent in response to a post_descriptor
   command, and uses the following error codes:

   enum {
      descriptor_ok(0),
      descriptor_invalid(1),
      descriptor_conflict(2),
      descriptor_forbidden(3),
   } ErrorCodes;


6. Scalability Considerations

// XXX David: TODO: notes on scaling, bandwidth usage etc.

6.1 Consensus Caching

   Providers in the Katzenpost mix network system [PANMIXNET] may cache
   validated network consensus files and serve them to clients over
   the mix network's link layer wire protocol [PANMIXWIRE]. We define
   additional wire protocol commands for requesting and sending PKI
   consensus documents:

      enum {
         /* Extending the wire protocol Commands. */
         get_consensus(18),
         consensus(19),
      } Command;

   The structures of these command are defined as follows:

      struct {
          uint32_t epoch_number;
      } GetConsensusCommand;

      struct {
         uint8 error_code;
         opaque payload[];
         opaque padding[];   /* length is implicit */
      } ConsensusCommand;

6.1.1 The get_consensus Command

   The get_consensus command is a command that is used to retrieve a
   recent consensus document. If a given get_consensus command
   contains an Epoch value that is either too big or too small then a
   reply consensus command is sent with an empty payload. Otherwise if
   the consensus request is valid then a consensus command containing
   a recent consensus document is sent in reply.

   Initiators MUST terminate the session immediately upon reception of
   a get_consensus command.

6.1.2 The consensus Command

   The consensus command is a command that is used to send a
   recent consensus document. The error code field indicates if there
   was a failure in retrieval of the PKI consensus document.

   enum {
      consensus_ok(0),        /* None error condition and SHOULD be accompanied with
                                 a valid consensus payload. */
      consensus_not_found(1), /* The client should try again later. */
      consensus_gone(2),      /* The consensus will not be available in the future. */
   } ErrorCodes;

7. Future Work

   * PQ crypto signatures for all PKI documents: mix descriptors and
     directories. [SPHINCS256] could be used, we already have a golang
     implementation: https://github.com/Yawning/sphincs256/

   * Make a Bandwidth Authority system to measure health of the network.
     Also perform load balancing as described in [PEERFLOW]?

   * Implement byzantine attack defenses as described in [MIRANDA] and
     [MIXRELIABLE] where mix link performance proofs are recorded and
     used in a reputation system.

   * Choose a better wire protocol?

   * Use the Katzenpost Noise based wire protocol instead of http?

   * Choose a different serialization/schema language?

8. Anonymity Considerations

   * This system is intentionally designed to provide identical
     network consensus documents to each mix client. This mitigates
     epistemic attacks against the client path selection algorithm
     such as fingerprinting and bridge attacks [FINGERPRINTING]
     [BRIDGING].

   * If consensus has failed and thus there is more than one consensus
     file, clients MUST NOT use this compromised consensus and refuse
     to run.

9. Security Considerations

   * The Directory Authority/PKI system for a given mix network is
     essentially the root of all authority in the system. This implies
     that if the PKI as a whole becomes compromised then so will the
     rest of the system (the component mixes) in terms of providing
     the main security properties described as traffic analysis
     resistance. Therefore a decentralized systems architecture is
     used so that the system is more resiliant when attacked, in
     accordance with the principle of least authority which gives us
     security by design not policy. [SECNOTSEP] Otherwise, reducing the
     operation of the PKI system to a single host creates a terrible
     single point of failure where attackers can simply compromise
     this single host to control the network consensus documents that
     mix clients download and use to inform their path selection.

   * We do not require cryptographic authenticity properties from the
     network transport because all our messages already have a
     cryptographic signature field that MUST be checked by the
     receiving peer. Confidentiality is not required because clients
     should all receive the exact same consensus file with all the
     signatures to prove it's origins.

     If a passive network adversary can watch the Directory Authority
     servers vote, that's OK. However, very paranoid implementers
     could disagree and use our Noise based PQ crypto wire protocol
     [PANMIXWIRE] for Directory Authority system message exchange as
     was suggested in section "6. Future Work".

   * Constructing this consensus protocol using a cryptographically
     malleable transport could expose at least one protocol parser to
     the network, this represents a small fraction of the attack
     surface area.

10. Acknowledgements

   I would like to thank Nick Mathewson for answering design questions
   and thorough design review.

Appendix A. References

Appendix A.1 Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC7515]  Jones, M., Bradley, J., Sakimura, N.,
              "JSON Web Signature (JWS)", May 2015,
              <https://tools.ietf.org/html/rfc7515>.

   [PANEND2END]  Angel, Y., Danezis, G., Diaz, C., Piotrowska, A., Stainton, D.,
                 "Panoramix Mix Network End-to-end Protocol Specification", July 2017,
                 <https://github.com/Katzenpost/docs/blob/master/specs/end_to_end.txt>.

Appendix A.2 Informative References

   [MIXMINIONDIRAUTH] Danezis, G., Dingledine, R., Mathewson, N.,
                      "Type III (Mixminion) Mix Directory Specification",
                      December 2005, <https://www.mixminion.net/dir-spec.txt>.

   [TORDIRAUTH]  "Tor directory protocol, version 3",
                 <https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt>.

   [FINGERPRINTING] Danezis, G., Clayton, R.,
                    "Route Finger printing in Anonymous Communications",
                    <https://www.cl.cam.ac.uk/~rnc1/anonroute.pdf>.

   [BRIDGING] Danezis, G., Syverson, P.,
              "Bridging and Fingerprinting: Epistemic Attacks on Route Selection",
              In the Proceedings of PETS 2008, Leuven, Belgium, July 2008,
              <https://www.freehaven.net/anonbib/cache/danezis-pet2008.pdf>.

   [LOCALVIEW] Gogolewski, M., Klonowski, M., Kutylowsky, M.,
               "Local View Attack on Anonymous Communication",
               <https://www.freehaven.net/anonbib/cache/esorics05-Klonowski.pdf>.

   [PANMIXNET]  Angel, Y., Danezis, G., Diaz, C., Piotrowska, A., Stainton, D.,
                "Panoramix Mix Network Specification", June 2017,
                <https://github.com/Katzenpost/docs/blob/master/specs/mixnet.txt>.

   [SPHINX09]  Danezis, G., Goldberg, I., "Sphinx: A Compact and
               Provably Secure Mix Format", DOI 10.1109/SP.2009.15, May 2009,
               <http://research.microsoft.com/en-us/um/people/gdane/papers/sphinx-eprint.pdf>.

   [SPHINXSPEC] Angel, Y., Danezis, G., Diaz, C., Piotrowska, A., Stainton, D.,
                "Sphinx Mix Network Cryptographic Packet Format Specification"
                July 2017, <https://github.com/Katzenpost/docs/blob/master/specs/sphinx.txt>.

   [SPHINCS256] Bernstein, D., Hopwood, D., Hulsing, A., Lange, T.,
                Niederhagen, R., Papachristodoulou, L., Schwabe, P., Wilcox
                O'Hearn, Z., "SPHINCS: practical stateless hash-based signatures",
                <http://sphincs.cr.yp.to/sphincs-20141001.pdf>.

   [PEERFLOW] Johnson, A., Jansen, R., Segal, A., Syverson, P.,
              "PeerFlow: Secure Load Balancing in Tor",
              Preceedings on Privacy Enhancing Technologies, July 2017,
              <https://petsymposium.org/2017/papers/issue2/paper12-2017-2-source.pdf>.

   [MIRANDA] Leibowitz, H., Piotrowska, A., Danezis, G., Herzberg, A., 2017,
             "No right to ramain silent: Isolating Malicious Mixes"
             <https://eprint.iacr.org/2017/1000.pdf>.

   [MIXRELIABLE] Dingledine, R., Freedman, M., Hopwood, D., Molnar, D., 2001
                 "A Reputation System to Increase MIX-Net Reliability"
                 In Information Hiding, 4th International Workshop
                 <https://www.freehaven.net/anonbib/cache/mix-acc.pdf>.

   [SECNOTSEP] Miller, M., Tulloh, B., Shapiro, J.,
               "The Structure of Authority: Why Security Is not a Separable Concern",
               <http://www.erights.org/talks/no-sep/secnotsep.pdf>.

   [PANMIXWIRE] Angel, Y. "Panoramix Mix Network Wire Protocol Specification", June 2017,
                <https://github.com/Katzenpost/docs/blob/master/specs/wire-protocol.txt>.
