<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article>
<article
  xmlns="http://docbook.org/ns/docbook" version="5.0"
  xmlns:xlink="http://www.w3.org/1999/xlink" >
  <info>
    <title>Wire Protocol</title>
    <authorgroup>
      <author>
        <personname>
          <firstname>Yawning</firstname>
          <surname>Angel</surname>
        </personname>
      </author>
      <author>
        <personname>
          <firstname>David</firstname>
          <surname>Stainton</surname>
        </personname>
      </author>
    </authorgroup>
  </info>
  <para>
    <emphasis role="strong">Abstract</emphasis>
  </para>
  <para>
    This document defines the Katzenpost Mix Network Wire Protocol for
    use in all network communications to, from, and within the
    Katzenpost Mix Network.
  </para>
  <section xml:id="introduction">
    <title>1. Introduction</title>
    <para>
      The Katzenpost Mix Network Wire Protocol (KMNWP) is the custom
      wire protocol for all network communications to, from, and within
      the Katzenpost Mix Network. This protocol provides mutual
      authentication, and an additional layer of cryptographic security
      and forward secrecy.
    </para>
    <section xml:id="conventions-used-in-this-document">
      <title>1.1 Conventions Used in This Document</title>
      <para>
        The key words <quote>MUST</quote>, <quote>MUST NOT</quote>,
        <quote>REQUIRED</quote>, <quote>SHALL</quote>, <quote>SHALL
        NOT</quote>, <quote>SHOULD</quote>, <quote>SHOULD NOT</quote>,
        <quote>RECOMMENDED</quote>, <quote>MAY</quote>, and
        <quote>OPTIONAL</quote> in this document are to be interpreted
        as described in <link linkend="RFC2119">RFC2119</link>.
      </para>
      <para>
        The <quote>C</quote> style Presentation Language as described in
        <link linkend="RFC5246">RFC5246</link> Section 4 is used to
        represent data structures, except for cryptographic attributes,
        which are specified as opaque byte vectors.
      </para>
      <para>
        <literal>x | y</literal> denotes the concatenation of x and y.
      </para>
    </section>
    <section xml:id="key-encapsulation-mechanism">
      <title>1.2 Key Encapsulation Mechanism</title>
      <para>
        This protocol uses ANY Key Encapsulation Mechanism. However it’s
        recommended that most users select a hybrid post quantum KEM
        such as Xwing. <link linkend="XWING">XWING</link>
      </para>
    </section>
  </section>
  <section xml:id="core-protocol">
    <title>2. Core Protocol</title>
    <para>
      The protocol is based on Kyber and Trevor Perrin’s Noise Protocol
      Framework <link linkend="NOISE">NOISE</link> along with
      <quote>Post Quantum Noise</quote> paper
      <link linkend="PQNOISE">PQNOISE</link>. Older previous versions of
      our transport were based on
      <link linkend="NOISEHFS">NOISEHFS</link>.
    </para>
    <para>
      Our transport protocol begins with a prologue, Noise handshake,
      followed by a stream of Noise Transport messages in a minimal
      framing layer, over a TCP/IP connection.
    </para>
    <para>
      Our Noise protocol is configurable via the KEM selection in the
      TOML configuration files, here’s an example PQ Noise protocol
      string:
    </para>
    <programlisting>
Noise_pqXX_Xwing_ChaChaPoly_BLAKE2b
</programlisting>
    <para>
      The protocol string is a very condensed description of our
      protocol. We use the pqXX two way Noise pattern which is described
      as follows:
    </para>
    <programlisting>
pqXX: -&gt; e &lt;- ekem, s -&gt; skem, s &lt;- skem
</programlisting>
    <para>
      The next part of the protocol string specifies the KEM,
      <literal>Xwing</literal> which is a hybrid KEM where the share
      secret outputs of both X25519 and MLKEM768 are combined.
    </para>
    <para>
      Finally the <literal>ChaChaPoly_BLAKE2b</literal> parts of the
      protocol string indicate which stream cipher and hash function we
      are using.
    </para>
    <para>
      As a non-standard modification to the Noise protocol, the 65535
      byte message length limit is increased to 1300000 bytes. We send
      very large messages over our Noise protocol because of our using
      the Sphincs+ signature scheme which has signatures that are about
      49k bytes.
    </para>
    <para>
      It is assumed that all parties using the KMNWP protocol have a
      fixed long or short lived <literal>Xwing</literal> keypair
      <link linkend="XWING">XWING</link>, the public component of which
      is known to the other party in advance. How such keys are
      distributed is beyond the scope of this document.
    </para>
    <section xml:id="handshake-phase">
      <title>2.1 Handshake Phase</title>
      <para>
        All sessions start in the Handshake Phase, in which an anonymous
        authenticated handshake is conducted.
      </para>
      <para>
        The handshake is a unmodified Noise handshake, with a fixed
        prologue prefacing the initiator's first Noise handshake
        message. This prologue is also used as the
        <literal>prologue</literal> input to the Noise HandshakeState
        <literal>Initialize()</literal> operation for both the initiator
        and responder.
      </para>
      <para>
        The prologue is defined to be the following structure:
      </para>
      <programlisting>
struct {
    uint8_t protocol_version; /* 0x03 */
} Prologue;
</programlisting>
      <para>
        As all Noise handshake messages are fixed sizes, no additional
        framing is required for the handshake.
      </para>
      <para>
        Implementations MUST preserve the Noise handshake hash
        <literal>[h]</literal> for the purpose of implementing
        authentication (Section 2.3).
      </para>
      <para>
        Implementations MUST reject handshake attempts by terminating
        the session immediately upon any Noise protocol handshake
        failure and when, as a responder, they receive a Prologue
        containing an unknown protocol_version value.
      </para>
      <para>
        Implementations SHOULD impose reasonable timeouts for the
        handshake process, and SHOULD terminate sessions that are taking
        too long to handshake.
      </para>
    </section>
    <section xml:id="handshake-authentication">
      <title>2.1.1 Handshake Authentication</title>
      <para>
        Mutual authentication is done via exchanging fixed sized
        payloads as part of the <literal>pqXX</literal> handshake
        consisting of the following structure:
      </para>
      <programlisting>
struct {
    uint8_t ad_len;
    opaque additional_data[ad_len];
    opaque padding[255 - ad_len];
    uint32_t unix_time;
} AuthenticateMessage;
</programlisting>
      <para>
        Where:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <literal>ad_len</literal> - The length of the optional
            additional data.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>additional_data</literal> - Optional additional
            data, such as a username, if any.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>unix_time</literal> - 0 for the initiator, the
            approximate number of seconds since 1970-01-01 00:00:00 UTC
            for the responder.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The initiator MUST send the
        <literal>AuthenticateMessage</literal> after it has received the
        peer's response (so after <literal>-&gt; s, se</literal> in
        Noise parlance).
      </para>
      <para>
        The contents of the optional <literal>additional_data</literal>
        field is deliberately left up to the implementation, however it
        is RECOMMENDED that implementations pad the field to be a
        consistent length regardless of contents to avoid leaking
        information about the authenticating identity.
      </para>
      <para>
        To authenticate the remote peer given an AuthenticateMessage,
        the receiving peer must validate the <literal>s</literal>
        component of the Noise handshake (the remote peer's long term
        public key) with the known value, along with any of the
        information in the <literal>additional_data</literal> field such
        as the user name, if any.
      </para>
      <para>
        If the validation procedure succeeds, the peer is considered
        authenticated. If the validation procedure fails for any reason,
        the session MUST be terminated immediately.
      </para>
      <para>
        Responders MAY add a slight amount (+- 10 seconds) of random
        noise to the unix_time value to avoid leaking precise load
        information via packet queueing delay.
      </para>
    </section>
    <section xml:id="data-transfer-phase">
      <title>2.2 Data Transfer Phase</title>
      <para>
        Upon successfully concluding the handshake the session enters
        the Data Transfer Phase, where the initiator and responder can
        exchange KMNWP messages.
      </para>
      <para>
        A KMNWP message is defined to be the following structure:
      </para>
      <programlisting>
enum {
    no_op(0),
    disconnect(1),
    send_packet(2),

    (255),
} Command;

struct {
    Command command;
    uint8_t reserved;    /* MUST be '0x00' */
    uint32_t msg_length; /* 0 &lt;= msg_length &lt;= 1048554) */
    opaque message[msg_length];
    opaque padding[];    /* length is implicit */
} Message;
</programlisting>
      <para>
        Notes:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            The padding field, if any MUST be padded with
            <literal>'0x00'</literal> bytes.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        All outgoing Message(s) are encrypted and authenticated into a
        pair of Noise Transport messages, each containing one of the
        following structures:
      </para>
      <programlisting>
struct {
    uint32_t message_length;
} CiphertextHeader;

struct {
    uint32_t message[ciphertext_length-16];
} Ciphertext;
</programlisting>
      <para>
        Notes:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            The <literal>ciphertext_length</literal> field includes the
            Noise protocol overhead of 16 bytes, for the Noise Transport
            message containing the Ciphertext.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        All outgoing Message(s) are preceded by a Noise Transport
        Message containing a <literal>CiphertextHeader</literal>,
        indicating the size of the Noise Transport Message transporting
        the Message Ciphertext. After generating both Noise Transport
        Messages, the sender MUST call the Noise CipherState
        <literal>Rekey()</literal> operation.
      </para>
      <para>
        To receive incoming Ciphertext messages, first the Noise
        Transport Message containing the CiphertextHeader is consumed
        off the network, authenticated and decrypted, giving the
        receiver the length of the Noise Transport Message containing
        the actual message itself. The second Noise Transport Message is
        consumed off the network, authenticated and decrypted, with the
        resulting message being returned to the caller for processing.
        After receiving both Noise Transport Messages, the receiver MUST
        call the Noise CipherState <literal>Rekey()</literal> operation.
      </para>
      <para>
        Implementations MUST immediately terminate the session any of
        the <literal>DecryptWithAd()</literal> operations fails.
      </para>
      <para>
        Implementations MUST immediately terminate the session if an
        unknown command is received in a Message, or if the Message is
        otherwise malformed in any way.
      </para>
      <para>
        Implementations MAY impose a reasonable idle timeout, and
        terminate the session if it expires.
      </para>
    </section>
  </section>
  <section xml:id="predefined-commands">
    <title>3. Predefined Commands</title>
    <section xml:id="the-no_op-command">
      <title>3.1 The no_op Command</title>
      <para>
        The <literal>no_op</literal> command is a command that
        explicitly is a No Operation, to be used to implement
        functionality such as keep-alives and or application layer
        padding.
      </para>
      <para>
        Implementations MUST NOT send any message payload accompanying
        this command, and all received command data MUST be discarded
        without interpretation.
      </para>
    </section>
    <section xml:id="the-disconnect-command">
      <title>3.2 The disconnect Command</title>
      <para>
        The <literal>disconnect</literal> command is a command that is
        used to signal explicit session termination. Upon receiving a
        disconnect command, implementations MUST interpret the command
        as a signal from the peer that no additional commands will be
        sent, and destroy the cryptographic material in the receive
        CipherState.
      </para>
      <para>
        While most implementations will likely wish to terminate the
        session upon receiving this command, any additional behavior is
        explicitly left up to the implementation and application.
      </para>
      <para>
        Implementations MUST NOT send any message payload accompanying
        this command, and MUST not send any further traffic after
        sending a disconnect command.
      </para>
    </section>
    <section xml:id="the-send_packet-command">
      <title>3.3 The send_packet Command</title>
      <para>
        The <literal>send_packet</literal> command is the command that
        is used by the initiator to transmit a Sphinx Packet over the
        network. The command’s message is the Sphinx Packet destined for
        the responder.
      </para>
      <para>
        Initiators MUST terminate the session immediately upon reception
        of a <literal>send_packet</literal> command.
      </para>
    </section>
  </section>
  <section xml:id="command-padding">
    <title>4. Command Padding</title>
    <para>
      We use traffic padding to hide from a passive network observer
      which command has been sent or received.
    </para>
    <para>
      Among the set of padded commands we exclude the
      <literal>Consensus</literal> command because it’s contents are a
      very large payload which is usually many times larger than our
      Sphinx packets. Therefore we only pad these commands:
    </para>
    <para>
      GetConsensus NoOp Disconnect SendPacket RetrieveMessage MessageACK
      Message MessageEmpty
    </para>
    <para>
      However we split them up into two directions, client to server and
      server to client because they differ in size due to the difference
      in size between <literal>SendPacket</literal> and
      <literal>Message</literal>:
    </para>
    <para>
      Client to Server commands:
    </para>
    <para>
      NoOp SendPacket Disconnect RetrieveMessage GetConsensus
    </para>
    <para>
      Server to client commands:
    </para>
    <para>
      Message MessageACK MessageEmpty
    </para>
    <para>
      The <literal>GetConsensus</literal> command is a special case
      because we only want to pad it when it’s sent over the mixnet. We
      don’t want to pad it when sending to the dirauths. Although it
      would not be so terrible if it’s padded when sent to the dirauths…
      it would just needlessly take up bandwidth without providing any
      privacy benefits.
    </para>
  </section>
  <section xml:id="anonymity-considerations">
    <title>5. Anonymity Considerations</title>
    <para>
      Adversaries being able to determine that two parties are
      communicating via KMNWP is beyond the threat model of this
      protocol. At a minimum, it is trivial to determine that a KMNWP
      handshake is being performed, due to the length of each handshake
      message, and the fixed positions of the various public keys.
    </para>
  </section>
  <section xml:id="security-considerations">
    <title>6. Security Considerations</title>
    <para>
      It is imperative that implementations use ephemeral keys for every
      handshake as the security properties of the Kyber KEM are totally
      lost if keys are ever reused.
    </para>
    <para>
      Kyber was chosen as the KEM algorithm due to it’s conservative
      parameterization, simplicty of implementation, and high
      performance in software. It is hoped that the addition of a
      quantum resistant algorithm will provide forward secrecy even in
      the event that large scale quantum computers are applied to
      historical intercepts.
    </para>
  </section>
  <section xml:id="acknowledgments">
    <title>7. Acknowledgments</title>
    <para>
      I would like to thank Trevor Perrin for providing feedback during
      the design of this protocol, and answering questions regarding
      Noise.
    </para>
  </section>
  <section xml:id="appendix-a.-references">
    <title>Appendix A. References</title>
    <section xml:id="appendix-a.1-normative-references">
      <title>Appendix A.1 Normative References</title>
      <para>
      </para>
    </section>
    <section xml:id="appendix-a.2-informative-references">
      <title>Appendix A.2 Informative References</title>
      <para>
      </para>
    </section>
  </section>
  <section xml:id="appendix-b.-citing-this-document">
    <title>Appendix B. Citing This Document</title>
    <section xml:id="appendix-b.1-bibtex-entry">
      <title>Appendix B.1 Bibtex Entry</title>
      <para>
        Note that the following bibtex entry is in the IEEEtran bibtex
        style as described in a document called <quote>How to Use the
        IEEEtran BIBTEX Style</quote>.
      </para>
      <programlisting>
@online{KatzMixWire,
title = {Katzenpost Mix Network Wire Protocol Specification},
author = {Yawning Angel},
url = {https://github.com/katzenpost/katzenpost/blob/master/docs/specs/wire-protocol.rst},
year = {2017}
}
</programlisting>
      <para>
        <emphasis role="strong">XWING</emphasis>
      </para>
      <para>
        Manuel Barbosa, Deirdre Connolly, João Diogo Duarte, Aaron
        Kaiser, Peter Schwabe, Karoline Varner, Bas Westerbaan
        <quote>X-Wing: The Hybrid KEM You’ve Been Looking For</quote>,
        https://eprint.iacr.org/2024/039.pdf
      </para>
      <para>
        <emphasis role="strong">NOISE</emphasis>
      </para>
      <para>
        Perrin, T., <quote>The Noise Protocol Framework</quote>, May
        2017, https://noiseprotocol.org/noise.pdf
      </para>
      <para>
        <emphasis role="strong">NOISEHFS</emphasis>
      </para>
      <para>
        Weatherley, R., <quote>Noise Extension: Hybrid Forward
        Secrecy</quote>,
        https://github.com/noiseprotocol/noise_hfs_spec/blob/master/output/noise_hfs.pdf
      </para>
      <para>
        <emphasis role="strong">PQNOISE</emphasis>
      </para>
      <para>
        Yawning Angel, Benjamin Dowling, Andreas Hülsing, Peter Schwabe
        and Florian Weber, <quote>Post Quantum Noise</quote>, 2022,
        https://eprint.iacr.org/2022/539.pdf
      </para>
      <para>
        <emphasis role="strong">RFC2119</emphasis>
      </para>
      <para>
        Bradner, S., <quote>Key words for use in RFCs to Indicate
        Requirement Levels</quote>, BCP 14, RFC 2119, DOI
        10.17487/RFC2119, March 1997,
        https://www.rfc-editor.org/info/rfc2119
      </para>
      <para>
        <emphasis role="strong">RFC5246</emphasis>
      </para>
      <para>
        Dierks, T. and E. Rescorla, <quote>The Transport Layer Security
        (TLS) Protocol Version 1.2</quote>, RFC 5246, DOI
        10.17487/RFC5246, August 2008,
        https://www.rfc-editor.org/info/rfc5246
      </para>
      <para>
        <emphasis role="strong">RFC7748</emphasis>
      </para>
      <para>
        Langley, A., Hamburg, M., and S. Turner, <quote>Elliptic Curves
        for Security</quote>, RFC 7748, DOI 10.17487/RFC7748, January
        2016, http://www.rfc-editor.org/info/rfc7748
      </para>
    </section>
  </section>
</article>
