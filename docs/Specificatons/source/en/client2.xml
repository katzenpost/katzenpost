<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article>
<article
  xmlns="http://docbook.org/ns/docbook" version="5.0"
  xmlns:xlink="http://www.w3.org/1999/xlink" >
  <info>
    <title>Client2 Design Specification</title>
    <authorgroup>
      <author>
        <personname>
          <firstname>David</firstname>
          <surname>Stainton</surname>
        </personname>
      </author>
    </authorgroup>
  </info>
  <para>
    <emphasis role="strong">Abstract</emphasis>
  </para>
  <para>
    This document describes the design of the new Katzenpost mix network
    client known as client2. In particular we discuss it’s multiplexing
    and privilege separation design elements as well as the protocol
    used by the thin client library.
  </para>
  <section xml:id="introduction">
    <title>1. Introduction</title>
    <para>
      A Katzenpost mixnet client has several responsibilities at
      minimum:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          compose Sphinx packets
        </para>
      </listitem>
      <listitem>
        <para>
          decrypt SURB replies
        </para>
      </listitem>
      <listitem>
        <para>
          send and receive Noise protocol messages
        </para>
      </listitem>
      <listitem>
        <para>
          keep up to date with the latest PKI document
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="overview">
    <title>2. Overview</title>
    <para>
      Client2 is essentially a long running daemon process that listens
      on an abstract unix domain socket for incoming thin client library
      connections. Many client applications can use the same client2
      daemon. Those connections are in a sense being multiplexed into
      the daemon’s single connection to the mix network.
    </para>
    <para>
      Therefore applications will be integrated with Katzenpost using
      the thin client library which gives them the capability to talk
      with the client2 daemon and in that way interact with the mix
      network. The reason we call it a thin client library is because it
      does not do any mixnet related cryptography since that is already
      handled by the client2 daemon. In particular, the PKI document is
      stripped by the daemon before it’s passed on to the thin clients.
      Likewise, thin clients don’t decrypt SURB replies or compose
      Sphinx packets, instead all the that Noise, Sphinx and PKI related
      cryptography is handled by the daemon.
    </para>
  </section>
  <section xml:id="thin-client-and-daemon-protocol">
    <title>3. Thin client and daemon protocol</title>
    <para>
      Note that the thin client daemon protocol uses abstract unix
      domain sockets in datagram packet mode. The socket is of type
      SOCK_SEQPACKET which is defined as:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <emphasis role="strong">SOCK_SEQPACKET</emphasis> (since Linux
          2.6.4), is a connection-oriented socket that preserves message
          boundaries and delivers messages in the order that they were
          sent.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      In golang this is referred to by the <quote>unixpacket</quote>
      network string.
    </para>
    <section xml:id="client-socket-naming-convention">
      <title>3.1 Client socket naming convention</title>
      <para>
        Thin clients MUST randomize their abstract unix domain socket
        name otherwise the static name will prevent multiplexing because
        the kernel requires that the connection be between uniquely
        nameed socket pairs. The Katzenpost reference implementation of
        the thin client library selects a socket name with four random
        hex digits appended to the end of the name like so:
      </para>
      <programlisting>
@katzenpost_golang_thin_client_DEADBEEF
</programlisting>
    </section>
    <section xml:id="daemon-socket-naming-convention">
      <title>3.2 Daemon socket naming convention</title>
      <para>
        The client2 daemon listens on an abstract unix domain socket
        with the following name:
      </para>
      <programlisting>
@katzenpost
</programlisting>
    </section>
    <section xml:id="protocol-messages">
      <title>3.3 Protocol messages</title>
      <para>
        Note that there are two protocol message types and they are
        always CBOR encoded. We do not make use of any prefix length
        encoding because the socket type preserves message boundaries
        for us. Therefore we simply send over pure CBOR encoded
        messages.
      </para>
      <para>
        The daemon sends the <literal>Response</literal> message which
        is defined in golang as a struct containing an app ID and one of
        four possible events:
      </para>
      <programlisting>

type Response struct {
    // AppID must be a unique identity for the client application
    // that is receiving this Response.
    AppID *[AppIDLength]byte `cbor:app_id`

    ConnectionStatusEvent *ConnectionStatusEvent `cbor:connection_status_event`

    NewPKIDocumentEvent *NewPKIDocumentEvent `cbor:new_pki_document_event`

    MessageSentEvent *MessageSentEvent `cbor:message_sent_event`

    MessageReplyEvent *MessageReplyEvent `cbor:message_reply_event`
}

type ConnectionStatusEvent struct {
    IsConnected bool `cbor:is_connected`
    Err error `cbor:err`
}

type NewPKIDocumentEvent struct {
    Payload []byte `cbor:payload`
}

type MessageReplyEvent struct {
    MessageID *[MessageIDLength]byte `cbor:message_id`
    SURBID *[sConstants.SURBIDLength]byte `cbor:surbid`
    Payload []byte `cbor:payload`
    Err error `cbor:err`
}

type MessageSentEvent struct {
    MessageID *[MessageIDLength]byte `cbor:message_id`
    SURBID *[sConstants.SURBIDLength]byte `cbor:surbid`
    SentAt time.Time `cbor:sent_at`
    ReplyETA time.Duration `cbor:reply_eta`
    Err error `cbor:err`
}
</programlisting>
      <para>
        The client sends the <literal>Request</literal> message which is
        defined in golang as:
      </para>
      <programlisting>

type Request struct {
    // ID is the unique identifier with respect to the Payload.
    // This is only used by the ARQ.
    ID *[MessageIDLength]byte `cbor:id`

    // WithSURB indicates if the message should be sent with a SURB
    // in the Sphinx payload.
    WithSURB bool `cbor:with_surb`

    // SURBID must be a unique identity for each request.
    // This field should be nil if WithSURB is false.
    SURBID *[sConstants.SURBIDLength]byte `cbor:surbid`

    // AppID must be a unique identity for the client application
    // that is sending this Request.
    AppID *[AppIDLength]byte `cbor:app_id`

    // DestinationIdHash is 32 byte hash of the destination Provider's
    // identity public key.
    DestinationIdHash *[32]byte `cbor:destination_id_hash`

    // RecipientQueueID is the queue identity which will receive the message.
    RecipientQueueID []byte `cbor:recipient_queue_id`

    // Payload is the actual Sphinx packet.
    Payload []byte `cbor:payload`

    // IsSendOp is set to true if the intent is to send a message through
    // the mix network.
    IsSendOp bool `cbor:is_send_op`

    // IsARQSendOp is set to true if the intent is to send a message through
    // the mix network using the naive ARQ error correction scheme.
    IsARQSendOp bool `cbor:is_arq_send_op`

    // IsEchoOp is set to true if the intent is to merely test that the unix
    // socket listener is working properly; the Response payload will be
    // contain the Request payload.
    IsEchoOp bool `cbor:is_echo_op`

    // IsLoopDecoy is set to true to indicate that this message shall
    // be a loop decoy message.
    IsLoopDecoy bool `cbor:is_loop_decoy`

    // IsDropDecoy is set to true to indicate that this message shall
    // be a drop decoy message.
    IsDropDecoy bool `cbor:is_drop_decoy`
}
</programlisting>
    </section>
  </section>
  <section xml:id="protocol-description">
    <title>3.4 Protocol description</title>
    <para>
      Upon connecting to the daemon socket the client must wait for two
      messages. The first message received must have it’s
      <literal>is_status</literal> field set to true. If so then it’s
      <literal>is_connected</literal> field indicates whether or not the
      daemon has a mixnet PQ Noise protocol connection to an entry node.
    </para>
    <para>
      Next the client awaits the second message which contains the PKI
      document in it’s <literal>payload</literal> field. This marks the
      end of the initial connection sequence. Note that this PKI
      document is stripped of all cryptographic signatures.
    </para>
    <para>
      In the next protocol phase, the client may send
      <literal>Request</literal> messages to the daemon in order to
      cause the daemon to encapsulate the given payload in a Sphinx
      packet and send it to the entry node. Likewise the daemon my send
      the client <literal>Response</literal> messages at any time during
      this protocol phase. These <literal>Response</literal> messages
      may indicated a connection status change, a new PKI document or a
      message sent or reply event.
    </para>
  </section>
  <section xml:id="request-message-fields">
    <title>3.5 Request message fields</title>
    <para>
      There are several <literal>Request</literal> fields that we need
      to discuss.
    </para>
    <para>
      Firstly, each <literal>Request</literal> message sent by a thin
      client needs to have the <literal>app_id</literal> field set to an
      ID that is unique among the applications using thin clients. The
      <literal>app_id</literal> is used by the daemon to route
      <literal>Response</literal> messages to the correct thin client
      socket.
    </para>
    <para>
      The rest of the fields we are concerned with are the following:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>with_surb</literal> is set to true if a Sphinx packet
          with a SURB in it’s payload should be sent.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>surbid</literal> is used to uniquely identify the
          reponse to a message sent with the
          <literal>with_surb</literal> field set to true. It should NOT
          be set if using the built-in ARQ for reliability and optional
          retransmissions.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>is_send_op</literal> must be set to true.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>payload</literal> must be set to the message payload
          being sent.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>destination_id_hash</literal> is 32 byte hash of the
          destination entry node’s identity public key.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>recipient_queue_id</literal> is the destination queue
          identity. This is the destination the message will be
          delivered to.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      If a one way message should be sent with no SURB then
      <literal>with_surb</literal> should be set to false and
      <literal>surbid</literal> may be nil. If however the thin client
      wishes to send a reliable message using the daemon’s ARQ, then the
      following fields must be set:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>id</literal> the message id which uniquely identifies
          this message and it’s eventual reply.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>with_surb</literal> set to true
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>is_arq_send_op</literal> set to true
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>payload</literal> set to the message payload, as
          usual.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>destination_id_hash</literal> set to the destination
          service node’s identity public key 32 byte hash.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>recipient_queue_id</literal> is the destination queue
          identity. This is the destination the message will be
          delivered to.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="response-message-fields">
    <title>3.6 Response message fields</title>
    <para>
      A thin client connection always begins with the daemon sendings
      the client two messages, a connection status followed by a PKI
      document.
    </para>
    <para>
      After this connection sequence phase, the daemon may send the thin
      client a connection status or PKI document update at any time.
    </para>
    <para>
      Thin clients recieve four possible events inside of
      <literal>Response</literal> messages:
    </para>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem>
        <para>
          connection status event
        </para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>
              <literal>is_connected</literal> indicated whether the
              client is connected or not.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>err</literal> may contain an error indicating why
              connection status changed.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
          new PKI document event
        </para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>
              <literal>payload</literal> is the CBOR serialied PKI
              document, stripped of all the cryptographic signatures.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
          message sent event
        </para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>
              <literal>message_id</literal> is a unique message ID
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>surb_id</literal> is the SURB ID
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>sent_at</literal> is the time the message was
              sent
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>replay_eta</literal> is the time we expect a
              reply
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>err</literal> is the optional error we received
              when attempting to send
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
          message reply event
        </para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>
              <literal>message_id</literal> is a unique message ID
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>surb_id</literal> is a the SURB ID
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>payload</literal> is the replay payload
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>err</literal> is the error, if any.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>
  </section>
</article>
