<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article>
<article
  xmlns="http://docbook.org/ns/docbook" version="5.0"
  xmlns:xlink="http://www.w3.org/1999/xlink" >
  <info>
    <title>Provider-side Autoresponder Extension</title>
    <authorgroup>
      <author>
        <personname>
          <firstname>Yawning</firstname>
          <surname>Angel</surname>
        </personname>
      </author>
      <author>
        <personname>
          <firstname>Kali</firstname>
          <surname>Kaneko</surname>
        </personname>
      </author>
      <author>
        <personname>
          <firstname>David</firstname>
          <surname>Stainton</surname>
        </personname>
      </author>
    </authorgroup>
  </info>
  <para>
    <emphasis role="strong">Abstract</emphasis>
  </para>
  <section xml:id="introduction">
    <title>1. Introduction</title>
    <para>
      This interface is meant to provide support for various
      autoresponder agents <quote>Kaetzchen</quote> that run on
      Katzenpost provider instances, thus bypassing the need to run a
      discrete client instance to provide functionality. The use-cases
      for such agents include, but are not limited to, user identity key
      lookup, a discard address, and a loop-back responder for the
      purpose of cover traffic.
    </para>
    <section xml:id="conventions-used-in-this-document">
      <title>1.1 Conventions Used in This Document</title>
      <para>
        The key words <quote>MUST</quote>, <quote>MUST NOT</quote>,
        <quote>REQUIRED</quote>, <quote>SHALL</quote>, <quote>SHALL
        NOT</quote>, <quote>SHOULD</quote>, <quote>SHOULD NOT</quote>,
        <quote>RECOMMENDED</quote>, <quote>MAY</quote>, and
        <quote>OPTIONAL</quote> in this document are to be interpreted
        as described in <literal>RFC2119</literal>.
      </para>
    </section>
    <section xml:id="terminology">
      <title>1.2. Terminology</title>
      <para>
        <literal>SURB</literal> - <quote>single use reply block</quote>
        SURBs are used to achieve recipient anonymity, that is to say,
        SURBs function as a cryptographic delivery token that you can
        give to another client entity so that they can send you a
        message without them knowing your identity or location on the
        network. See <literal>SPHINXSPEC</literal> and
        <literal>SPHINX</literal>.
      </para>
      <para>
        <literal>BlockSphinxPlaintext</literal> - The payload structure
        which is encapsulated by the Sphinx body. It is described in
        <literal>KATZMIXE2E</literal>, section
      </para>
      <orderedlist numeration="arabic" spacing="compact">
        <listitem override="4">
          <para>
            Client and Provider processing of received packets
          </para>
        </listitem>
      </orderedlist>
    </section>
  </section>
  <section xml:id="extension-overview">
    <title>2. Extension Overview</title>
    <para>
      Each Kaetzchen agent will register as a potential recipient on its
      Provider. When the Provider receives a forward packet destined for
      a Kaetzchen instance, it will hand off the fully unwrapped packet
      along with its corresponding SURB to the agent, which will then
      act on the packet and optionally reply utilizing the SURB.
    </para>
  </section>
  <section xml:id="agent-requirements">
    <title>3. Agent Requirements</title>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Each agent operation MUST be idempotent.
        </para>
      </listitem>
      <listitem>
        <para>
          Each agent operation request and response MUST fit within one
          Sphinx packet.
        </para>
      </listitem>
      <listitem>
        <para>
          Each agent SHOULD register a recipient address that is
          prefixed with (Or another standardized delimiter, agreed to by
          all participating providers in a given mixnet).
        </para>
      </listitem>
      <listitem>
        <para>
          Each agent SHOULD register a recipient address that consists
          of a
        </para>
      </listitem>
      <listitem>
        <para>
          RFC5322 dot-atom value, and MUST register recipient addresses
          that are at most 64 octets in length.
        </para>
      </listitem>
      <listitem>
        <para>
          The first byte of the agent's response payload MUST be 0x01 to
          allow clients to easily differentiate between SURB-ACKs and
          agent responses.
        </para>
      </listitem>
    </itemizedlist>
    <section xml:id="mix-message-formats">
      <title>3.1 Mix Message Formats</title>
      <para>
        Messages from clients to Kaetzchen use the following payload
        format in the forward Sphinx packet:
      </para>
      <programlisting>
struct {
    uint8_t flags;
    uint8_t reserved; /* Set to 0x00. */
    select (flags) {
    case 0:
    opaque padding[sizeof(SphinxSURB)];
    case 1:
    SphinxSURB surb;
    }
    opaque plaintext[];
} KaetzchenMessage;
</programlisting>
      <para>
        The plaintext component of a <literal>KaetzchenMessage</literal>
        MUST be padded by appending <quote>0x00</quote> bytes to make
        the final total size of a <literal>KaetzchenMessage</literal>
        equal to that of a <literal>BlockSphinxPlaintext</literal>.
      </para>
      <para>
        Messages (replies) from the Kaetzchen to client use the
        following payload format in the SURB generated packet::
      </para>
      <programlisting>
struct {
    opaque plaintext[];
} KaetzchenReply;
</programlisting>
      <para>
        The plaintext component of a <literal>KaetzchenReply</literal>
        MUST be padded by appending <quote>0x00</quote> bytes to make
        the final total size of a <literal>KaetzchenReply</literal>
        equal to that of a <literal>BlockSphinxPlaintext</literal>
      </para>
    </section>
  </section>
  <section xml:id="pki-extensions">
    <title>4. PKI Extensions</title>
    <para>
      Each provider SHOULD publish the list of publicly accessible
      Kaetzchen agent endpoints in its MixDescriptor, along with any
      other information required to utilize the agent.
    </para>
    <para>
      Provider should make this information available in the form of a
      map in which the keys are the label used to identify a given
      service, and the value is a map with arbitrary keys.
    </para>
    <para>
      Valid service names refer to the services defined in extensions to
      this specification. Every service MUST be implemented by one and
      only one Kaetzchen agent.
    </para>
    <para>
      For each service, the provider MUST advertise a field for the
      endpoint at which the Kaetzchen agent can be reached, as a key
      value pair where the key is <literal>endpoint</literal>, and the
      value is the provider side endpoint identifier.
    </para>
    <programlisting>
{ &quot;kaetzchen&quot;:
    { &quot;keyserver&quot; : {
            &quot;endpoint&quot;: &quot;+keyserver&quot;,
            &quot;version&quot; : 1 } },
    { &quot;discard&quot; : {
            &quot;endpoint&quot;: &quot;+discard&quot;, } },
    { &quot;loop&quot; : {
            &quot;endpoint&quot;: &quot;+loopback&quot;,
            &quot;restrictedToUsers&quot;: true } },
}
</programlisting>
  </section>
  <section xml:id="anonymity-considerations">
    <title>5. Anonymity Considerations</title>
    <para>
      In the event that the mix keys for the entire return path are
      compromised, it is possible for adversaries to unwrap the SURB and
      determine the final recipient of the reply.
    </para>
    <para>
      Depending on what sort of operations a given agent implements,
      there may be additional anonymity impact that requires separate
      consideration.
    </para>
    <para>
      Clients MUST NOT have predictable retranmission otherwise this
      makes active confirmations attacks possible which could be used to
      discover the ingress Provider of the client.
    </para>
  </section>
  <section xml:id="security-considerations">
    <title>6. Security Considerations</title>
    <para>
      It is possible to use this mechanism to flood a victim with
      unwanted traffic by constructing a request with a SURB destined
      for the target.
    </para>
    <para>
      Depending on the operations implemented by each agent, the added
      functionality may end up being a vector for Denial of Service
      attacks in the form of CPU or network overload.
    </para>
    <para>
      Unless the agent implements additional encryption, message
      integrity and privacy is limited to that which is provided by the
      base Sphinx packet format and parameterization.
    </para>
  </section>
  <section xml:id="acknowledgments">
    <title>7. Acknowledgments</title>
    <para>
      The inspiration for this extension comes primarily from a design
      by Vincent Breitmoser.
    </para>
  </section>
  <section xml:id="appendix-a.-references">
    <title>Appendix A. References</title>
    <section xml:id="appendix-a.1-normative-references">
      <title>Appendix A.1 Normative References</title>
      <para>
      </para>
    </section>
    <section xml:id="appendix-a.2-informative-references">
      <title>Appendix A.2 Informative References</title>
      <para>
      </para>
    </section>
  </section>
  <section xml:id="appendix-b.-citing-this-document">
    <title>Appendix B. Citing This Document</title>
    <section xml:id="appendix-b.1-bibtex-entry">
      <title>Appendix B.1 Bibtex Entry</title>
      <para>
        Note that the following bibtex entry is in the IEEEtran bibtex
        style as described in a document called <quote>How to Use the
        IEEEtran BIBTEX Style</quote>.
      </para>
      <programlisting>
@online{Kaetzchen,
title = {Katzenpost Provider-side Autoresponder Extension},
author = {Yawning Angel and Kali Kaneko and David Stainton},
url = {https://github.com/katzenpost/katzenpost/blob/main/docs/specs/kaetzchen.md},
year = {2018}
}
</programlisting>
      <para>
        <emphasis role="strong">KATZMIXE2E</emphasis>
      </para>
      <programlisting>
Angel, Y., Danezis, G., Diaz, C., Piotrowska, A., Stainton, D.,
&quot;Katzenpost Mix Network End-to-end Protocol Specification&quot;,
July 2017,
https://github.com/katzenpost/katzenpost/blob/main/docs/specs/old/end_to_end.md
</programlisting>
      <para>
        <emphasis role="strong">KATZMIXPKI</emphasis>
      </para>
      <programlisting>
Angel, Y., Piotrowska, A., Stainton, D.,
&quot;Katzenpost Mix Network Public Key Infrastructure Specification&quot;,
December 2017,
https://github.com/katzenpost/katzenpost/blob/main/docs/specs/pki.md
</programlisting>
      <para>
        <emphasis role="strong">RFC2119</emphasis>
      </para>
      <programlisting>
Bradner, S.,
&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;,
BCP 14, RFC 2119, DOI 10.17487/RFC2119,
March 1997,
http://www.rfc-editor.org/info/rfc2119
</programlisting>
      <para>
        <emphasis role="strong">RFC5322</emphasis>
      </para>
      <programlisting>
Resnick, P., Ed.,
&quot;Internet Message Format&quot;,
RFC 5322, DOI 10.17487/RFC5322,
October 2008,
https://www.rfc-editor.org/info/rfc5322
</programlisting>
      <para>
        <emphasis role="strong">SPHINX</emphasis>
      </para>
      <programlisting>
Danezis, G., Goldberg, I.,
&quot;Sphinx: A Compact and Provably Secure Mix Format&quot;,
DOI 10.1109/SP.2009.15,
May 2009,
http://research.microsoft.com/en-us/um/people/gdane/papers/sphinx-eprint.pdf
</programlisting>
      <para>
        <emphasis role="strong">SPHINXSPEC</emphasis>
      </para>
      <programlisting>
Angel, Y., Danezis, G., Diaz, C., Piotrowska, A., Stainton, D.,
&quot;Sphinx Mix Network Cryptographic Packet Format Specification&quot;
July 2017,
https://github.com/katzenpost/katzenpost/blob/main/docs/specs/sphinx.md
</programlisting>
    </section>
  </section>
</article>
