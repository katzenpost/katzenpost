<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article>
<article
  xmlns="http://docbook.org/ns/docbook" version="5.0"
  xmlns:xlink="http://www.w3.org/1999/xlink" >
  <info>
    <title>KEMSphinx</title>
    <authorgroup>
      <author>
        <personname>
          <firstname>David</firstname>
          <surname>Stainton</surname>
        </personname>
      </author>
    </authorgroup>
  </info>
  <para>
    <emphasis role="strong">Abstract</emphasis>
  </para>
  <para>
    Here I present a modification of the Sphinx cryptographic packet
    format that uses a KEM instead of a NIKE whilst preserving the
    properties of bitwise unlinkability, constant packet size and route
    length hiding.
  </para>
  <section xml:id="introduction">
    <title>1. Introduction</title>
    <para>
      We’ll express our KEM Sphinx header in pseudo code. The Sphinx
      body will be exactly the same as
      <link linkend="SPHINXSPEC">SPHINXSPEC</link>. Our basic KEM API
      has three functions:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <literal>PRIV_KEY, PUB_KEY = GEN_KEYPAIR(RNG)</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>ct, ss = ENCAP(PUB_KEY)</literal> - Encapsulate
          generates a shared secret, ss, for the public key and
          encapsulates it into a ciphertext.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>ss = DECAP(PRIV_KEY, ct)</literal> - Decapsulate
          computes the shared key, ss, encapsulated in the ciphertext,
          ct, for the private key.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Additional notation includes:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <literal>||</literal> = concatenate two binary blobs together
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>PRF</literal> = pseudo random function, a
          cryptographic hash function, e.g. <literal>Blake2b</literal>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Therefore we must embed these KEM ciphertexts in the KEMSphinx
      header, one KEM ciphertext per mix hop.
    </para>
  </section>
  <section xml:id="post-quantum-hybrid-kem">
    <title>2. Post Quantum Hybrid KEM</title>
    <para>
      Special care must be taken in order correctly compose a hybrid
      post quantum KEM that is IND-CCA2 robust.
    </para>
    <para>
      The hybrid post quantum KEMs found in Cloudflare’s circl library
      are suitable to be used with Noise or TLS but not with KEM Sphinx
      because they are not IND-CCA2 robust. Noise and TLS achieve
      IND-CCA2 security by mixing in the public keys and ciphertexts
      into the hash object and therefore do not require an IND-CCA2 KEM.
    </para>
    <para>
      Firstly, our post quantum KEM is IND-CCA2 however we must
      specifically take care to make our NIKE to KEM adapter have
      semantic security. Secondly, we must make a security preserving
      KEM combiner.
    </para>
    <section xml:id="nike-to-kem-adapter">
      <title>2.1 NIKE to KEM adapter</title>
      <para>
        We easily achieve our IND-CCA2 security by means of hashing
        together the DH shared secret along with both of the public
        keys:
      </para>
      <programlisting>
func ENCAPSULATE(their_pubkey publickey) ([]byte, []byte) {
    my_privkey, my_pubkey = GEN_KEYPAIR(RNG)
    ss = DH(my_privkey, their_pubkey)
    ss2 = PRF(ss || their_pubkey || my_pubkey)
    return my_pubkey, ss2
}

func DECAPSULATE(my_privkey, their_pubkey) []byte {
    s = DH(my_privkey, their_pubkey)
    shared_key = PRF(ss || my_pubkey || their_pubkey)
    return shared_key
}
</programlisting>
    </section>
    <section xml:id="kem-combiner">
      <title>2.2 KEM Combiner</title>
      <para>
        The KEM Combiners paper <link linkend="KEMCOMB">KEMCOMB</link>
        makes the observation that if a KEM combiner is not security
        preserving then the resulting hybrid KEM will not have IND-CCA2
        security if one of the composing KEMs does not have IND-CCA2
        security. Likewise the paper points out that when using a
        security preserving KEM combiner, if only one of the composing
        KEMs has IND-CCA2 security then the resulting hybrid KEM will
        have IND-CCA2 security.
      </para>
      <para>
        Our KEM combiner uses the split PRF design from the paper when
        combining two KEM shared secrets together we use a hash function
        to also mix in the values of both KEM ciphertexts. In this
        pseudo code example we are hashing together the two shared
        secrets from the two underlying KEMs, ss1 and ss2. Additionally
        the two ciphertexts from the underlying KEMs, cct1 and cct2, are
        also hashed together:
      </para>
      <programlisting>
func SplitPRF(ss1, ss2, cct1, cct2 []byte) []byte {
    cct := cct1 || cct2
    return PRF(ss1 || cct) XOR PRF(ss2 || cct)
}
</programlisting>
      <para>
        Which simplifies to:
      </para>
      <programlisting>
SplitPRF := PRF(ss1 || cct2) XOR PRF(ss2 || cct1)
</programlisting>
      <para>
        The Split PRF can be used to combine an arbitrary number of
        KEMs. Here’s what it looks like with three KEMs:
      </para>
      <programlisting>
func SplitPRF(ss1, ss2, ss3, cct1, cct2, cct3 []byte) []byte {
    cct := cct1 || cct2 || cct3
    return PRF(ss1 || cct) XOR PRF(ss2 || cct) XOR PRF(ss3 || cct)
}
</programlisting>
    </section>
  </section>
  <section xml:id="kemsphinx-header-design">
    <title>3. KEMSphinx Header Design</title>
    <para>
      NIKE Sphinx header elements:
    </para>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem>
        <para>
          Version number (MACed but not encrypted)
        </para>
      </listitem>
      <listitem>
        <para>
          Group element
        </para>
      </listitem>
      <listitem>
        <para>
          Encrypted per routing commands
        </para>
      </listitem>
      <listitem>
        <para>
          MAC for this hop (authenticates header fields 1 thru 4)
        </para>
      </listitem>
    </orderedlist>
    <para>
      KEM Sphinx header elements:
    </para>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem>
        <para>
          Version number (MACed but not encrypted)
        </para>
      </listitem>
      <listitem>
        <para>
          One KEM ciphertext for use with the next hop
        </para>
      </listitem>
      <listitem>
        <para>
          Encrypted per routing commands AND KEM ciphtertexts, one for
          each additional hop
        </para>
      </listitem>
      <listitem>
        <para>
          MAC for this hop (authenticates header fields 1 thru 4)
        </para>
      </listitem>
    </orderedlist>
    <para>
      We can say that KEMSphinx differs from NIKE Sphinx by replacing
      the header’s group element (e.g. an X25519 public key) field with
      the KEM ciphertext. Subsequent KEM ciphertexts for each hop are
      stored inside the Sphinx header <quote>routing information</quote>
      section.
    </para>
    <para>
      First we must have a data type to express a mix hop, and we can
      use lists of these hops to express a route:
    </para>
    <programlisting>
type PathHop struct {
    public_key kem.PublicKey
    routing_commands Commands
}
</programlisting>
    <para>
      Here’s how we construct a KEMSphinx packet header where path is a
      list of PathHop, and indicates the route through the network:
    </para>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem>
        <para>
          Derive the KEM ciphertexts for each hop.
        </para>
      </listitem>
    </orderedlist>
    <programlisting>
route_keys = []
route_kems = []
for i := 0; i &lt; num_hops; i++ {
    kem_ct, ss := ENCAP(path[i].public_key)
    route_kems += kem_ct
    route_keys += ss
}
</programlisting>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem override="2">
        <para>
          Derive the routing_information keystream and encrypted padding
          for each hop.
        </para>
      </listitem>
    </orderedlist>
    <para>
      Same as in <link linkend="SPHINXSPEC">SPHINXSPEC</link> except for
      the fact that each routing info slot is now increased by the size
      of the KEM ciphertext.
    </para>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem override="3">
        <para>
          Create the routing_information block.
        </para>
      </listitem>
    </orderedlist>
    <para>
      Here we modify the Sphinx implementation to pack the next KEM
      ciphertext into each routing information block. Each of these
      blocks is decrypted for each mix mix hop which will decrypt the
      KEM ciphertext for the next hop in the route.
    </para>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem override="4">
        <para>
          Assemble the completed Sphinx Packet Header and Sphinx Packet
          Payload SPRP key vector. Same as in
          <link linkend="SPHINXSPEC">SPHINXSPEC</link> except the
          <literal>kem_element</literal> field is set to the first KEM
          ciphertext, <literal>route_kems[0]</literal>:
        </para>
      </listitem>
    </orderedlist>
    <programlisting>
var sphinx_header SphinxHeader
sphinx_header.additional_data = version
sphinx_header.kem_element = route_kems[0]
sphinx_header.routing_info = routing_info
sphinx_header.mac = mac
</programlisting>
  </section>
  <section xml:id="kemsphinx-unwrap-operation">
    <title>2. KEMSphinx Unwrap Operation</title>
    <para>
      Most of the design here will be exactly the same as in
      <link linkend="SPHINXSPEC">SPHINXSPEC</link>. However there are a
      few notable differences:
    </para>
    <orderedlist numeration="arabic" spacing="compact">
      <listitem>
        <para>
          The shared secret is derived from the KEM ciphertext instead
          of a DH.
        </para>
      </listitem>
      <listitem>
        <para>
          Next hop’s KEM ciphertext stored in the encrypted routing
          information.
        </para>
      </listitem>
    </orderedlist>
    <section xml:id="acknowledgments">
      <title>3. Acknowledgments</title>
      <para>
        I would like to thank Peter Schwabe for the original idea of
        simply replacing the Sphinx NIKE with a KEM and for answering
        all my questions. I’d also like to thank Bas Westerbaan for
        answering questions.
      </para>
    </section>
    <section xml:id="appendix-a.-references">
      <title>Appendix A. References</title>
      <para>
        <emphasis role="strong">KEMCOMB</emphasis>
      </para>
      <programlisting>
Federico Giacon, Felix Heuer, Bertram Poettering,
&quot;KEM Combiners&quot;,
2018
https://link.springer.com/chapter/10.1007/978-3-319-76578-5_7&gt;PKC
</programlisting>
      <para>
        <emphasis role="strong">SPHINX09</emphasis>
      </para>
      <programlisting>
Danezis, G., Goldberg, I.,
&quot;Sphinx: A Compact and Provably Secure Mix Format\&quot;,
DOI 10.1109/SP.2009.15,
May 2009,
https://cypherpunks.ca/~iang/pubs/Sphinx_Oakland09.pdf
</programlisting>
      <para>
        <emphasis role="strong">SPHINXSPEC</emphasis>
      </para>
      <programlisting>
Angel, Y., Danezis, G., Diaz, C., Piotrowska, A., Stainton, D.,
&quot;Sphinx Mix Network Cryptographic Packet Format Specification&quot;
July 2017,
https://github.com/katzenpost/katzenpost/blob/master/docs/specs/sphinx.md
</programlisting>
    </section>
  </section>
</article>
