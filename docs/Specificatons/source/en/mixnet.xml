<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article>
<article
  xmlns="http://docbook.org/ns/docbook" version="5.0"
  xmlns:xlink="http://www.w3.org/1999/xlink" >
  <info>
    <title>Mix Network Specification</title>
    <authorgroup>
      <author>
        <personname>
          <firstname>Yawning</firstname>
          <surname>Angel</surname>
        </personname>
      </author>
      <author>
        <personname>
          <firstname>George</firstname>
          <surname>Danezis</surname>
        </personname>
      </author>
      <author>
        <personname>
          <firstname>Claudia</firstname>
          <surname>Diaz</surname>
        </personname>
      </author>
      <author>
        <personname>
          <firstname>Ania</firstname>
          <surname>Piotrowska</surname>
        </personname>
      </author>
      <author>
        <personname>
          <firstname>David</firstname>
          <surname>Stainton</surname>
        </personname>
      </author>
    </authorgroup>
  </info>
  <para>
    <emphasis role="strong">Abstract</emphasis>
  </para>
  <para>
    This document describes the high level architecture and detailed
    protocols and behavior required of mix nodes participating in the
    Katzenpost Mix Network.
  </para>
  <section xml:id="introduction">
    <title>1. Introduction</title>
    <para>
      This specification provides the design of a mix network meant
      provide an anonymous messaging protocol between clients and public
      mixnet services.
    </para>
    <para>
      Various system components such as client software, end to end
      messaging protocols, Sphinx cryptographic packet format and wire
      protocol are described in their own specification documents.
    </para>
    <section xml:id="terminology">
      <title>1.1 Terminology</title>
      <itemizedlist>
        <listitem>
          <para>
            A <literal>KiB</literal> is defined as 1024 8 bit octets.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Mixnet</literal> - A mixnet also known as a mix
            network is a network of mixes that can be used to build
            various privacy preserving protocols.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Mix</literal> - A cryptographic router that is used
            to compose a mixnet. Mixes use a cryptographic operation on
            messages being routed which provides bitwise unlinkability
            with respect to input versus output messages. Katzenpost is
            a decryption mixnet that uses the Sphinx cryptographic
            packet format.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Node</literal> - A Mix. Client's are NOT considered
            nodes in the mix network. However note that network
            protocols are often layered; in our design documents we
            describe &quot;mixnet hidden services&quot; which can be
            operated by mixnet clients. Therefore if you are using node
            in some adherence to methematical termonology one could
            conceivably designate a client as a node. That having been
            said, it would not be appropriate to the discussion of our
            core mixnet protocol to refer to the clients as nodes.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Entry mix</literal>, <literal>Entry node</literal>
            - An entry mix is a mix that has some additional features:
          </para>
        </listitem>
      </itemizedlist>
      <orderedlist numeration="arabic" spacing="compact">
        <listitem>
          <para>
            An entry mix is always the first hop in routes where the
            message originates from a client.
          </para>
        </listitem>
        <listitem>
          <para>
            An entry mix authenticates client’s direct connections via
            the mixnet’s wire protocol.
          </para>
        </listitem>
        <listitem>
          <para>
            An entry mix queues reply messages and allows clients to
            retrieve them later.
          </para>
        </listitem>
      </orderedlist>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <literal>Service mix</literal> - A service mix is a mix that
            has some additional features:
          </para>
        </listitem>
      </itemizedlist>
      <orderedlist numeration="arabic" spacing="compact">
        <listitem>
          <para>
            A service mix is always the last hop in routes where the
            message originates from a client.
          </para>
        </listitem>
        <listitem>
          <para>
            A service mix runs mixnet services which use a Sphinx SURB
            based protocol.
          </para>
        </listitem>
      </orderedlist>
      <itemizedlist>
        <listitem>
          <para>
            <literal>User</literal> - An agent using the Katzenpost
            system.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Client</literal> - Software run by the User on its
            local device to participate in the Mixnet. Again let us
            reiterate that a client is not considered a &quot;node in
            the network&quot; at the level of analysis where we are
            discussing the core mixnet protocol in this here document.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Katzenpost</literal> - A project to design many
            improved decryption mixnet protocols.
          </para>
          <para>
            Classes of traffic - We distinguish the following classes of
            traffic:
          </para>
        </listitem>
        <listitem>
          <para>
            SURB Replies (also sometimes referred to as ACKs)
          </para>
        </listitem>
        <listitem>
          <para>
            Forward messages
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Packet</literal> - Also known as a Sphinx packet. A
            nested encrypted packet that, is routed through the mixnet
            and cryptographically transformed at each hop. The length of
            the packet is fixed for every class of traffic. Packet
            payloads encapsulate messages.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Payload</literal> - The payload, also known as
            packet payload, is a portion of a Packet containing a
            message, or part of a message, to be delivered anonymously.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>Message</literal> - A variable-length sequence of
            octets sent anonymously through the network. Short messages
            are sent in a single packet; long messages are fragmented
            across multiple packets.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>MSL</literal> - Maximum Segment Lifetime, 120
            seconds.
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="conventions-used-in-this-document">
      <title>1.2 Conventions Used in This Document</title>
      <para>
        The key words <quote>MUST</quote>, <quote>MUST NOT</quote>,
        <quote>REQUIRED</quote>, <quote>SHALL</quote>, <quote>SHALL
        NOT</quote>, <quote>SHOULD</quote>, <quote>SHOULD NOT</quote>,
        <quote>RECOMMENDED</quote>, <quote>MAY</quote>, and
        <quote>OPTIONAL</quote> in this document are to be interpreted
        as described in <link linkend="RFC2119">RFC2119</link>
      </para>
    </section>
  </section>
  <section xml:id="system-overview">
    <title>2. System Overview</title>
    <para>
      The presented system design is based on
      <link linkend="LOOPIX">LOOPIX</link> Below, we present the system
      overview.
    </para>
    <para>
      The entry mixes are responsible for authenticating clients,
      accepting packets from the client, and forwarding them to the mix
      network, which then relays packets to the destination service mix.
      Our network design uses a strict topology where forward message
      traverse the network from entry mix to service mix. Service mixes
      can optionally reply if the forward message contained a Single Use
      Reply Block (see <link linkend="SPHINXSPEC">SPHINXSPEC</link>.
    </para>
    <para>
      The PKI system that handles the distribution of various network
      wide parameters, and information required for each participant to
      participate in the network such as IP address/port combinations
      that each node can be reached at, and cryptographic public keys.
      The specification for the PKI is beyond the scope of this document
      and is instead covered in
      <link linkend="KATZMIXPKI">KATZMIXPKI</link>.
    </para>
    <para>
      The mix network provides neither reliable nor in-order delivery
      semantics. The described mix network is neither a user facing
      messaging system nor is it an application. It is intended to be a
      low level protocol which can be composed to form more elaborate
      mixnet protocols with stronger more useful privacy notions.
    </para>
    <section xml:id="threat-model">
      <title>2.1 Threat Model</title>
      <para>
        Here we cannot present the threat model to the higher level
        mixnet protocols. However this low level core mixnet protocol
        does have it’s own threat model which we attempt to illucidate
        here.
      </para>
      <para>
        We assume that the clients only talk to mixnet services. These
        services make use of a client provided delivery token known as a
        SURB (Single Use Reply Block) to send their replies to the
        client without knowing the client’s entry mix. This system
        guarantees third-party anonymity, meaning that no parties other
        than client and the service are able to learn that the client
        and service are communicating. Note that this is in contrast
        with other designs, such as Mixminion, which provide sender
        anonymity towards recipients as well as anonymous replies.
      </para>
      <para>
        Mixnet clients will randomly select an entry node to use and may
        reconnect if disconnected for under a duration threshold. The
        entry mix can determine the approximate message volume
        originating from and destined to a given client. We consider the
        entry mix follows the protocol and might be an
        honest-but-curious adversary.
      </para>
      <para>
        External local network observers can not determine the number of
        Packets traversing their region of the network because of the
        use of decoy traffic sent by the clients. Global observers will
        not be able to de-anonymize packet paths if there are enough
        packets traversing the mix network. Longer term statistical
        disclosure attacks are likely possible in order to link senders
        and receivers.
      </para>
      <para>
        A malicious mix only has the ability to remember which input
        packets correspond to the output packets. To discover the entire
        path all of the mixes in the path would have to be malicious.
        Moreover, the malicious mixes can drop, inject, modify or delay
        the packets for more or less time than specified.
      </para>
    </section>
    <section xml:id="network-topology">
      <title>2.2 Network Topology</title>
      <para>
        The Katzenpost Mix Network uses a layered topology consisting of
        a fixed number of layers, each containing a set of mixes. At any
        given time each Mix MUST only be assigned to one specific layer.
        Each Mix in a given layer N is connected to every other Mix in
        the previous and next layer, and or every participating Provider
        in the case of the mixes in layer 0 or layer N (first and last
        layer). :
      </para>
      <programlisting>
Layer 0          Layer 1        Layer 2        Layer 3           Layer 4
+-----------+      +-------+      +-------+      +-------+      +-------------+
+-&gt; | entry mix | -+-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; | service mix |
|   +-----------+  |   +-------+  |   +-------+  |   +-------+  |   +-------------+
|                  |              |              |              |
|   +-----------+  |   +-------+  |   +-------+  |   +-------+  |   +-------------+
+-&gt; | entry mix | -+-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; | service mix |
|   +-----------+  |   +-------+  |   +-------+  |   +-------+  |   +-------------+
|                  |              |              |              |
|                  |   +-------+  |   +-------+  |   +-------+  |   +-------------+
|                  +-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; |  Mix  | -+-&gt; | service mix |
|                      +-------+      +-------+      +-------+  |   +-------------+
|                                                               |
+---------------------------------------------------------------+
</programlisting>
      <para>
        Note: Multiple distinct connections are collapsed in the figure
        for sake of brevity/clarity.
      </para>
      <para>
        The network topology MUST also maximize the number of security
        domains traversed by the packets. This can be achieved by not
        allowing mixes from the same security domain to be in different
        layers.
      </para>
      <para>
        Requirements for the topology:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Should allow for non-uniform throughput of each mix (Get
            bandwidth weights from the PKI).
          </para>
        </listitem>
        <listitem>
          <para>
            Should maximize distribution among security domains, in this
            case the mix descriptor specified family field would
            indicate the security domain or entity operating the mix.
          </para>
        </listitem>
        <listitem>
          <para>
            Other legal jurisdictional region awareness for increasing
            the cost of compulsion attacks.
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section xml:id="packet-format-overview">
    <title>3. Packet Format Overview</title>
    <para>
      For the packet format of the transported messages we use the
      Sphinx cryptographic packet format. The detailed description of
      the packet format, construction, processing and security /
      anonymity considerations see
      <link linkend="SPHINXSPEC">SPHINXSPEC</link>, <quote>The Sphinx
      Mix Network Cryptographic Packet Format Specification</quote>.
    </para>
    <para>
      As the Sphinx packet format is generic, the Katzenpost Mix Network
      must provide a concrete instantiation of the format, as well as
      additional Sphinx per-hop routing information commands.
    </para>
    <section xml:id="sphinx-cryptographic-primitives">
      <title>3.1 Sphinx Cryptographic Primitives</title>
      <para>
        For the current version of the Katzenpost Mix Network, let the
        following cryptographic primitives be used as described in the
        Sphinx specification.
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <literal>H(M)</literal> - As the output of this primitive is
            only used locally to a Mix, any suitable primitive may be
            used.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>MAC(K, M)</literal> - HMAC-SHA256
            <link linkend="RFC6234">RFC6234</link>, M_KEY_LENGTH of 32
            bytes (256 bits), and MAC_LENGTH of 32 bytes (256 bits).
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>KDF(SALT, IKM)</literal> - HKDF-SHA256, HKDF-Expand
            only, with SALT used as the info parameter.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>S(K, IV)</literal> - CTR-AES256
            <link linkend="SP80038A">[SP80038A]</link>, S_KEY_LENGTH of
            32 bytes (256 bits), and S_IV_LENGTH of 12 bytes (96 bits),
            using a 32 bit counter.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>SPRP_Encrypt(K, M)/SPRP_Decrypt(K, M)</literal> -
            AEZv5 <link linkend="AEZV5">AEZV5</link>, SPRP_KEY_LENGTH of
            48 bytes (384 bits). As there is a disconnect between AEZv5
            as specified and the Sphinx usage, let the following be the
            AEZv5 parameters:
          </para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>
                nonce - 16 bytes, reusing the per-hop Sphinx header IV.
              </para>
            </listitem>
            <listitem>
              <para>
                additional_data - Unused.
              </para>
            </listitem>
            <listitem>
              <para>
                tau - 0 bytes.
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
            <literal>EXP(X, Y)</literal> - X25519
            <link linkend="RFC7748">RFC7748</link> scalar multiply,
            GROUP_ELEMENT_LENGTH of 32 bytes (256 bits), G is the X25519
            base point.
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sphinx-packet-parameters">
      <title>3.2 Sphinx Packet Parameters</title>
      <para>
        The following parameters are used as for the Katzenpost Mix
        Network instantiation of the Sphinx Packet Format:
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <literal>AD_SIZE</literal> - 2 bytes.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>SECURITY_PARAMETER</literal> - 32 bytes. (except
            for our SPRP which we plan to upgrade)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>PER_HOP_RI_SIZE</literal> - (XXX/ya: Addition is
            hard, let's go shopping.)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>NODE_ID_SIZE</literal> - 32 bytes, the size of the
            Ed25519 public key, used as Node identifiers.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>RECIPIENT_ID_SIZE</literal> - 64 bytes, the maximum
            size of local-part component in an e-mail address.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>SURB_ID_SIZE</literal> - Single Use Reply Block ID
            size, 16 bytes.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>MAX_HOPS</literal> - 5, the ingress provider, a set
            of three mixes, and the egress provider.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>PAYLOAD_SIZE</literal> - (XXX/ya: Subtraction is
            hard, let's go shopping.)
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>KDF_INFO</literal> - The byte string
            <literal>Katzenpost-kdf-v0-hkdf-sha256</literal>.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        The Sphinx Packet Header <literal>additional_data</literal>
        field is specified as follows:
      </para>
      <programlisting>
struct {
    uint8_t version;  /* 0x00 */
    uint8_t reserved; /* 0x00 */
} KatzenpostAdditionalData;
</programlisting>
      <para>
        Double check to ensure that this causes the rest of the packet
        header to be 4 byte aligned, when wrapped in the wire protocol
        command and framing. This might need to have 3 bytes reserved
        instead.
      </para>
      <para>
        All nodes MUST reject Sphinx Packets that have
        <literal>additional_data</literal> that is not as specified in
        the header.
      </para>
      <para>
        Design decision.
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            We can eliminate a trial decryption step per packet around
            the epoch transitions by having a command that rewrites the
            AD on a per-hop basis and including an epoch identifier.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        I am uncertain as to if the additional complexity is worth it
        for a situation that can happen for a few minutes out of every
        epoch.
      </para>
    </section>
    <section xml:id="sphinx-per-hop-routing-information-extensions">
      <title>3.3 Sphinx Per-hop Routing Information Extensions</title>
      <para>
        The following extensions are added to the Sphinx Per-Hop Routing
        Information commands.
      </para>
      <para>
        Let the following additional routing commands be defined in the
        extension RoutingCommandType range (<literal>0x80</literal> -
        <literal>0xff</literal>):
      </para>
      <programlisting>
enum {
    mix_delay(0x80),
} KatzenpostCommandType;
</programlisting>
      <para>
        The mix_delay command structure is as follows:
      </para>
      <programlisting>
struct {
    uint32_t delay_ms;
} NodeDelayCommand;
</programlisting>
    </section>
  </section>
  <section xml:id="mix-node-operation">
    <title>4. Mix Node Operation</title>
    <para>
      All Mixes behave in the following manner:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Accept incoming connections from peers, and open persistent
          connections to peers as needed
          <literal>Section 4.1 &lt;4.1&gt;</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          Periodically interact with the PKI to publish Identity and
          Sphinx packet public keys, and to obtain information about the
          peers it should be communicating with, along with periodically
          rotating the Sphinx packet keys for forward secrecy
          <literal>Section 4.2 &lt;4.2&gt;</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          Process inbound Sphinx Packets, delay them for the specified
          time and forward them to the appropriate Mix and or Provider
          <literal>Section 4.3 &lt;4.3&gt;</literal>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      All Nodes are identified by their link protocol signing key, for
      the purpose of the Sphinx packet source routing hop identifier.
    </para>
    <para>
      All Nodes participating in the Mix Network MUST share a common
      view of time, via NTP or similar time synchronization mechanism.
    </para>
    <section xml:id="link-layer-connection-management">
      <title>4.1 Link Layer Connection Management</title>
      <para>
        All communication to and from participants in the Katzenpost Mix
        Network is done via the Katzenpost Mix Network Wire Protocol
        <link linkend="KATZMIXWIRE">KATZMIXWIRE</link>.
      </para>
      <para>
        Nodes are responsible for establishing the connection to the
        next hop, for example, a mix in layer 0 will accept inbound
        connections from all Providers listed in the PKI, and will
        proactively establish connections to each mix in layer 1.
      </para>
      <para>
        Nodes MAY accept inbound connections from unknown Nodes, but
        MUST not relay any traffic until they became known via listing
        in the PKI document, and MUST terminate the connection
        immediately if authentication fails for any other reason.
      </para>
      <para>
        Nodes MUST impose an exponential backoff when reconnecting if a
        link layer connection gets terminated, and the minimum retry
        interval MUST be no shorter than 5 seconds.
      </para>
      <para>
        Nodes MAY rate limit inbound connections as required to keep
        load and or resource use at a manageable level, but MUST be
        prepared to handle at least one persistent long lived connection
        per potentially eligible peer at all times.
      </para>
    </section>
    <section xml:id="sphinx-mix-and-provider-key-rotation">
      <title>4.2 Sphinx Mix and Provider Key Rotation</title>
      <para>
        Each Node MUST rotate the key pair used for Sphinx packet
        processing periodically for forward secrecy reasons and to keep
        the list of seen packet tags short. The Katzenpost Mix Network
        uses a fixed interval (<literal>epoch</literal>), so that key
        rotations happen simultaneously throughout the network, at
        predictable times.
      </para>
      <para>
        Let each epoch be exactly
        <literal>10800 seconds (3 hours)</literal> in duration, and the
        0th Epoch begin at <literal>2017-06-01 00:00 UTC</literal>. For
        more details see our <quote>Katzenpost Mix Network Public Key
        Infrastructure Specification</quote> document.
        <link linkend="KATZMIXPKI">KATZMIXPKI</link>
      </para>
    </section>
    <section xml:id="sphinx-packet-processing">
      <title>4.3 Sphinx Packet Processing</title>
      <para>
        The detailed processing of the Sphinx packet is described in the
        Sphinx specification: <quote>The Sphinx Mix Network
        Cryptographic Packet Format Specification</quote>. Below, we
        present an overview of the steps which the node is performing
        upon receiving the packet:
      </para>
      <orderedlist numeration="arabic" spacing="compact">
        <listitem>
          <para>
            Records the time of reception.
          </para>
        </listitem>
        <listitem>
          <para>
            Perform a <literal>Sphinx_Unwrap</literal> operation to
            authenticate and decrypt a packet, discarding it immediately
            if the operation fails.
          </para>
        </listitem>
        <listitem>
          <para>
            Apply replay detection to the packet, discarding replayed
            packets immediately.
          </para>
        </listitem>
        <listitem>
          <para>
            Act on the routing commands.
          </para>
        </listitem>
      </orderedlist>
      <para>
        All packets processed by Mixes MUST contain the following
        commands.
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <literal>NextNodeHopCommand</literal>, specifying the next
            Mix or Provider that the packet will be forwarded to.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>NodeDelayCommand</literal>, specifying the delay in
            milliseconds to be applied to the packet, prior to
            forwarding it to the Node specified by the
            NextNodeHopCommand, as measured from the time of reception.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Mixes MUST discard packets that have any commands other than a
        <literal>NextNodeHopCommand</literal> or a
        <literal>NodeDelayCommand</literal>. Note that this does not
        apply to Providers or Clients, which have additional commands
        related to recipient and
        <literal>SURB (Single Use Reply Block)</literal> processing.
      </para>
      <para>
        Nodes MUST continue to accept the previous epoch’s key for up to
        1MSL past the epoch transition, to tolerate latency and clock
        skew, and MUST start accepting the next epoch’s key 1MSL prior
        to the epoch transition where it becomes the current active key.
      </para>
      <para>
        Upon the final expiration of a key (1MSL past the epoch
        transition), Nodes MUST securely destroy the private component
        of the expired Sphinx packet processing key along with the
        backing store used to maintain replay information associated
        with the expired key.
      </para>
      <para>
        Nodes MAY discard packets at any time, for example to keep
        congestion and or load at a manageable level, however assuming
        the <literal>Sphinx_Unwrap</literal> operation was successful,
        the packet MUST be fed into the replay detection mechanism.
      </para>
      <para>
        Nodes MUST ensure that the time a packet is forwarded to the
        next Node is around the time of reception plus the delay
        specified in <literal>NodeDelayCommand</literal>. Since exact
        millisecond processing is unpractical, implementations MAY
        tolerate a small window around that time for packets to be
        forwarded. That tolerance window SHOULD be kept minimal.
      </para>
      <para>
        Nodes MUST discard packets that have been delayed for
        significantly more time than specified by the
        <literal>NodeDelayCommand</literal>.
      </para>
    </section>
  </section>
  <section xml:id="anonymity-considerations">
    <title>5. Anonymity Considerations</title>
    <section xml:id="topology">
      <title>5.1 Topology</title>
      <para>
        Layered topology is used because it offers the best level of
        anonymity and ease of analysis, while being flexible enough to
        scale up traffic. Whereas most mixnet papers discuss their
        security properties in the context of a cascade topology, which
        does not scale well, or a free-route network, which quickly
        becomes intractable to analyze when the network grows, while
        providing slightly worse anonymity than a layered topology.
        <link linkend="MIXTOPO10">MIXTOPO10</link>
      </para>
      <para>
        Important considerations when assigning mixes to layers, in
        order of decreasing importance, are:
      </para>
      <orderedlist numeration="arabic" spacing="compact">
        <listitem>
          <para>
            Security: do not allow mixes from one security domain to be
            in different layers to maximise the number of security
            domains traversed by a packet
          </para>
        </listitem>
        <listitem>
          <para>
            Performance: arrange mixes in layers to maximise the
            capacity of the layer with the lowest capacity (the
            bottleneck layer)
          </para>
        </listitem>
        <listitem>
          <para>
            Security: arrange mixes in layers to maximise the number of
            jurisdictions traversed by a packet (this is harder to do
            really well than it seems, requires understanding of legal
            agreements such as MLATs).
          </para>
        </listitem>
      </orderedlist>
    </section>
    <section xml:id="mixing-strategy">
      <title>5.2 Mixing strategy</title>
      <para>
        As a mixing technique the Poisson mix strategy
        <link linkend="LOOPIX">LOOPIX</link> and
        <link linkend="KESDOGAN98">KESDOGAN98</link> is used, which
        REQUIRES that a packet at each hop in the route is delayed by
        some amount of time, randomly selected by the sender from an
        exponential distribution. This strategy allows to prevent the
        timing correlation of the incoming and outgoing traffic from
        each node. Additionally, the parameters of the distribution used
        for generating the delay can be tuned up and down depending on
        the amount of traffic in the network and the application for
        which the system is deployed.
      </para>
    </section>
  </section>
  <section xml:id="security-considerations">
    <title>6. Security Considerations</title>
    <para>
      The source of all authority in the mixnet system comes from the
      Directory Authority system which is also known as the mixnet PKI.
      This system gives the mixes and clients a consistent view of the
      network while allowing human intervention when needed. All public
      mix key material and network connection information is distributed
      by this Directory Authority system.
    </para>
  </section>
  <section xml:id="appendix-a.-references">
    <title>Appendix A. References</title>
    <section xml:id="appendix-a.1-normative-references">
      <title>Appendix A.1 Normative References</title>
      <para>
      </para>
    </section>
    <section xml:id="appendix-a.2-informative-references">
      <title>Appendix A.2 Informative References</title>
      <para>
      </para>
    </section>
  </section>
  <section xml:id="appendix-b.-citing-this-document">
    <title>Appendix B. Citing This Document</title>
    <section xml:id="appendix-b.1-bibtex-entry">
      <title>Appendix B.1 Bibtex Entry</title>
      <para>
        Note that the following bibtex entry is in the IEEEtran bibtex
        style as described in a document called <quote>How to Use the
        IEEEtran BIBTEX Style</quote>.
      </para>
      <programlisting>
@online{KatzMixnet,
title = {Katzenpost Mix Network Specification},
author = {Yawning Angel and George Danezis and Claudia Diaz and Ania Piotrowska and David Stainton},
url = {https://github.com/katzenpost/katzenpost/blob/main/docs/specs/mixnet.rst},
year = {2017}
}
</programlisting>
      <para>
        <emphasis role="strong">AEZV5</emphasis>
      </para>
      <programlisting>
Hoang, V., Krovetz, T., Rogaway, P.,
&quot;AEZ v5: Authenticated Encryption by Enciphering&quot;,
March 2017,
http://web.cs.ucdavis.edu/~rogaway/aez/aez.pdf
</programlisting>
      <para>
        <emphasis role="strong">KATZMIXE2E</emphasis>
      </para>
      <programlisting>
Angel, Y., Danezis, G., Diaz, C., Piotrowska, A., Stainton, D.,
&quot;Katzenpost Mix Network End-to-end Protocol Specification&quot;, 
July 2017,
https://github.com/katzenpost/katzenpost/blob/main/docs/specs/old/end_to_end.md
</programlisting>
      <para>
        <emphasis role="strong">KATZMIXPKI</emphasis>
      </para>
      <programlisting>
Angel, Y., Piotrowska, A., Stainton, D.,
&quot;Katzenpost Mix Network Public Key Infrastructure Specification&quot;,
December 2017,
https://github.com/katzenpost/katzenpost/blob/master/docs/specs/pki.md
</programlisting>
      <para>
        <emphasis role="strong">KATZMIXWIRE</emphasis>
      </para>
      <programlisting>
Angel, Y., 
&quot;Katzenpost Mix Network Wire Protocol Specification&quot;,
June 2017.
https://github.com/katzenpost/katzenpost/blob/master/docs/specs/wire-protocol.md
</programlisting>
      <para>
        <emphasis role="strong">KESDOGAN98</emphasis>
      </para>
      <programlisting>
Kesdogan, D., Egner, J., and Büschkes, R.,
&quot;Stop-and-Go-MIXes Providing Probabilistic Anonymity in an Open System.&quot;
Information Hiding, 1998,
https://www.freehaven.net/anonbib/cache/stop-and-go.pdf
</programlisting>
      <para>
        <emphasis role="strong">LOOPIX</emphasis>
      </para>
      <programlisting>
Piotrowska, A., Hayes, J., Elahi, T., Meiser, S., Danezis, G.,
&quot;The Loopix Anonymity System&quot;,
USENIX, August, 2017
https://arxiv.org/pdf/1703.00536.pdf
</programlisting>
      <para>
        <emphasis role="strong">MIXTOPO10</emphasis>
      </para>
      <programlisting>
Diaz, C., Murdoch, S., Troncoso, C.,
&quot;Impact of Network Topology on Anonymity and Overhead in Low-Latency Anonymity Networks&quot;,
PETS, July 2010,
https://www.esat.kuleuven.be/cosic/publications/article-1230.pdf
</programlisting>
      <para>
        <emphasis role="strong">RFC2119</emphasis>
      </para>
      <programlisting>
Bradner, S.,
&quot;Key words for use in RFCs to Indicate Requirement Levels&quot;,
BCP 14, RFC 2119, DOI 10.17487/RFC2119,
March 1997,
http://www.rfc-editor.org/info/rfc2119
</programlisting>
      <para>
        <emphasis role="strong">RFC5246</emphasis>
      </para>
      <programlisting>
Dierks, T. and E. Rescorla,
&quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;,
RFC 5246, DOI 10.17487/RFC5246,
August 2008,
https://www.rfc-editor.org/info/rfc5246
</programlisting>
      <para>
        <emphasis role="strong">RFC6234</emphasis>
      </para>
      <programlisting>
Eastlake 3rd, D. and T. Hansen,
&quot;US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF)\&quot;
RFC 6234, DOI 10.17487/RFC6234,
May 2011,
https://www.rfc-editor.org/info/rfc6234
</programlisting>
      <para>
        <emphasis role="strong">RFC7748</emphasis>
      </para>
      <programlisting>
Langley, A., Hamburg, M., and S. Turner,
&quot;Elliptic Curves for Security&quot;, 
RFC 7748,
January 2016.
</programlisting>
      <para>
        <emphasis role="strong">SP80038A</emphasis>
      </para>
      <programlisting>
Dworkin, M.,
&quot;Recommendation for Block Cipher Modes of Operation&quot;,
SP800-38A, 10.6028/NIST.SP.800,
December 2001,
https://doi.org/10.6028/NIST.SP.800-38A
</programlisting>
      <para>
        <emphasis role="strong">SPHINXSPEC</emphasis>
      </para>
      <programlisting>
Angel, Y., Danezis, G., Diaz, C., Piotrowska, A., Stainton, D.,
&quot;Sphinx Mix Network Cryptographic Packet Format Specification&quot;
July 2017,
https://github.com/katzenpost/katzenpost/blob/master/docs/specs/sphinx.md
</programlisting>
    </section>
  </section>
</article>
