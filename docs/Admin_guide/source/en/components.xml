<!--<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.2/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.2/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
-->

<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>

<!--A DOCTYPE declaration declaring a DTD is not need for DocBook 5.x, which uses RelaxNG and  Schematron instead. It is used here as a container for entity declarations.-->

<!DOCTYPE chapter 
[
    <!ENTITY % shared-content SYSTEM "shared-content.ent">
    %shared-content;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.1" xml:id="components">
    <title xml:id="components.title">Components of the &program_name; mixnet</title>

    <!--
        
    AWS model for APIs:
    
    [Definition] 
    
    Type: String
    
    Length Constraints: Maximum length of 256.
    
    Pattern: ^[A-Za-z0-9+/=]+$
    
    Required: No
    
    -->
    <section xml:id="auth">
        <title xml:id="auth.title">Directory authorities</title>

		<para>Directory authorities, or <emphasis>dirauths</emphasis>, are nodes in &program_name;'s
            decentralized public key infrastructure (PKI), which forms the security root of the
            entire &program_name; system. Clients and mixnet nodes rely on the PKI to maintain and
            sign an up-to-date <emphasis>consensus</emphasis> document, providing a view of the
            entire network including connection information and public cryptographic key materials
            and signatures. </para>
        <para>Every 20 minutes (the current value for an <emphasis>epoch</emphasis>), each mix node
            signs a descriptor and uploads it to the dirauth nodes. The dirauths then vote on a new
            consensus document. If consensus is reached, each dirauth signs the document. Clients
            and nodes download the document as needed and verify the signatures. Consensus fails
            when 1/2 + 1 nodes fail, which yields greater fault tolerance than, for example,
            Byzantine Fault Tolerance, which fails when 1/3 + 1 of the nodes fail.</para>
		<para>The PKI signature scheme is fully configurable by the dirauth nodes. Our recommendation is
            to use a hybrid signature scheme consisting of the classical Ed25519 and the
            post-quantum, stateless, hash-based signature scheme known as Sphincs+ (with the
            parameters: "sphincs-shake-256f"), which is designated in &program_name; configurations
            as "Ed25519 Sphincs+". Examples are provided below.</para>        

        <section xml:id="auth-config">
            <title xml:id="auth-config.title">Configuring directory authorities</title>
            <para>The following configuration is drawn from the reference implementation in
                    <filename>katzenpost/docker/voting_mixnet/auth1/authority.toml</filename>. In a
                real-world mixnet, the component hosts would not be sharing a single IP address. For
                more information about the test mixnet, see <link linkend="container"
                    endterm="container.title">Using the &program_name; test network</link>.</para>
<!--General TOML note:

https://toml.io/en/v1.0.0

Array of Tables

The last syntax that has not yet been described allows writing arrays of tables. These can be expressed by using a header with a name in double brackets. The first instance of that header defines the array and its first table element, and each subsequent instance creates and defines a new table element in that array. The tables are inserted into the array in the order encountered.

So single brackets define a "table". Double brackets define an array of "tables". AND the initial double-bracket block serves as both an array definition and an element of the array it created. 

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                
https://github.com/katzenpost/katzenpost/blob/c255fbbf421d5d9820553c18dc5dc6c9881ad547/authority/voting/server/config/config.go#L475

// Config is the top level authority configuration.
type Config struct {
	Server      *Server
	Authorities []*Authority
	Logging     *Logging
	Parameters  *Parameters
	Debug       *Debug

	Mixes        []*Node
	GatewayNodes []*Node
	ServiceNodes []*Node
	Topology     *Topology

	SphinxGeometry *geo.Geometry
}
            
-->
            <section xml:id="auth-server-section-config">
                <title xml:id="auth-server-section-config.title">Server section</title>
                <!--https://github.com/katzenpost/katzenpost/blob/c255fbbf421d5d9820553c18dc5dc6c9881ad547/authority/voting/server/config/config.go#L415-->
                <para/>
                <programlisting>[Server]
    Identifier = "auth1"
    WireKEMScheme = "xwing"
    PKISignatureScheme = "Ed25519 Sphincs+"
    Addresses = ["tcp://127.0.0.1:30001"]
    DataDir = "/voting_mixnet/auth1"</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>Identifier is the human-readable identifier for a node, and should be unique per mixnet. It can be an FQDN but does not have to be.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">WireKEMScheme</emphasis></para>
                        <para>WireKEMScheme specifies the wire protocol KEM scheme to use. This is
                            another configuration point where it's possible to use post-quantum
                            cryptography to strengthen security. In this case the "Wire" protocol
                            refers to our PQ Noise based protocol which is how all the dir auth
                            nodes talk to one another. PQ Noise is a variation of the Noise protocol
                            framework where the handshake patterns are algebraically transformed to
                            replace ECDH operations with KEM encapsulate/decapsulate
                            operations.</para>
                        <para>The following KEM schemes are supported: "x25519",
                            "x448", "mlkem768", "sntrup4591761", "frodo640shake", "mceliece348864",
                            "mceliece348864f", "mceliece460896", "mceliece460896f",
                            "mceliece6688128", "mceliece6688128f", "mceliece6960119",
                            "mceliece6960119f", "mceliece8192128", "mceliece8192128f", "xwing",
                            "Kyber768-X25519", "MLKEM768-X25519", "MLKEM768-X448", "CTIDH511",
                            "CTIDH512", "CTIDH1024", "CTIDH2048", "CTIDH512-X25519",
                            "CTIDH512-X25519" </para>						
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">PKISignatureScheme</emphasis></para>
                        <para>PKISignatureScheme specifies the cryptographic signature scheme which will be used by all components of the mix network
                        when interacting with the PKI system. Mix nodes will sign their descriptors using this signature scheme. Likewise PKI documents
                        will be signed by the dir auth nodes using this signature scheme.</para>
                        <para>The following signature schemes are supported: "ed25519", "ed448", "Ed25519 Sphincs+",
                            "Ed448-Sphincs+", "Ed25519-Dilithium2", "Ed448-Dilithium3" </para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Addresses</emphasis></para>
                        <para>Addresses specifies a list of one or more Address URLs in a format
                            that contains the transport protocol, IP address and port number that
                            the server will bind to for incoming connections. Currently
                            &program_name; supports URLs with that start with either "tcp://" or
                            "quic://" such as: ["tcp://192.168.1.1:30001"] and
                            ["quic://192.168.1.1:40001"] </para>
                        <para>Type: []string</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">DataDir</emphasis></para>
                        <para>DataDir is the absolute path to the directory authority server's state directory where the persistence.db will be written to disk AND
                        where the server's cryptographic key materials will be written to disk when started with the "-g" commmandline option.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                </itemizedlist>
                <para/>
            </section>
            <section xml:id="auth-authorities-section-config">
                <title xml:id="auth-authorities-section-config.title">Authorities section</title>
                <!--https://github.com/katzenpost/katzenpost/blob/c255fbbf421d5d9820553c18dc5dc6c9881ad547/authority/voting/server/config/config.go#L266-->
                <para>An Authorities section is configured for each peer authority. We recommend using TOML's muli-line quotes for key materials.</para>
                <programlisting>[[Authorities]]
    Identifier = "auth1"
    IdentityPublicKey = """
-----BEGIN ED25519 PUBLIC KEY-----
dYpXpbozjFfqhR45ZC2q97SOOsXMANdHaEdXrP42CJk=
-----END ED25519 PUBLIC KEY-----
"""
    PKISignatureScheme = "Ed25519"
    LinkPublicKey = """
-----BEGIN XWING PUBLIC KEY-----
ooQBPYNdmfwnxXmvnljPA2mG5gWgurfHhbY87DMRY2tbMeZpinJ5BlSiIecprnmm
QqxcS9o36IS62SVMlOUkw+XEZGVvc9wJqHpgEgVJRAs1PCR8cUAdM6QIYLWt/lkf
SPKDCtZ3GiSIOzMuaglo2tarIPEv1AY7r9B0xXOgSKMkGyBkCfw1VBZf46MM26NL
opKx+rAKBzjKBJgGg9AHt9rNQsBbCVFBO+KKbpHHXFCBztK1Hhei3LeeYxcqL4bC
Rzi2kfBvQLPNzIuHOktKX7m39CxMByMNm4qL6dSVbtZaMOenpUlsIHOR5vyF2bgX
syRS3WnPRaIOarkMXUwJpzasNzuPUSAmJyaAQVwgrTSJyXp91usF6wBHKApqlDVY
dldqH7O90EI1tYNiOYpBCgwGBIK+xOkjoVNY91B/PVbA5ngcXgt8xQp02WXF1lVN
+ixu2XF8ndJXtLmlTIMUb0YwHsEo9UqdN7yLMPqcVScqR+ZKyCpaIPS+dpF20AAu
fvVVlxKVLqonUkJLCMgR/4morUOXVHwRgkKr0mIuw9RTWwSlSGxasFiVFZM5p6kS
ElIgPlCX94xV52BjcerPQ1R2TJdlVdWgLUAO7UNhyETCGrdxjxZSYmxNjfsOLHk7
qFNNDhUqHBjJmYOSDis0qHNXW8oZ9SF6pFN9NlctH8Uq10c/fNltykEbTkgLdMJP
phWWVQWD1YIU+/ktO5ZNVIVK/CHOqdc41+mRyxh/OmbEWMaaicuijLNR3KV9QoHG
9JWw9RtrPeE+jbgUX0g0asFf0nibfWqdV5QfAfwV/shYuIJR4nZMb6B4R9t8wYd0
gCSZg1M7gJW1J5B17cPM6+OCz2JaYhgAHfvJhSYK3zGzWWvGWvKTJrSTjiIhX8wM
H/KiX5U8+nkWPDiu/nqyRVej8/ELYvg7T2R7tKJzB0Gr5GUFd3B1TzvAcIRBl+yd
9ma5tRE44cu1yONuc1N8ITp8xqezSjwdavoMeuphryd6xbacZCVCcnM2R5mGOAhI
xzQWA5teHxoBTnliRQq1HriKX8N8Ogq3GPYu0Lue+MwEkkRkxSJdNpSLE/yzOQkf
DrlBbbURIfe1T6aeA1SuXeacTzqd6lfPWvjCgXMYriwhAazKwgS+WwcXd5RKbWEN
PIISgRavtoahEdOVSJJbVMUYptA3+CcY9eEi/rWOc1RgTWGNtWW0FYnFyiq6UdPM
NiO/z7S9uJJI/2wWMlJi+OoTx9cf3mjIMOPLkzEOhpVRhCZvcSvFIoF6ItcETnda
HmmOFwFg2reqlPioBORUufk7zdhs0MuuMYlaG+E0OqxTOKiZg0qbgMZqtOlsXkp8
QdY8R/W4ePiVAI2iZnMzEqMl3LLEDlRdMOkBYzOkR2GSvpYv6tetgoNAu8vFkpc6
Rma3y7KnihWaYhwEFbEqV2kD2GO9cMV+AcFvuCE9dVGVSatdxsSNX6ZXaFGlmHCp
gHtNyQJnXski52O03JpZRIhR40pFOhAAcMMAZDpMTVoxlcdR6WA4SlBiSceeJBgY
Yp9PlGhCimx9am99TrdLoLCdTHB6oowt8tss3POpIOxaSlguyeym/sBhkUrnXOgN
ldMtDsvvc9KUfE4I0+c+XQ==
-----END XWING PUBLIC KEY-----
    """
    WireKEMScheme = "xwing"
    Addresses = ["tcp://127.0.0.1:30001"]
</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>Identifier is the human readable identifier for the node which should be unique per mixnet. It can be an FQDN but certainly doesn't have to be.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">IdentityPublicKey</emphasis></para>
                        <para>String in PEM format containing the public identity key. The node's public identity key is
                        the node's permanent identifier and is used to verify cryptographic signatures produce by node's private identity key.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">PKISignatureScheme</emphasis></para>
                        <para>PKISignatureScheme specifies the cryptographic signature scheme used by all of the directory authority nodes.
                        	  This PKISignatureScheme must match the scheme specified in the Server section of the configuration.
                        </para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LinkPublicKey</emphasis></para>
                        <para>LinkPublicKeyPem is string containing the PEM format of the peer's
                            public link layer key. The &program_name; "link layer" protocol is the
                            PQ Noise based protocol which is sometimes also referred to as the "wire
                            protocol". The type of this link public key must match the specified
                            WireKEMScheme. Our wire protocol is used to secure the transport between
                            nodes only and in this case it's used between directory authority nodes
                            when they communicate with each other for the voting rounds and it's
                            also the protocol that clients use to retrieve published PKI documents
                            from the dir auth nodes.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                    
                    <!--WireKEMScheme …the  link layer-->
                    
                    <listitem>
                        <para><emphasis role="bold">WireKEMScheme</emphasis></para>
                        <para>WireKEMScheme specifies the key encapsulation mechanism (KEM) scheme
                            for the <link xlink:href="https://eprint.iacr.org/2022/539">PQ
                                Noise</link>-based wire protocol (link layer) that dirauth nodes use
                            to communicate with each other. PQ Noise is a post-quantum variation of
                            the <link xlink:href="https://noiseprotocol.org/">Noise protocol
                                framework</link>, which algebraically transforms ECDH handshake
                            patterns into KEM encapsulate/decapsulate operations.</para>
                            
                            <para>This configuration option supports the optional use of
                            post-quantum cryptography to strengthen security. The following KEM
                            schemes are supported: <itemizedlist>
                                <listitem>
                                    <para><emphasis role="bold">Classical:</emphasis> "x25519",
                                        "x448"</para>
                                </listitem>
                            </itemizedlist><itemizedlist>
                                <listitem>
                                    <para><emphasis role="bold"> Post-quantum:</emphasis>
                                        "mlkem768", "sntrup4591761", "frodo640shake",
                                        "mceliece348864", "mceliece348864f", "mceliece460896",
                                        "mceliece460896f", "mceliece6688128", "mceliece6688128f",
                                        "mceliece6960119", "mceliece6960119f", "mceliece8192128",
                                        "mceliece8192128f", "xwing", "Kyber768-X25519",
                                        "MLKEM768-X25519", "MLKEM768-X448", "CTIDH511", "CTIDH512",
                                        "CTIDH1024", "CTIDH2048", "CTIDH512-X25519",
                                        "CTIDH512-X25519"</para>
                                </listitem>
                            </itemizedlist></para>						
                        <para>Type: string</para>
                        <para>Required: Yes</para>                    
                    </listitem>
                    
                    
                    
                    <listitem>
                        <para><emphasis role="bold">Addresses</emphasis></para>
                        <para>Addresses specifies a list of one or more Address URLs in a format
                            that contains the transport protocol, IP address and port number that
                            the server will bind to for incoming connections. Currently
                            &program_name; supports URLs with that start with either "tcp://" or
                            "quic://" such as: ["tcp://192.168.1.1:30001"] and
                            ["quic://192.168.1.1:40001"] </para>
                        <para>Type: []string</para>
                        <para>Required:</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-logging">
                <title xml:id="auth-logging.title">Logging section</title>
                    &logging;
            </section>
            <section xml:id="auth-parameters">
                <title xml:id="auth-parameters.title">Parameters section</title>
                <!--https://github.com/katzenpost/katzenpost/blob/c255fbbf421d5d9820553c18dc5dc6c9881ad547/authority/voting/server/config/config.go#L103
-->
                <para>The Parameters section holds the network parameters, for example:</para>
                <programlisting>[Parameters]
    SendRatePerMinute = 0
    Mu = 0.005
    MuMaxDelay = 1000
    LambdaP = 0.001
    LambdaPMaxDelay = 1000
    LambdaL = 0.0005
    LambdaLMaxDelay = 1000
    LambdaD = 0.0005
    LambdaDMaxDelay = 3000
    LambdaM = 0.0005
    LambdaG = 0.0
    LambdaMMaxDelay = 100
    LambdaGMaxDelay = 100</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">SendRatePerMinute</emphasis></para>
                        <para>
                            SendRatePerMinute is the maximum allowed rate of packets per
                            client per gateway node. Rate limiting is done on the gateway nodes.</para>
                        <para>SendRatePerMinute is the rate per minute.</para>
                        <para>Type: uint64</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Mu</emphasis></para>
                        <para>Mu is the inverse of the mean of the exponential distribution that the Sphinx
                            packet per-hop mixing delay will be sampled from.
                        	Mu is the inverse of the mean of the exponential
                            distribution that is used to select the delay for each hop.</para>
                        <para>Type: float64</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">MuMaxDelay</emphasis></para>
                        <para>MuMaxDelay is the maximum Sphinx packet per-hop mixing delay in
                            milliseconds. MuMaxDelay sets the maximum delay for Mu.</para>
                        <para>Type:
                            uint64<?oxy_custom_start type="oxy_content_highlight" color="235,192,230"?></para>
                        <para>Required:</para>
                    </listitem><?oxy_custom_end?>
                    <listitem>
                        <para><emphasis role="bold">LambdaP</emphasis></para>
                        <para>LambdaP is the inverse of the mean of the exponential distribution that
                            clients will sample to determine the time interval between sending
                            messages from it's FIFO egress queue or drop decoy messages if the queue
                            is empty. LambdaP is the inverse of the mean of the exponential
                            distribution that is used to select the delay between clients sending from
                            their egress FIFO queue or drop decoy message.</para>
                        <para>Type: float64</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaPMaxDelay</emphasis></para>
                        <para>LambdaPMaxDelay is the maximum send interval for LambdaP in
                            milliseconds</para>
                        <para>LambdaPMaxDelay sets the maximum delay for LambdaP.</para>
                        <para>Type: uint64</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaL</emphasis></para>
                        <para>LambdaL is the inverse of the mean of the exponential distribution
                            that is used to select the delay between clients sending loop
                            decoys.</para>
                        <para>Type: float64</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaLMaxDelay</emphasis></para>
                        <para><?oxy_custom_start type="oxy_content_highlight" color="235,192,230"?>
                            sets the maximum send interval for LambdaL in milliseconds.</para>
                        <para><?oxy_custom_end?>LambdaLMaxDelay sets the maximum delay for
                            LambdaP.</para>
                        <?oxy_custom_start type="oxy_content_highlight" color="235,192,230"?>
                        <para><?oxy_custom_end?>Type: uint64</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaD</emphasis></para>
                        <para>LambdaD is the inverse of the mean of the exponential distribution that clients
                            will sample to determine the time interval between sending decoy drop
                            messages. LambdaD is the inverse of the mean of the exponential
                            distribution that is used to select the delay between clients sending deop
                            decoys.</para>
                        <para>Type: float64</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaDMaxDelay</emphasis></para>
                        <para>LambdaDMaxDelay is the maximum send interval in milliseconds.
                        LambdaDMaxDelay sets the maximum delay for LambdaP.</para>
                        <para>Type: uint64</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaM</emphasis></para>
                        <para>LambdaM is the inverse of the mean of the exponential distribution that mixes will
                            sample to determine send timing of mix loop decoy
                            traffic. LambdaM is the inverse of the mean of the exponential
                            distribution that is used to select the delay between sending mix node
                            decoys.</para>
                        <para>Type: float64</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaG</emphasis></para>
                        <para>LambdaG is the inverse of the mean of the exponential
                            distribution that is used to select the delay between sending gateway node
                            decoys. WARNING: DO NOT SET THIS VALUE. This is not used via the TOML config file; this field is
                            used internally by the dirauth server state machine.</para>
                        <para>Type: float64</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaMMaxDelay</emphasis></para>
                        <para>LambdaMMaxDelay sets the maximum delay for LambdaM
                        LambdaMMaxDelay sets the maximum delay for LambdaP.</para>
                        <para>Type: uint64</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">LambdaGMaxDelay</emphasis></para>
                        <para>LambdaGMaxDelay sets the maximum delay for LambdaG.</para>
                        <para>Type: uint64</para>
                        <para>Required:</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-debug">
                <title xml:id="auth-debug.title">Debug section</title>
                <!--https://github.com/katzenpost/katzenpost/blob/c255fbbf421d5d9820553c18dc5dc6c9881ad547/authority/voting/server/config/config.go#L235-->
                <para/>
                <programlisting>[Debug]
    Layers = 3
    MinNodesPerLayer = 1
    GenerateOnly = false</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Layers</emphasis></para>
                        <para> Number of
                            <?oxy_custom_start type="oxy_content_highlight" color="235,192,230"?>non-provider<?oxy_custom_end?>
                            layers in the network topology.</para>
                        <para>Type: int</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">MinNodesrPerLayer</emphasis></para>
                        <para> Minimum number of nodes per layer required to form a valid
                            <?oxy_custom_start type="oxy_content_highlight" color="235,192,230"?>document<?oxy_custom_end?>.</para>
                        <para>Type: int</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">GenerateOnly</emphasis></para>
                        <para>If set to true, the server halts and cleans up the data directory
                            immediately after long-term key generation.</para>
                        <para>Type: bool</para>
                        <para>Required:</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-mixes-section-config">
                <title xml:id="auth-mixes-section-config.title">Mixes sections</title>
                <!--https://github.com/katzenpost/katzenpost/blob/c255fbbf421d5d9820553c18dc5dc6c9881ad547/authority/voting/server/config/config.go#L383-->
                <para><?oxy_comment_start author="dwrob" timestamp="20240814T111809-0700" comment="These definitions differ significantly from the code comments."?>The
                    Mixes configuration section lists mix nodes that are known to the
                    authority.</para><?oxy_comment_end?>
                <programlisting>[[Mixes]]
    Identifier = "mix1"
    IdentityPublicKeyPem = "../mix1/identity.public.pem"

[[Mixes]]
    Identifier = "mix2"
    IdentityPublicKeyPem = "../mix2/identity.public.pem"

[[Mixes]]
    Identifier = "mix3"
    IdentityPublicKeyPem = "../mix3/identity.public.pem"<?oxy_custom_start type="oxy_content_highlight" color="235,192,230"?></programlisting><?oxy_custom_end?>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>A human readable mix node identifier.</para>
                        <para>Type:
                            string<?oxy_custom_start type="oxy_content_highlight" color="235,192,230"?></para>
                        <para>Required:</para>
                    </listitem><?oxy_custom_end?>
                    <listitem>
                        <para><emphasis role="bold">IdentityPublicKeyPem</emphasis></para>
                        <para>Path and file name of a mix node's public identity signing key, also
                            known as the identity key, in PEM format.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-gatewaynodes-section-config">
                <title xml:id="auth-gatewaynodes-section-config.title">GatewayNodes sections</title>
                <?oxy_comment_start author="dwrob" timestamp="20240814T111809-0700" comment="These definitions differ significantly from the code comments."?>
                <para>The GatewayNodes configuration section lists gateway nodes that are known to
                    the authority.</para><?oxy_comment_end?>
                <programlisting>[[GatewayNodes]]
    Identifier = "gateway1"
    IdentityPublicKeyPem = "../gateway1/identity.public.pem"</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>A human readable gateway node identifier.</para>
                        <para>Type:
                            string<?oxy_custom_start type="oxy_content_highlight" color="235,192,230"?></para>
                        <para>Required:</para>
                    </listitem><?oxy_custom_end?>
                    <listitem>
                        <para><emphasis role="bold">IdentityPublicKeyPem</emphasis></para>
                        <para>Path and file name of a gateway node's public identity signing key, also
                            known as the identity key, in PEM format.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-servicenodes-section-config">
                <title xml:id="auth-servicenodes-section-config.title">ServiceNodes sections</title>
                <?oxy_comment_start author="dwrob" timestamp="20240814T111809-0700" comment="These definitions differ significantly from the code comments."?>
                <para>The ServiceNodes configuration section lists service nodes that are known to
                    the authority.</para><?oxy_comment_end?>
                <programlisting>[[ServiceNodes]]
    Identifier = "servicenode1"
    IdentityPublicKeyPem = "../servicenode1/identity.public.pem"</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>A human readable service node identifier.</para>
                        <para>Type:
                            string<?oxy_custom_start type="oxy_content_highlight" color="235,192,230"?></para>
                        <para>Required:</para>
                    </listitem><?oxy_custom_end?>
                    <listitem>
                        <para><emphasis role="bold">IdentityPublicKeyPem</emphasis></para>
                        <para>Path and file name of a service node's public identity signing key, also
                            known as the identity key, in PEM format.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="auth-topology">
                <title xml:id="auth-topology.title">Topology section</title>
                <para>The Topology configuration section defines the layers of the mix network and
                    the mix nodes in each layer.</para>
                <programlisting>[Topology]
                    
    [[Topology.Layers]]
    
        [[Topology.Layers.Nodes]]
            Identifier = "mix1"
            IdentityPublicKeyPem = "../mix1/identity.public.pem"
    
    [[Topology.Layers]]
    
        [[Topology.Layers.Nodes]]
            Identifier = "mix2"
            IdentityPublicKeyPem = "../mix2/identity.public.pem"
    
    [[Topology.Layers]]
    
        [[Topology.Layers.Nodes]]
            Identifier = "mix3"
            IdentityPublicKeyPem = "../mix3/identity.public.pem"</programlisting>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Identifier</emphasis></para>
                        <para>A human readable mix node identifier.</para>
                        <para>Type:
                            string<?oxy_custom_start type="oxy_content_highlight" color="235,192,230"?></para>
                    </listitem><?oxy_custom_end?>
                    <listitem>
                        <para><emphasis role="bold">IdentityPublicKeyPem</emphasis></para>
                        <para>Path and file name of a mix node's public identity signing key, also
                            known as the identity key, in PEM format.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                </itemizedlist>
            </section>
            
            
            <section xml:id="auth-sphinx-config">
                <title xml:id="auth-sphinx-config.title">SphinxGeometry section</title>
                <para>WARNING: The Sphinx Geometry section of the configuration MUST be programmatically generated.
                Do NOT modify the geometry by hand.
                </para>
                <para>The original Sphinx paper introduces the Sphinx nested encrypted packet format
                    using a NIKE (NIKE: non-interactive key exchange). NIKE Sphinx can be a hybrid
                    post quantum construction simply by using a hybrid NIKE. Our Sphinx
                    implementation also can optionally use a KEM (KEM: key encapsulation mechanism)
                    instead of a NIKE, however the trade-off is that the packet's header will take
                    up a lot of overhead because it must store a KEM ciphertext for each hop.
                    &program_name; has a completely configurable Sphinx geometry which allows for
                    any KEM or NIKE to be used. </para>
                <para> The Sphinx cryptographic packet format also uses these additional
                    cryptographic primitives, the current &program_name; selection is: </para>
                <itemizedlist>                
                    <listitem>
                        <para>stream cipher: CTR-AES256</para>
                    </listitem>
                    <listitem>
                        <para>MAC: HMAC-SHA256</para>
                    </listitem>
                    <listitem>
                        <para>KDF: HKDF-SHA256</para>
                    </listitem>
                    <listitem>
                        <para>SPRP: AEZv5</para>
                    </listitem>                    
                </itemizedlist>
                    
				<para> In &program_name; the dirauths select the Sphinx geometry, each dirauth must agree with
                    the other dirauths. They publish the hash of the Sphinx Geometry in the PKI
                    document so that the rest of the network entities can validate their Sphinx
                    Geometry. </para>
                &sphinxgeometry;
            </section>
            
            
            
        </section>
    </section>
    <section xml:id="server">
        <title xml:id="server.title">Mix, gateway, and service nodes</title>
        
<!--
            https://github.com/katzenpost/katzenpost/blob/c255fbbf421d5d9820553c18dc5dc6c9881ad547/server/config/config.go    
        
        // Config is the top level Katzenpost server configuration.
        type Config struct {
        Server         *Server
        Logging        *Logging
        ServiceNode    *ServiceNode
        Gateway        *Gateway
        PKI            *PKI
        Management     *Management
        SphinxGeometry *geo.Geometry
        Debug *Debug
        }        
        
-->
        
        

        <section xml:id="mix-config">
            <title xml:id="mix-config.title">Configuring mix nodes</title>
            <para>The following configuration is drawn from the reference implementation in
                    <filename>katzenpost/docker/voting_mixnet/mix1/katzenpost.toml</filename>. In a
                real-world mixnet, the component hosts would not be sharing a single IP address. For
                more information about the test mixnet, see <link linkend="container"
                    endterm="container.title">Using the &program_name; test network</link>.</para>
            <section xml:id="mix-server-section-config">
                <title xml:id="mix-server-section-config.title">Server section</title>
                <para/>
                <para>
                    <programlisting>[Server]
  Identifier = "mix1"
  WireKEM = "xwing"
  PKISignatureScheme = "Ed25519"
  Addresses = ["127.0.0.1:30008"]
  OnlyAdvertiseAltAddresses = false
  MetricsAddress = "127.0.0.1:30009"
  DataDir = "/voting_mixnet/mix1"
  IsGatewayNode = false
  IsServiceNode = false
  [Server.AltAddresses]</programlisting>
                </para>
                    &serverconfig;
            </section>
            <section xml:id="mix-logging-config">
                <title xml:id="mix-logging-config.title">Logging section</title>
                    &logging;
            </section>
            <section xml:id="mix-pki-config">
                <title xml:id="mix-pki-config.title">PKI section</title>
                    &pki;                
            </section>
            <section xml:id="mix-management-config">
                <title xml:id="mix-management-config.title">Management section</title>
                    &management;
            </section>
            <section xml:id="mix-sphinx-config">
                <title xml:id="mix-sphinx-config.title">SphinxGeometry section</title>
                &sphinxgeometry;
            </section>
            <section xml:id="mix-debug-config">
                <title xml:id="mix-debug-config.title">Debug section</title>
                    &serverdebug;
            </section>
        </section>
        <section xml:id="gateway-config">
            <title xml:id="gateway-config.title">Configuring gateway nodes</title>
            <para>The following configuration is drawn from the reference implementation in
                    <filename>katzenpost/docker/voting_mixnet/gateway1/katzenpost.toml</filename>.
                In a real-world mixnet, the component hosts would not be sharing a single IP
                address. For more information about the test mixnet, see <link linkend="container"
                    endterm="container.title">Using the &program_name; test network</link>.</para>
            <section xml:id="gateway-server-section-config">
                <title xml:id="gateway-server-section-config.title">Server section</title>
                <para/>
                <programlisting>[Server]
    Identifier = "gateway1"
    WireKEM = "xwing"
    PKISignatureScheme = "Ed25519"
    Addresses = ["127.0.0.1:30004"]
    OnlyAdvertiseAltAddresses = false
    MetricsAddress = "127.0.0.1:30005"
    DataDir = "/voting_mixnet/gateway1"
    IsGatewayNode = true
    IsServiceNode = false
    [Server.AltAddresses]
        TCP = ["localhost:30004"]</programlisting>
                &serverconfig;

            </section>
            <section xml:id="gateway-logging-config">
                <title xml:id="gateway-logging-config.title">Logging section</title>
                &logging;
            </section>
            <section xml:id="gateway-gateway-section-config">
                <?oxy_comment_start author="dwrob" timestamp="20240816T143000-0700" comment="Information needed."?>
                <title xml:id="gateway-gateway-section-config.title">Gateway section<?oxy_comment_end?></title>
                <para/>
                <programlisting>[Gateway]
    [Gateway.UserDB]
        Backend = "bolt"
            [Gateway.UserDB.Bolt]
                UserDB = "/voting_mixnet/gateway1/users.db"
    [Gateway.SpoolDB]
        Backend = "bolt"
            [Gateway.SpoolDB.Bolt]
                SpoolDB = "/voting_mixnet/gateway1/spool.db"</programlisting>
                <itemizedlist>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                    <listitem>
                        <para/>
                        <para/>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="gateway-pki-config">
                <title xml:id="gateway-pki-config.title">PKI section</title>
                    &pki;
            </section>
            <section xml:id="gateway-management-config">
                <title xml:id="gateway-management-config.title">Management section</title>
                    &management;
            </section>
            <section xml:id="gateway-sphinx-config">
                <title xml:id="gateway-sphinx-config.title">SphinxGeometry section</title>
                    &sphinxgeometry;
            </section>
            <section xml:id="gateway-debug-config">
                <title xml:id="gateway-debug-config.title">Debug section</title>
                &serverdebug;

                
            </section>
        </section>
        <section xml:id="service-config">
            <title xml:id="service-config.title">Configuring service nodes</title>
            <para>The following configuration is drawn from the reference implementation in
                <filename>katzenpost/docker/voting_mixnet/servicenode1/authority.toml</filename>.
                In a real-world mixnet, the component hosts would not be sharing a single IP
                address. For more information about the test mixnet, see <link linkend="container"
                    endterm="container.title">Using the Katzenpost test network</link>.</para>
            <section xml:id="service-server-section-config">
                <title xml:id="service-server-section-config.title">Server section</title>
                <para>The Server section contains mandatory information common to all nodes, for
                    example:</para>
                <programlisting>[Server]
    Identifier = "servicenode1"
    WireKEM = "xwing"
    PKISignatureScheme = "Ed25519"
    Addresses = ["127.0.0.1:30006"]
    OnlyAdvertiseAltAddresses = false
    MetricsAddress = "127.0.0.1:30007"
    DataDir = "/voting_mixnet/servicenode1"
    IsGatewayNode = false
    IsServiceNode = true
    [Server.AltAddresses]</programlisting>
                &serverconfig;

            </section>
            <section xml:id="service-logging-config">
                <title xml:id="service-logging-config.title">Logging section</title>
                &logging;
            </section>
            <section xml:id="service-servicenode-section-config">
                <title xml:id="service-servicenode-section-config.title">ServiceNode section</title>
                <!--https://github.com/katzenpost/katzenpost/blob/main/server/config/config.go#L470 defines the top level configuration.
https://github.com/katzenpost/katzenpost/blob/main/genconfig/main.go#L207 defines the per-service configurations.-->
                <para>The service node configuration section contains subsections with settings for
                    each service that Katzenpost supports. In a production network, the various
                    services would be hosted on dedicated systems.</para>
                <programlisting>[ServiceNode]
                    
    [[ServiceNode.Kaetzchen]]
        Capability = "echo"
        Endpoint = "+echo"
        Disable = false
    
    [[ServiceNode.CBORPluginKaetzchen]]
        Capability = "spool"
        Endpoint = "+spool"
        Command = "/voting_mixnet/memspool.alpine"
        MaxConcurrency = 1
        Disable = false
        [ServiceNode.CBORPluginKaetzchen.Config]
            data_store = "/voting_mixnet/servicenode1/memspool.storage"
            log_dir = "/voting_mixnet/servicenode1"
    
    [[ServiceNode.CBORPluginKaetzchen]]
        Capability = "pigeonhole"
        Endpoint = "+pigeonhole"
        Command = "/voting_mixnet/pigeonhole.alpine"
        MaxConcurrency = 1
        Disable = false
        [ServiceNode.CBORPluginKaetzchen.Config]
            db = "/voting_mixnet/servicenode1/map.storage"
            log_dir = "/voting_mixnet/servicenode1"
    
    [[ServiceNode.CBORPluginKaetzchen]]
        Capability = "panda"
        Endpoint = "+panda"
        Command = "/voting_mixnet/panda_server.alpine"
        MaxConcurrency = 1
        Disable = false
        [ServiceNode.CBORPluginKaetzchen.Config]
            fileStore = "/voting_mixnet/servicenode1/panda.storage"
            log_dir = "/voting_mixnet/servicenode1"
            log_level = "INFO"
    
    [[ServiceNode.CBORPluginKaetzchen]]
        Capability = "http"
        Endpoint = "+http"
        Command = "/voting_mixnet/proxy_server.alpine"
        MaxConcurrency = 1
        Disable = false
        [ServiceNode.CBORPluginKaetzchen.Config]
            host = "localhost:4242"
            log_dir = "/voting_mixnet/servicenode1"
            log_level = "DEBUG"</programlisting>
                <para><emphasis role="bold">Common parameters:</emphasis></para>
                <itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Capability</emphasis></para>
                        <para>The capability exposed by the agent.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Endpoint</emphasis></para>
                        <para>Endpoint is the provider side endpoint that the agent will
                            accept requests at. While not required by the spec, this server
                            only supports Endpoints that are lower-case local-parts of an
                            e-mail address.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Command</emphasis></para>
                        <para>Command is the full file path to the external plugin program
                        that implements this Kaetzchen service.</para>
                        <para>Type: string</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">MaxConcurrency</emphasis></para>
                        <para>MaxConcurrency is the number of worker goroutines to start for this service.</para>
                        <para>Type: int</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Config</emphasis></para>
                        <para>The extra per agent arguments to be passed to the agent's initialization routine.</para>
                        <para>Type: map[string]interface{}</para>
                        <para>Required:</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Disable</emphasis></para>
                        <para>disabled a configured agent.</para>
                        <para>Type: bool</para>
                        <para>Required:</para>
                    </listitem>
                </itemizedlist>
                <?oxy_comment_start author="dwrob" timestamp="20240816T141621-0700" comment="About CBOR:

https://pkg.go.dev/github.com/katzenpost/katzenpost@v0.0.35/server/cborplugin#ResponseFactory

Package cborplugin is a plugin system allowing mix network services to be added in any language. It communicates queries and responses to and from the mix server using CBOR over UNIX domain socket. Beyond that, a client supplied SURB is used to route the response back to the client as described in our Kaetzchen specification document: "?>
                <para><emphasis role="bold">Per-service
                    parameters:<?oxy_comment_end?></emphasis></para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para><?oxy_comment_start author="dwrob" timestamp="20240816T124622-0700" comment="Needs explanation"?><?oxy_custom_start type="oxy_content_highlight" color="255,255,0" mid="36"?><emphasis
                                    role="bold"
                            >Kaetzchen</emphasis><?oxy_comment_end?></para><?oxy_custom_end mid="36"?>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">spool</emphasis></para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis role="bold">data_store</emphasis></para>
                                    <para/>
                                    <para>Type: </para>
                                    <para>Required:</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="bold">log_dir</emphasis></para>
                                    <para/>
                                    <para>Type: </para>
                                    <para>Required:</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">pigeonhole</emphasis></para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis role="bold">db</emphasis></para>
                                    <para/>
                                    <para>Type: </para>
                                    <para>Required:</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="bold">log_dir</emphasis></para>
                                    <para/>
                                    <para>Type: </para>
                                    <para>Required:</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">panda</emphasis></para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis role="bold">fileStore</emphasis></para>
                                    <para/>
                                    <para>Type: </para>
                                    <para>Required:</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="bold">log_dir</emphasis></para>
                                    <para/>
                                    <para>Type: </para>
                                    <para>Required:</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="bold">log_level</emphasis></para>
                                    <para>Supported values are ERROR | WARNING | NOTICE |INFO |
                                        DEBUG.</para>
                                    <warning>
                                        <para>The DEBUG log level is unsafe for production
                                            use.</para>
                                    </warning>
                                    <para>Type: string</para>
                                    <para>Required:</para>
                        <para>Required:</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">http</emphasis></para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis role="bold">host</emphasis></para>
                                    <para/>
                                    <para>Type: </para>
                                    <para>Required:</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="bold">log_dir</emphasis></para>
                                    <para/>
                                    <para>Type: </para>
                                    <para>Required:</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis role="bold">log_level</emphasis></para>
                                    <para>Supported values are ERROR | WARNING | NOTICE |INFO |
                                        DEBUG.</para>
                                    <para>Type: string</para>
                                    <para>Required:</para>
                        <para>Required:</para>
                                    <warning>
                                        <para>The DEBUG log level is unsafe for production
                                            use.</para>
                                    </warning>
                                    <para>Type: string</para>
                                    <para>Required:</para>
                        <para>Required:</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>
            <section xml:id="service-pki-config">
                <title xml:id="service-pki-config.title">PKI section</title>
                    &pki;
            </section>
            <section xml:id="service-management-config">
                <title xml:id="service-management-config.title">Management section</title>
                    &management;
            </section>
            <section xml:id="service-sphinx-config">
                <title xml:id="service-sphinx-config.title">SphinxGeometry section</title>
                    &sphinxgeometry;
            </section>
            <section xml:id="service-debug-config">
                <title xml:id="service-debug-config.title">Debug section</title>
                &serverdebug;
           </section>
        </section>
    </section>
</chapter>
