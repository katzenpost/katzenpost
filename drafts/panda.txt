Katzenpost PANDA Autoresponder Extension
David Stainton

version 0

Abstract

   This document is meant as an implementation guide for a Panda (see
   [PANDA] and [PANDASPEC]) service for the Katzenpost mix network
   system. This PANDA service operates as a [KAETZCHEN] Provider side
   autoresponder service, allowing clients to exchange their keys
   using password authentication. This Panda Kaetzchen service can be
   used as an alternative to [KATZKEYSERVER].

1. Introduction

   In Panda, the participating principals are two clients and a server.
   The clients do all the crypto and the server is very dumb, it merely
   stores and retreives ciphertext blobs.

   Unlike other PAKE variations, the two particpating clients have
   identical protocol behavior. This allows clients to perform the key
   exchanges asynchronously even if both clients are not online at the
   same time. The cryptographic messages are queued on a previously agreed
   upon intermediary Panda server for later retrieval by communication
   partners.

1.1. Terminology

   * PAKE: Password Authenticated Key Exchange

   * PANDA: Phrase Automated Nym Discovery Authentication:
     see [PANDA] and [PANDASPEC].

   * kaetzchen/autoresponder service: A service which runs on a Provider
     and uses a request-response style protocol scheme to implement
     arbitrary services for mix network clients. See [KAETZCHEN]
     for details.

   * Provider: A service operated by a third party that Clients
     communicate directly with to communicate with the Mixnet.  It is
     responsible for Client authentication, forwarding outgoing
     messages to the Mixnet, and storing incoming messages for the
     Client. The Provider MUST have the ability to perform
     cryptographic operations on the relayed packets.

   * Posting: A structure reference by a Tag, containing two message
     slots.

   * Tag: A 32 byte value used to reference a Tag.

1.2 Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

2. System Overview

   The Panda protocol assumes that two Panda clients have selected
   a Panda server which acts as a bulletin board system. The two Panda
   clients use the Panda server to make two binary blob exchanges.
   This is done to facilitate the EKE2 protocol which is described
   in detail in [PANDASPEC].

   The Panda server stores a structure called a Posting which has two
   message slots and is referenced by a tag. If Alice manages to
   contact the Panda server before Bob then Alice's message will be
   inserted into Slot 1. Alice's client will then periodically check
   the Posting for Bob's message in Slot 2. When Bob finally contacts
   the Panda server he inserts his message into slot2 and receives
   Alice's message from slot1.

      .--------.
      | Alice  |  -------.
      `--------'          `\
                           |
                           V

      .----- Panda Server -----.
      |                        |
      |            .---------. |
      |            | Posting | |
      |            |         | |
      |            | Slot 1  | |
      |            | Slot 2  | |
      |            |         | |
      |            `---------' |
      `------------------------'

                           |
                           |
      .--------.          _'
      | Bob    |  -------'
      `--------'

3. Protocol Messages

   The PandaRequest is sent to the Panda service with a SURB
   that is used to send the PandaResponse back to the client.

3.1 PandaRequest message

       {
           "Version": 0,
           "Tag": "DEADBEEF",
           "Message": "message1"
       }

   * The Tag field is hex string encoding a 32 bytes value.
   * The Message is a base64 encoded binary blob.

3.2 PandaResponse message

       {
           "Version": 0,
           "StatusCode": "0",
           "Message": "message2"
       }

   * The StatusCode field is used to report errors to the client if any.
     Valid status codes are:

        enum {
           status_received1(0),                  /* Message1 was received. */
           status_received2(1),                  /* Message2 was received. */
           status_syntax_error(2),               /* The request was malformed. */
           status_tag_collision_error(3),        /* The request tag collision error. */
           status_tag_request_recorded_error(4), /* The request message was already recorded. */
           status_storage_error(5),              /* Storage subsystem failure. */
        } StatusCodes;

   * The Message field contains the retrieved message from the queued Posting.

4. Panda Server Storage Garbage Collection

   The Panda server MUST periodically garbage collect expired Postings.

5. Anonymity Considerations

6. Security Considerations

   * Posting Tag collisions are unlikely given that tags are 32 bytes.

   * After the two binary blob exchanges are performed, the Panda
     server does NOT expunge the two Postings because the Kaetzchen
     protocol is lossy. Therefore the Panda server must not assume
     the client will receive the PandaResponse message. The queued
     ciphertext on the Panda server represents vulnerability to
     a compulsion attack. That is, an adversary might break then
     with a quantum computer or key compromise.

7. Future Work

Appendix A. References

Appendix A.1 Normative References

   [RFC2119]   Bradner, S., "Key words for use in RFCs to Indicate
               Requirement Levels", BCP 14, RFC 2119,
               DOI 10.17487/RFC2119, March 1997,
               <http://www.rfc-editor.org/info/rfc2119>.

   [KAETZCHEN]  Angel, Y., Kaneko, K., Stainton, D.,
                "Katzenpost Provider-side Autoresponder", January 2018,
                <https://github.com/Katzenpost/docs/blob/master/drafts/kaetzchen.txt>.

Appendix A.2 Informative References

   [PANDA]   Appelbaum, J., "Going Dark: Phrase Automated Nym Discovery Authentication",
             <https://github.com/agl/pond/tree/master/papers/panda>.

   [PANDASPEC] ?

   [SPAKE2]   Abdalla, M., Pointcheval, D.,
              "Simple Password-Based Encrypted Key Exchange Protocols",
              Topics in cryptologyâ€“CT-RSA 2005,
              <http://www.di.ens.fr/users/mabdalla/papers/AbPo05a-letter.pdf>.

   [EKE2]   Bellare, M., Pointcheval, D., Rogaway, P.,
            "Authenticated Key Exchange Secure Against Dictionary Attacks",
            EUROCRYPT, April 2000, <https://eprint.iacr.org/2000/014.pdf>.

   [KATZKEYSERVER]   Angel, Y., Diaz, C., Pollan, R., kwadronaut, mo, Kaneko, K., Stainton, D.,
                     "Katzenpost Key Discovery Extension", February 2018,
                     <https://github.com/katzenpost/docs/blob/master/drafts/keyserver.txt>.
