Katzenpost Provider-side Autoresponder Extension
Yawning Angel
Kali Kaneko
David Stainton

Abstract

   This document describes extensions to the core Katzenpost protocol
   to support Provider-side autoresponders.

Table of Contents

   1. Introduction
      1.1 Terminology
   2. Extension Overview
   3. Agent Requirements
      3.1 Client to Agent message format
   4. PKI Extensions
   5. Anonymity Considerations
   6. Security Considerations
   7. Acknowledgments
   Appendix A. References
      Appendix A.1 Normative References
      Appendix A.2 Informative References

1. Introduction

   This interface is meant to provide support for various autoresponder
   agents ("Kaetzchen") that run on Katzenpost provider instances, thus
   bypassing the need to run a discrete client instance to provide
   functionality.  The use-cases for such agents include, but are not
   limited to, user identity key lookup, a discard address, and a
   loop-back responder for the purpose of cover traffic.

1.1. Terminology

   SURB - "single use reply block"; SURBs are used to achieve
          recipient anonymity, that is to say, SURBs function as a
          cryptographic delivery token that you can give to another
          client entity so that they can send you a message without
          them knowing your identity or location on the network. See
          [SPHINXSPEC] and [SPHINX].

2. Extension Overview

   Each Kaetzchen agent will register as a potential recipient on its
   Provider.  When the Provider receives a forward packet destined for
   a Kaetzchen instance, it will hand off the fully unwrapped packet
   along with its corresponding SURB to the agent, which will then
   act on the packet and optionally reply utilizing the SURB.

3. Agent Requirements

   [ XXX: TODO

     * Each agent operation MUST be idempotent.

     * Each agent operation request and response MUST fit within one
       Sphinx packet.

     * Each agent SHOULD register a recipient address that is prefixed
       with `+` (Or another standardized delimiter, agreed to by all
       participating providers in a given mixnet.).

     * The first byte of the agent's response payload MUST be 0x01 to
       allow clients to easily differentiate between SURB-ACKs and
       agent responses.
   ]

3.1 Client to Agent message format

   We define the message format as:

   struct {
      uint16_t surb_len;
      opaque surb[];
      opaque payload[];
   } KaetzchenMessage;

   KaetzchenMessage message is encapsulated in an end to end encrypted
   BlockCiphertext as described in [KATZMIXE2E]. That is, the normal
   katzenpost protocol is used when sending messages to a Kaetzchen
   service, although the implementation must encrypt the
   BlockCiphertext using the service's identity key as published in
   the PKI consensus document. [KATZMIXPKI]

4. PKI Extensions

   Each provider SHOULD publish the list of publicly accessible
   Kaetzchen agent endpoints in its MixDescriptor, along with
   any other information required to utilize the agent.

   Provider should make this information available in the form of a map
   in which the keys are the label used to identify a given capability, and the
   value is a map with arbitrary keys.

   Valid capability names refer to the capabilities defined in extensions to this
   specification. Every capability MUST be implemented by one and only one
   Kaetzchen agent.

   For each capability, the provider MUST advertise a field for the endpoint at
   which the Kaetzchen agent can be reached, and the identity key for such agent.


   { "kaetzchen":
       { "keyserver" : {
             "endpoint": "+keyserver",
             "id-key": "4d488962dd5a7c2d2d2360a6bbe258bf75022eb39a05b8c877f3f92e99fd298c",
             "version" : 1 } },
       { "discard" : {
             "endpoint": "+discard",
             "id-key": "4d488962dd5a7c2d2d2360a6bbe258bf75022eb39a05b8c877f3f92e99fd298c" } },
       { "loop" : {
             "endpoint": "+loopback",
             "id-key": "4d488962dd5a7c2d2d2360a6bbe258bf75022eb39a05b8c877f3f92e99fd298c",
             "restrictedToUsers": true } },
   }

5. Anonymity Considerations

   In the event that the mix keys for the entire return path are
   compromised, it is possible for adversaries to unwrap the SURB
   and determine the final recipient of the reply.

   Depending on what sort of operations a given agent implements,
   there may be additional anonymity impact that requires separate
   consideration.

6. Security Considerations

   It is possible to use this mechanism to flood a victim with unwanted
   traffic by constructing a request with a SURB destined for the target.

   Depending on the operations implemented by each agent, the added
   functionality may end up being a vector for Denial of Service attacks
   in the form of CPU or network overload.

   Unless the agent implements additional encryption, message integrity
   and privacy is limited to that which is provided by the base Sphinx
   packet format and parameterization.

7. Acknowledgments

   The inspiration for this extension comes primarily from a design
   by Vincent Breitmoser.

Appendix A. References

Appendix A.1 Normative References

   [SPHINXSPEC] Angel, Y., Danezis, G., Diaz, C., Piotrowska, A., Stainton, D.,
                "Sphinx Mix Network Cryptographic Packet Format Specification"
                July 2017, <https://github.com/katzenpost/docs/blob/master/specs/sphinx.txt>.

Appendix A.2 Informative References

   [SPHINX]  Danezis, G., Goldberg, I., "Sphinx: A Compact and
             Provably Secure Mix Format", DOI 10.1109/SP.2009.15,
             May 2009, <http://research.microsoft.com/en-us/um/people/gdane/papers/sphinx-eprint.pdf>.

   [KATZMIXPKI]  Angel, Y., Piotrowska, A., Stainton, D.,
                 "Katzenpost Mix Network Public Key Infrastructure Specification", December 2017,
                 <https://github.com/katzenpost/docs/blob/master/specs/pki.txt>.
