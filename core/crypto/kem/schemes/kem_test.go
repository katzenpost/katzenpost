package schemes

import (
	"encoding/hex"
	"testing"

	"github.com/katzenpost/katzenpost/core/wire"
	"github.com/stretchr/testify/require"
)

func TestHybridKEM(t *testing.T) {
	// test using the KEM used in our PQ Noise protocol
	s := wire.KEMScheme

	t.Logf("ciphertext size %d", s.CiphertextSize())
	t.Logf("shared key size %d", s.SharedKeySize())
	t.Logf("private key size %d", s.PrivateKeySize())
	t.Logf("public key size %d", s.PublicKeySize())
	t.Logf("seed size %d", s.SeedSize())
	t.Logf("encapsulation seed size %d", s.EncapsulationSeedSize())

	pubkey1, privkey1, err := s.GenerateKeyPair()
	require.NoError(t, err)
	ct1, ss1, err := s.Encapsulate(pubkey1)
	require.NoError(t, err)
	ss1b, err := s.Decapsulate(privkey1, ct1)
	require.NoError(t, err)
	require.Equal(t, ss1, ss1b)
	t.Logf("our shared key is %x", ss1)

	ct2, ss2, err := s.Encapsulate(pubkey1)
	require.NoError(t, err)
	require.NotEqual(t, ct1, ct2)
	require.NotEqual(t, ss1, ss2)
}

func TestHybridKEMVectors(t *testing.T) {
	// test using the KEM used in our PQ Noise protocol
	s := wire.KEMScheme
	/*
		pubkey1, privkey1, err := s.GenerateKeyPair()
		require.NoError(t, err)

		pubkey1bytes, err := pubkey1.MarshalBinary()
		require.NoError(t, err)
		privkey1bytes, err := privkey1.MarshalBinary()
		require.NoError(t, err)

		t.Logf("pubkey1 %x", pubkey1bytes)
		t.Logf("privkey1 %x", privkey1bytes)

	*/
	privkey1bytes, err := hex.DecodeString("8cc8f9e633320f016c6450740ab0aa979aeaf8df174c8af7f1daf4cd82a93dd3b125ac75b93d457a774606b676d79202190f2b0c573d45a4ef1b7b96a3c9d10bbcca126c6be356185441de06317589c026702d3fc9a9eed891e3b13e76355ccef57d49420c01231a3972ac87c98a62a4088dd767d092464ffac6c0c41159270a92cb3e9eb0bd48574f7bb4ba22c8af28e0a74f3750907b56d05114489538d492225213a96b3aa02ae763cf057b4cb9c98d58a770354ee58214ac6372c559867fac9d85956ca3989e5a0a39154261e15a1f1700b9d0b55bc6c17393e9013ae02eac3118385786485c8060295597c8832bcc310df30260064cd3a13c3eda6deab07b6d44c98d757ac1522a0d571a0ac522efe752f2d308a5a3cfd965b8bba9849f0ab87a052675505179596c5a3c32aa0a33c369af0f4bb8b0583591146f5f507a96f74c51b1c2f2f85abddcc8b1a39819d37c99cc5bc40a339c6c7ca6dc5a6ba4640b05c4c48492ec207b8f101060700d0757a591679c4c692328c39d98081b14a21281a404c0221a9e766913b4977cba0b103ac23920b202333c3ff6985bf58a40798796957572b1bda25c908b553ebc10124b294e56850a62104a5f7077bd9c4e570cb853d064a4a200bedb19fd1349ac509c0cd09e33079855730e37f0a95ea2ca1ea068ea0632368289ace4ceb2378d2b330533da17d35c1e9f4b01cb33bf032564597c128789535ef19bcdf666a4c7a2fd1632487736f6575881f29232710b6005aaa856c56202be8b139cd5642a91352860062594343790044d7a4795a1a26b1ed63b9fa475f698c29e1bb560b448f6d70e2f4bc294a46aa4794ef1da189781a1ea675e284a7cb5810db21c1b5b64776dd75bde33a0c10c8183b156287a3d0ef374da192efa7c6484fa1c4ed08f8e1446518ba27a5523ba2181658cc8add36935425b3e2c79d7f8c49e55b2af70939cb113ceabce7a789cc95313e1352025297ce0a791692ab696a30e2650883968640f72822feb32c501420c1bbce3eb32c28b959a38a018e2c49ce52214e03510fc6bc2ec681779a9a2030cd2d08ebb88189c40b117458dbdc5ae4ee2b551d06842066a5be39f8a5c1fa38490b421b2191b252c5866c385bcf0a79d82027c34095f33c1b174ec020abc7e7c6cad5ee041dd9352dd559b553c351f71cc038c996fd7a8bf928d520323256b984b080c8301bb9e2c67bde9197b124b49bc5638f6aa506015d41603d9f42d1143bfb0767e971ac82967271fc1314afc318f66050214107f848bb04b3bdfc8b79476286e24bc4ae4a5a575aba360aafd5747e9f36edc331512798ca4ba4af3c51ad2d06c1fc10dfd077574e6502a1c1b9f1394c1e9824801778e0bbc85f2b352e43690906e8fa75482ac758408c697d2b263076272685aae0bbe5bda35a9a92fc262086c0bb249e0cf571c8ba89503c1a879ba156bb671b254cb556cf17db4ea9eadba86eef958d1367e17cb46911376c815a6d7f94c3ad43f7b6c75b15395880c73c3183683422845e573eb7aab9786834873ca31e9bd647148defac00a27ad64f23c9722ce76cca6106c1f6cb843ea1848b51a7c907a035bea9e17311074977a0ff782529055aaf853d963548e6094ba0837574152bf9a7583f0a0ee6287f82a60733b77c1ec10f4d65b24c7c5134a7fabb7444d1643af055121e94846d8c8dd306d621b7518e73b8d2aba92b6057d3700e26c7f797b554e1c7f8882ac08781e981930da1c7cc0aa02aa5a0fa528b29e399574fb7f530a14b4529e359607b7c59368486290104cf6bb3a41e219fedc0f2e10142229a06ef20c83b12225e21dfeb668f85050b294bc4af115772c37f0711b3acb9dd859bb9854394e9ca197b06900f6b2c0b7ac31537e165976a6d37ef47943041966a1ab06b930cdd06b0c3d1588b722c11edb76e0ca2667037abd1c4a4a9768e303482541749be64e60736c2b919af836924395a424d7788c266a9f39698eca4a392c39e58688a58a4ab58366ed6b252d8b15c690883a8cb160b14f0773110e242cc9cb2bd3a6865641422a9b7a77091615d26fe63bb7f8749e4588162e067f5ee253bb519ddde11f9cdb5dbd8cc3f318c6eff3a4011828cab7327bd719c3801e1ce424e646422a51cd83701463b38a14206b9a794b87154e0d475244304df86b4f0e31c275e8cb84174403b61544c3a1e7090f21b34e052b69880c0ce4825e7520488b464ec50b36e73b7895c9ba3168c7d5338c83080850fc0a88a9b9c985bbb6a05b422a21312b4df5541eb088051bd46c77ab72650ad0e5f45ad963a10b7c9d29c6aaf0674a59a532e38b7634027bd517a69dfca8648960377c457da4c40111cbcd0184a9d5c6f429035f834e84390aa6a5c09db98f47d2402e48065d22c8f2a39a89c3a6635b01f5e949af8a0d9f9945d663975c139c15192455240da6bb12ed0b4e5e515f4f2c146603b2ae52bf83c418f407928358b3e43c0c51777d0b5c89ddf10c5c24b341c2be1a56731891049af221cc38c4ab6185eb2a812b737099e964fea7c28fe3b8e7b0039653409ee88cd93c55b7c9c690f6550c6b8d10613b856cc386c00170d579018c6f81b423f2fa7aa6074cf0f681f1053862001a3c5a81fee53a5fe06a83d6cf3ec4155287358a3455ad814b9e86791d66c170d64ffdf075de0446309c81bac16eff06b1ff090da9501a5315ce49896c0e37051a4b23b400c4ca016084319c5d9225e726aae18089bf324bac486b79344ead6cbd80189f0cdb2df933782f43be8dda547c959075a71f082abee8072074e24834fb0885a6474f47a97d6bc5b72305b928023967b7cb1c280591c5a86c7e7253186e716665882ce7642bdc8265b8d44cf4908c08e624c547966e713680788acea06694361d3104c9db4618b477a021092eda356824e144ead41cc29260a36cbc8bf203c67cae82614604b6bcf9a12256fa3f394b2e6c3a14a5f887b86606890a290de0c785a60d887b062de086c9173dc7cc75fee8007d3672423ab132285a377c933f73522de3945e223d17f81284878a47b22b64a294cdbcadcb4c9950e9c532259cf0b51f82445680c2c216a15044aa7d45944ee55caf1d443be5fbc946cc4698492461870bf00773bd32a658bb6aca155124499dc8e997bdb3119279b26cb214a8bc5bddba6e52ca1413384433dba9b7cbcde7fa78cf454e5c6c885e7b2f886cc663c5c3518680e6da2219f122b3544dc88a3102d504b5ebcf8cf787fe16a75681993cbab8641824ed33c21203644aea81cda6bff1ab05447d9c6965872e3864970c18ae62e227bb2dc6796fa3759884df936e356856dbc682c158cadb81156dea76d204f0783c479d00f069fa2f204736572799bbfa86b69dbe6bf1cbc9cf0b31f4000d35e25f230a342c6709f3ef06b0")
	require.NoError(t, err)
	pubkey1bytes, err := hex.DecodeString("4bbfdf4cf7d2e060bc41d062c503e9b81c7a93c8f353903b2da49cdb14f1844cc1ec10f4d65b24c7c5134a7fabb7444d1643af055121e94846d8c8dd306d621b7518e73b8d2aba92b6057d3700e26c7f797b554e1c7f8882ac08781e981930da1c7cc0aa02aa5a0fa528b29e399574fb7f530a14b4529e359607b7c59368486290104cf6bb3a41e219fedc0f2e10142229a06ef20c83b12225e21dfeb668f85050b294bc4af115772c37f0711b3acb9dd859bb9854394e9ca197b06900f6b2c0b7ac31537e165976a6d37ef47943041966a1ab06b930cdd06b0c3d1588b722c11edb76e0ca2667037abd1c4a4a9768e303482541749be64e60736c2b919af836924395a424d7788c266a9f39698eca4a392c39e58688a58a4ab58366ed6b252d8b15c690883a8cb160b14f0773110e242cc9cb2bd3a6865641422a9b7a77091615d26fe63bb7f8749e4588162e067f5ee253bb519ddde11f9cdb5dbd8cc3f318c6eff3a4011828cab7327bd719c3801e1ce424e646422a51cd83701463b38a14206b9a794b87154e0d475244304df86b4f0e31c275e8cb84174403b61544c3a1e7090f21b34e052b69880c0ce4825e7520488b464ec50b36e73b7895c9ba3168c7d5338c83080850fc0a88a9b9c985bbb6a05b422a21312b4df5541eb088051bd46c77ab72650ad0e5f45ad963a10b7c9d29c6aaf0674a59a532e38b7634027bd517a69dfca8648960377c457da4c40111cbcd0184a9d5c6f429035f834e84390aa6a5c09db98f47d2402e48065d22c8f2a39a89c3a6635b01f5e949af8a0d9f9945d663975c139c15192455240da6bb12ed0b4e5e515f4f2c146603b2ae52bf83c418f407928358b3e43c0c51777d0b5c89ddf10c5c24b341c2be1a56731891049af221cc38c4ab6185eb2a812b737099e964fea7c28fe3b8e7b0039653409ee88cd93c55b7c9c690f6550c6b8d10613b856cc386c00170d579018c6f81b423f2fa7aa6074cf0f681f1053862001a3c5a81fee53a5fe06a83d6cf3ec4155287358a3455ad814b9e86791d66c170d64ffdf075de0446309c81bac16eff06b1ff090da9501a5315ce49896c0e37051a4b23b400c4ca016084319c5d9225e726aae18089bf324bac486b79344ead6cbd80189f0cdb2df933782f43be8dda547c959075a71f082abee8072074e24834fb0885a6474f47a97d6bc5b72305b928023967b7cb1c280591c5a86c7e7253186e716665882ce7642bdc8265b8d44cf4908c08e624c547966e713680788acea06694361d3104c9db4618b477a021092eda356824e144ead41cc29260a36cbc8bf203c67cae82614604b6bcf9a12256fa3f394b2e6c3a14a5f887b86606890a290de0c785a60d887b062de086c9173dc7cc75fee8007d3672423ab132285a377c933f73522de3945e223d17f81284878a47b22b64a294cdbcadcb4c9950e9c532259cf0b51f82445680c2c216a15044aa7d45944ee55caf1d443be5fbc946cc4698492461870bf00773bd32a658bb6aca155124499dc8e997bdb3119279b26cb214a8bc5bddba6e52ca1413384433dba9b7cbcde7fa78cf454e5c6c885e7b2f886cc663c5c3518680e6da2219f122b3544dc88a3102d504b5ebcf8cf787fe16a75681993cbab8641824ed33c21203644aea81cda6bff1ab05447d9c6965872e3864970c18ae62e227bb2dc6796fa3759884df")
	require.NoError(t, err)

	pubkey1, err := s.UnmarshalBinaryPublicKey(pubkey1bytes)
	require.NoError(t, err)

	privkey1, err := s.UnmarshalBinaryPrivateKey(privkey1bytes)
	require.NoError(t, err)

	/*
			seed := make([]byte, s.SeedSize())
		        _, err = rand.Reader.Read(seed)
			require.NoError(t, err)

			t.Logf("seed %x", seed)
	*/

	seed, err := hex.DecodeString("4d29bfc63cfc83dd037a2641d4b2ed177af8d2ef351f7fa87f343475000fdf77")
	require.NoError(t, err)

	ctA, ssA, err := s.EncapsulateDeterministically(pubkey1, seed)
	require.NoError(t, err)

	//t.Logf("KEM ciphertext: %x\n\n", ctA)
	//t.Logf("KEM shared secret: %x\n\n", ssA)

	ctB, err := hex.DecodeString("4293a5ab1e7896be363f4f5f3371a5c586d9d9428c77655cc91db63cece7d2524a79b916caec8a830aa35a947788de48f4f3f45907ea7dfda9d5e762b171813f6383974d9081479d5b1f65b8704d916efb1e7f2ea2ebfb32d7d22f64d74cfae4ea8fefc9d07880b8e4367dad8bdd80ec2041dafc2199653572a71097c0bfba10250a9d323039b5bdbed3db7c195cc72dfedc7ea0f28b25c25862d7c15357642c9f1eb0a75c8ed07ccb1863f7046a06c8545f5eb7e2af68a6de3a457c8a20cc470a79891b94292d38b0b8726a30ccd159898e4ebc943146c9d6003c4f48cbb717b40ffd23fe6507355b2d48dfd07860938d96ab52661087c4ea63397015f5f787e584cf8ab9380935f79275081a4d6675ea30e845f1b2addbd7fa0f4d1dcbbab22366609fcd05eeb48cabfedff954a3c1726bd26985149265ce6af8e64d5f0f358fa638648511ddcbbf9c0ea2a671977ce92846f930cf21925a874a4f409c34c1a282b1a84bf917d434a4b091118bcf3298a9d85901649a2901d31730b7686c0d3ae8ceccd9c1c8ab92ff9e6247e38efe354c744d630c6aac2e8da47c3adafe2f5c1b2f4428b41034be12741c0d192f7d96a4da570fb187137ff914a31004b34ca3e3568c3a8e233da17f0458df658db176e4d52da19cf22cd52030e1835236812f4aa4b1b67f8035fd48f653d002c0ab8a577acf56d461fd2e393b0e2b2e8581aa2579c8e34235223bddc19723169bdd5326a365df7e364b3523d62bcd333c8877eecc9bfea978b7ae524d930591100e1d7aabc6fb2b3c2d751870973f33a5a543d89a8766dfb5382edd35c457663ea371a870d403a3e1dc190e9a92e33188675418ba384a35e6fd380dbc9ad0af2762e9f34d65b64113759d6b3dfe808f808db6fdd81ea4c8bb8e6bb4dc2ea2d364f7e74c31d783e37c4db6ecdfb492a9b895f1e025b2e07ce18dcbdb2aba2768bb2eaadacf417d298bc05e69d3b6c5a1671696920039b9e5baf34bfd26d16e33c056fbb036eb62c669dd5270f6a585ab03fab551aab05eb2f318133317fc2c647a0367ad1f0d6f33f92b445d5b802514413de7bcc859da2369524ce614c2339be611b73147e576987315cb9e1dbc7ec48729e395dbc58e36d7ae42a531cc2119d06cd95ed93f19d5e39d59c197a593452901fce6599250905b3ca6b02e6040b3ab8e7fcbe3ef6165c8755d26d451f176cb205afcaf96ddf73244c7c825517a218b3fd4ee4aa5ed3c2c94516b7c397c2ac325bcabfe9ad6cb2520d5df94853ffcb292ef782e365d39e299ca82de868a5c1bfaeb79708109321584a2543f37914774158ff0108ec05a56022faf23c32b264d9f93642e5f46a9cdaf4c37a8b2d5e3c023fe6843cc79bfa2059b332e1694402276bb6515b5d1e3114659873bb90e8a907f4582d9411fe175123dc1f276e97bb9d5bdec0224fd510c40fa1fa3d80f2a4ab5253803976c0a7673638e7d5090fae9e244e5bbee805b979a8c2df96ef350d34e25bff17e5ea4613dd2549781aafae1e4bb89af0f5823b26d3e8d01271c81b5179ccf015290729f65cc04f82945eb1d9c")
	require.NoError(t, err)

	ssB, err := hex.DecodeString("2f1eac256ac996033984960cc84dc53dd1200dca111c1fb609e8a031ce9a1784")
	require.NoError(t, err)

	require.Equal(t, ctA, ctB)
	require.Equal(t, ssA, ssB)

	ss1b, err := s.Decapsulate(privkey1, ctA)
	require.NoError(t, err)
	require.Equal(t, ssA, ss1b)
}
