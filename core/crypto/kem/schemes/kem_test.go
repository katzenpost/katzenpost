package schemes

import (
	"encoding/hex"
	"testing"

	"github.com/katzenpost/katzenpost/core/wire"
	"github.com/stretchr/testify/require"
)

func TestHybridKEM(t *testing.T) {
	// test using the KEM used in our PQ Noise protocol
	s := wire.KEMScheme

	t.Logf("ciphertext size %d", s.CiphertextSize())
	t.Logf("shared key size %d", s.SharedKeySize())
	t.Logf("private key size %d", s.PrivateKeySize())
	t.Logf("public key size %d", s.PublicKeySize())
	t.Logf("seed size %d", s.SeedSize())
	t.Logf("encapsulation seed size %d", s.EncapsulationSeedSize())

	pubkey1, privkey1, err := s.GenerateKeyPair()
	require.NoError(t, err)
	ct1, ss1, err := s.Encapsulate(pubkey1)
	require.NoError(t, err)
	ss1b, err := s.Decapsulate(privkey1, ct1)
	require.NoError(t, err)
	require.Equal(t, ss1, ss1b)
	t.Logf("our shared key is %x", ss1)

	ct2, ss2, err := s.Encapsulate(pubkey1)
	require.NoError(t, err)
	require.NotEqual(t, ct1, ct2)
	require.NotEqual(t, ss1, ss2)
}

func TestHybridKEMVectors(t *testing.T) {
	// test using the KEM used in our PQ Noise protocol
	s := wire.KEMScheme

	/*
		pubkey1, privkey1, err := s.GenerateKeyPair()
		require.NoError(t, err)

		pubkey1bytes, err := pubkey1.MarshalBinary()
		require.NoError(t, err)
		privkey1bytes, err := privkey1.MarshalBinary()
		require.NoError(t, err)

		t.Logf("pubkey1 %x", pubkey1bytes)
		t.Logf("privkey1 %x", privkey1bytes)
	*/

	privkey1bytes, err := hex.DecodeString("6d4e2ff1ed0b82f3c5a61dbe40c2c01121be2c83778f196534c1d35b1397c44aa9310c9d0288a980663c4746e4566159a227a4a3276a6acb76e04da073b8a3bc0c3bd3461106b6d3099cde690dd11532119b5b144232149442f72621b658b3bb08aaac6751623182ec652521aa721412b571c88bd3315808458ce456cc978955a9c91d75c2318465972fa36bc923c525bbb9863c9898373af84c9307ea815a4cbdfffb4c19051155f220e90b97bf639ee5f252e97a4a84775a521c98a222610d2741ac5c788bd3716bd4cfed914ac91b2eff29c7a4668d2321c8d39a793b72a1883152301264c3dba081856ce797ba112b3e34ca0f0fc634fdb155e3852d0a171c1d558faccc98b5844687373d595b258d765a4403a7076b0957c5aeb8b45c32da836c36ca45d1092ceba10d61c8d1d3c67172ab3e8659c4d112fc41cac8cc0f68366a6a5b83b0469affdb60c817bc3f127d85c8953b7a4edab64ec150a9afa1cf2b8b4e69d726e7ba34e056adc5983bffd91f2b7c35f0312450876c4ee0873c8656c0d5786696ce02e5a3a8a747bf08a57914689fda10e54bb2a9ba3a7fb49fe233598bf04571e22098a809d2ca4969e69d2e794cd7bc72b5a3128a310e928a66ee71528d9572852a0f81713167f246ea075611a19e2df1008eac56232779dcb11b7d819aee75860c06a0645a3cdbf870af6b25213c7dc90b9ccdd8b678c9b40adc3baff60b3461a8bcd9a2880663c446c3425482024396a9bb2115cba290e51a1c0076d01a53482cc86329cbc42c34f7c32496381164d02e95495c6f1882f1ac5dca75c78f62863282019f6321e9087806b36778b21f24b818643938a7478793b696a70568b5e45514b58d1ea04496b0443858894c246331ea1b2829258b6b89fc8912d5ea35e56bb74abc03f8596f0c3380c258b3758b000d256f21d949d5a78634682cc37cbd9a69b699c92e62ac92f579479d078a1609ab568a03b6a3c8039b2ca3207a6f876b6b405cceb7925a9cb633743445934bdd0ccfaf42cca9c79299617590a622b442452927c29b044aed08a3f125c9b6e8b5f85a4087c28a439b0ec7049cd2125cebb48a562747a12c85a1c0cff52014cc799800f76d3e50a501e2947a98ad6a363a643b05610c6aac6b7485e53bfca88d0285436e7c66ea39196824949820cddb600d68e902cd3bc0b6161935998f7b20025aa154920252361c00d44a71e6219db0080f5755cbe8a0c78c404d0b212abd0ad044583c6d93b8e1603301a219f497963edc9288858fb3414f273687c03b0905380bcc56c5cec5a2cf9aa616e62a1b94056011a018761caa85addb6a04fa65935b41cea150b5c291cdbaa83828e6524e097ace7038f91743bea94a7df41f87526ef2c5bd72353f398ab978a6acc69c8bf1b011aee4a0854c7618418717b52b5cd0282547cf26f35054d6917024241a3c2b47716495bc474f5851ebe0c5c8d61d4aaa530e5a0a04511f5207b97efb5394615aa3e30e61c94d84629324b984ae3a290d036cbcd5bbed7a597df0934e5cadbc165085f607244a12d0840f71a80a0eb173718bc08b326e4bb070c22b0134a21979c6085291a222ca50a9301bbd94b9a475c64acba959db270d7426a2b6bae78a613afbc9c88bb882706bd413225c73093e7c4645d78a4a2c8e22b403402605daa343d960183f41128cda613300b34ed711be3237f8f65398e0523b369642cc398c77466f9b589439507cd86f80566450e477b31c6de100b8ee546b13e8b622240c37f598b21569dd36be88062213ba2474d10ebf3c80a5d65b6c468dc6f95caa21759305675891940925aa701c0ea2f696ddf38f308c1d0a376b58144eaae6386e71b32d5bbfafc34e96f23ca8d743ac66be5d54bd0b8b03872aa2528508f0478b46221d441c4aeac456bde347611363b0a50821021a2b221242c629fa16a813797d5d00a7b6cb7352867d7c78200a405f7565c4bd3776578720e32853560c12a4383b09bbaecde318aea13224aaa89d93537d649fffd31744818443e3993c4369144c9b8e0374e3664f865519d7e05bfe91cc41e17ab591486f7a5420482e736105dc1c35cce68cc4d9109a9a4ff8956f682c206074b2af4a68ce91273ef5399d738385658ce1922fd49a51324271ab5a765da2a551e87758a2a8981491f1c170564210bcaab836d9ce748a0604da9afe722c10312c38c885736773daf92b668552af43c82f10799d57a578014b541b4d0139b169a0a49433b5bf939c3098806f722964e1b8e29bc671aa8446e5bb62562c2c72b82b97393b4670c6b231ef694ea0772305cb1439c50022b51608385f6e068453e957e4929e2d597fc524c852403f6a3a71376313e7938d72f0416e520fa5f13c3c9060c3b168b93a5c8348a163576ef5a8af30e0b246b9518256952e70a389a51a0056b21c0148cfc69722f423dca16a7eb9acc59a1b42411c2ae6240bcb7eb2f2ad9cc0a80e89cc0522afdb74516005613da048e4d779dbeb7944065f76558209ca49c3288a9a822104b74c2a5abb7147c0179923221a1ba13b9548751242f2a9f6d41ed7e143c2186b6bc36f7a50280c733aa69a9860889e180a19c9ba09f69704ef8caeae351ff6926b0ae2c972ecc892d7a49b91890e3ba61f78719108705d0178a336aab0c9c0b8c7327c7c3da31822ef988c0d6307fed3aa2546cd4b5604d57b6c40e510e0665bf53b2b7ef65de1d5300f6c9d0e65c6b6675d84bc3a189a2a1e7301a2661f4d362cd0d6861f0bb4bb0ca25eb94d70f25f63290eb8463b4d851a187263c4f2c4c30a747014315b4a7973c042c1b6a8e759858f8c7f600552379c90cb51b569d54fc30b4d4904b25d91485a17381fe46aa1ac410ae47ed7699b004c86242b8c47c9909fc814dc58a80d32bf306bba5011606b0078e636c46881a18d2c3fbcb2942c0c6f9f98add14404fe436ca3e224e189a7ee6a6a501a467c50c110569fca121d90d4b0dbd52f1b428b9a8166bdd933579c63fd0896a7280b46083f5af6c23b5116f5c231b9964de3f1b562ba5cf0e32bd2e95428b37bdfcc87556cb43a7aaf8a2c1ad5a5a3f11331139636013a14d79b0c24ba32a8d8cb2f5343b67214d5786d970215fffc6c612aadf1e53f9e32537f0c3adf741f7d41ccfdf47add986b9a04c7ae4a7f8ad33994db860b95931b3c52d1c362a864c06bfc0d9da029ce31904f77b9d13b0fa0e00243c61914a44c50d699057a3317f0479bd874b399ca6a58ad2aa33f38158508f0bece8182252c4310299937b8a4aad5928a266162b3996a82cd452b0d52f96647c9b9cacbe07c8ceb6f80d8157e3f3dde96a49393cdc06b8272f2c4b303a14f19888c8f38dc26c5537e698fc188435e471d23ef1d5627ee3634d873af6b4f54c06c2bf82b799f79aac83cc28a0b0324b0")
	require.NoError(t, err)
	pubkey1bytes, err := hex.DecodeString("461436ba342228dd344c462ac9e18f8554773959a6e6f74c3d2e8974713ff84f4a2c8e22b403402605daa343d960183f41128cda613300b34ed711be3237f8f65398e0523b369642cc398c77466f9b589439507cd86f80566450e477b31c6de100b8ee546b13e8b622240c37f598b21569dd36be88062213ba2474d10ebf3c80a5d65b6c468dc6f95caa21759305675891940925aa701c0ea2f696ddf38f308c1d0a376b58144eaae6386e71b32d5bbfafc34e96f23ca8d743ac66be5d54bd0b8b03872aa2528508f0478b46221d441c4aeac456bde347611363b0a50821021a2b221242c629fa16a813797d5d00a7b6cb7352867d7c78200a405f7565c4bd3776578720e32853560c12a4383b09bbaecde318aea13224aaa89d93537d649fffd31744818443e3993c4369144c9b8e0374e3664f865519d7e05bfe91cc41e17ab591486f7a5420482e736105dc1c35cce68cc4d9109a9a4ff8956f682c206074b2af4a68ce91273ef5399d738385658ce1922fd49a51324271ab5a765da2a551e87758a2a8981491f1c170564210bcaab836d9ce748a0604da9afe722c10312c38c885736773daf92b668552af43c82f10799d57a578014b541b4d0139b169a0a49433b5bf939c3098806f722964e1b8e29bc671aa8446e5bb62562c2c72b82b97393b4670c6b231ef694ea0772305cb1439c50022b51608385f6e068453e957e4929e2d597fc524c852403f6a3a71376313e7938d72f0416e520fa5f13c3c9060c3b168b93a5c8348a163576ef5a8af30e0b246b9518256952e70a389a51a0056b21c0148cfc69722f423dca16a7eb9acc59a1b42411c2ae6240bcb7eb2f2ad9cc0a80e89cc0522afdb74516005613da048e4d779dbeb7944065f76558209ca49c3288a9a822104b74c2a5abb7147c0179923221a1ba13b9548751242f2a9f6d41ed7e143c2186b6bc36f7a50280c733aa69a9860889e180a19c9ba09f69704ef8caeae351ff6926b0ae2c972ecc892d7a49b91890e3ba61f78719108705d0178a336aab0c9c0b8c7327c7c3da31822ef988c0d6307fed3aa2546cd4b5604d57b6c40e510e0665bf53b2b7ef65de1d5300f6c9d0e65c6b6675d84bc3a189a2a1e7301a2661f4d362cd0d6861f0bb4bb0ca25eb94d70f25f63290eb8463b4d851a187263c4f2c4c30a747014315b4a7973c042c1b6a8e759858f8c7f600552379c90cb51b569d54fc30b4d4904b25d91485a17381fe46aa1ac410ae47ed7699b004c86242b8c47c9909fc814dc58a80d32bf306bba5011606b0078e636c46881a18d2c3fbcb2942c0c6f9f98add14404fe436ca3e224e189a7ee6a6a501a467c50c110569fca121d90d4b0dbd52f1b428b9a8166bdd933579c63fd0896a7280b46083f5af6c23b5116f5c231b9964de3f1b562ba5cf0e32bd2e95428b37bdfcc87556cb43a7aaf8a2c1ad5a5a3f11331139636013a14d79b0c24ba32a8d8cb2f5343b67214d5786d970215fffc6c612aadf1e53f9e32537f0c3adf741f7d41ccfdf47add986b9a04c7ae4a7f8ad33994db860b95931b3c52d1c362a864c06bfc0d9da029ce31904f77b9d13b0fa0e00243c61914a44c50d699057a3317f0479bd874b399ca6a58ad2aa33f38158508f0bece8182252c4310299937b8a4aad5928a266162b3996a82cd452b0d52f96647c9b9cacbe07c8ceb6f80d8157e3f3dde")
	require.NoError(t, err)

	pubkey1, err := s.UnmarshalBinaryPublicKey(pubkey1bytes)
	require.NoError(t, err)

	privkey1, err := s.UnmarshalBinaryPrivateKey(privkey1bytes)
	require.NoError(t, err)

	/*
			seed := make([]byte, s.SeedSize())
		        _, err = rand.Reader.Read(seed)
			require.NoError(t, err)

			t.Logf("seed %x", seed)
	*/

	seed, err := hex.DecodeString("4d29bfc63cfc83dd037a2641d4b2ed177af8d2ef351f7fa87f343475000fdf77")
	require.NoError(t, err)

	ctA, ssA, err := s.EncapsulateDeterministically(pubkey1, seed)
	require.NoError(t, err)

	//t.Logf("KEM ciphertext: %x\n\n", ctA)
	//t.Logf("KEM shared secret: %x\n\n", ssA)

	ctB, err := hex.DecodeString("c2288aeea8089ce80546fbc79443f7c15290c3a1fdb0a5d2cfcd7909eab9054042fb5cbcad2d642bdd295a6c3f2546cb635f76d21d1838ef05a4d7900fd82271db08f4cb7efc41e6033ecd772fbdec29fa0683a2c893e99357d95a26a1f68026157a085a1279eea8fb81d7f44839d9de29998f5a01966d4269146af372ae3ba5f3162593776e84254996b7d6ddae78c897bbd98ae0b3a3e4b3a8913e82cc2938e057a7240d8c93487d4185266032197cc3c5903dc46b2b4274336637434eaf3404d283e7d53b5ebc76e5ea2a000d0ae63a60fc9e499d744de97b51ace117d09297e44d060f998b50cf048b9533835f5d394746616f487e9d2b517454109c1f9c9eebc86f16e7489b1a763140391df94a66faef34b7d05d976a26216c746e32249a2357139ec7f4abd3e714daff0d5a377574b93036b5561d0e2c0773d6fcaf6530334536addeed919d4105ce9f4145bbeb97ba903f9ca66354b9f0f6f16c7a449a8809f0f698ce86863da9a1f3f5160d159cf6b9fc5b41ae8aa8e85457343b89bba383eac32697004dde434fb2bb59670024504bc3bbf53c40f8533a1d5c4cecd9e8bb07269648be174f94528ab611eb4b891302d7458ebdcd32a59023861d802b1f6c5f5453effc6409e2c0a7225ee9315393812f68c0ec4739783fba9e14236b3a46fe0d901ae1e709f7dc7b30bc37e435499d7da1c53e0d67620674bce0f85ab66a928b073648a1b05781dcabe9baf83bb3b5d1d2255958b5fb01cc878a3b824aae64c18a35745a23eee46239e96c5df99ec103289b1bb0488586aacbd1db3d2360aab789f58ba0119b67d2ca544477e17473516bdd76a84e70f50d46bbb229deefb4b433efc9644cf614c5254d23453ce1de140b31a48ecb11da71efaa1deecc9df74964e14f6ddc4c4cd997de9df03370b0ee51d9213d36b8f98882751a1e0a6f045dcdc3d24eb777d970eac8a2a448c3d3a971217fdc6bc10a6107e549513c918788436e75690773a05c9763c334dedf24942c77eb49805c17f6ae910efa32919528ca9883a1c54b0f60f80dd8ce09ce3a5e5129ce7cc71086a5a478d94aa92d17ec75c6ff6149c551b1180f30f024ea3582e7e170bd5f49c6ba814da589cc1163ebf25e32ae973956107cb5d9ad668361656096a9d2fe955916ea8a7c37edd254b8f63f4682bb47aae6c00b5195f93754824a8bbb54b2b767cda865991b2468e69fedf1d1d11993e0db3709cf93dc5d0ce2cb74a96496cf19f0e1f6af68d36a53c956bdd2560a59991c31d87b810e5372dfc529eeb63b509541374280954f765b2d9302ecabf65cd6b4d9178534c1c6dabdc2dbe8680f7d37820210ed8b59bed578c5b633953ca6d7f591b6d35ca7e3d1472cb1a0f85eb8a270e4887cdd2861e3f3eac1f2cee1030f99a133a8d6f946075afaa5d0797d22df48f9d9bfa9d7bde745ea7f8e2c1a97ea2c69ab2cb7274cd40fce62aeb7ba85ddc5053cc42c17037bfd5e4ff590d911837434629880349870e88e672065c3a891c4057870ce20512d2a8bc876ea6f6e0848dbc97a54cef1e7cd5e3879f1e726b0bac387ec")
	require.NoError(t, err)

	ssB, err := hex.DecodeString("7d7d81c7fa86273c8966faa40d99a3d03fabc3e31a975ad7aae850c7bbdff142")
	require.NoError(t, err)
	require.Equal(t, ctA, ctB)
	require.Equal(t, ssA, ssB)

	ss1b, err := s.Decapsulate(privkey1, ctA)
	require.NoError(t, err)
	require.Equal(t, ssA, ss1b)
}
