package schemes

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestHybridKEMOnly(t *testing.T) {
	// test using the KEM used in our PQ Noise protocol
	s := ByName("Kyber768-X25519")

	t.Logf("ciphertext size %d", s.CiphertextSize())
	t.Logf("shared key size %d", s.SharedKeySize())
	t.Logf("private key size %d", s.PrivateKeySize())
	t.Logf("public key size %d", s.PublicKeySize())
	t.Logf("seed size %d", s.SeedSize())
	t.Logf("encapsulation seed size %d", s.EncapsulationSeedSize())

	pubkey1, privkey1, err := s.GenerateKeyPair()
	require.NoError(t, err)
	ct1, ss1, err := s.Encapsulate(pubkey1)
	require.NoError(t, err)
	ss1b, err := s.Decapsulate(privkey1, ct1)
	require.NoError(t, err)
	require.Equal(t, ss1, ss1b)
	t.Logf("our shared key is %x", ss1)

	ct2, ss2, err := s.Encapsulate(pubkey1)
	require.NoError(t, err)
	require.NotEqual(t, ct1, ct2)
	require.NotEqual(t, ss1, ss2)
}

func TestHybridKEMVectors(t *testing.T) {
	// test using the KEM used in our PQ Noise protocol
	s := ByName("Kyber768-X25519")

	/*
		pubkey1, privkey1, err := s.GenerateKeyPair()
		require.NoError(t, err)

		pubkey1bytes, err := pubkey1.MarshalBinary()
		require.NoError(t, err)
		privkey1bytes, err := privkey1.MarshalBinary()
		require.NoError(t, err)
	*/
	//t.Logf("pubkey1 %x", pubkey1bytes)
	//t.Logf("privkey1 %x", privkey1bytes)

	privkey1bytes, err := hex.DecodeString("e64bfb282ae42e59dd25c4dcb5ea27c0d91179dea03bccf8383e22dfa77f5ff90b46a3392b657533bacb4c334c19440db961e51778c3aa1ee40aa026fba404e278131104c3d24f2fd86e44e65f826bad7cfb1c53507d275cb1b2b80577d53d943781862a5ceba653c1f7686c7ab488b75be5ac12991c0f7c147162a23a31f140e8d972e957b317819eb5f086cca292e5827763806b52db448233b1d95313209469726788a92518aa263c1eb70484728f4a0337c009a48a566b92536995d9152cfaa68ac02cb90c2c51682cafcbb1564c5c195aaa55f024d9b1211737b0fc151571e98062eb739d6789f973acecc34f1f5b5e75228e71b8cc7a6ac475265a8705668e4759641aa552220bc11b0eace02ef9eb76e15cb2caba8a4ab96fb6a47556abbcd20c9c1259b0a7175d7f567becc3cf6cea4dc4ca391b7a46fca6c393fc46389a7754790a571b81e1407092531a53f0921455ce4be84ba2739518b4277a8c883df02c8c635c0f045e38399b839ca83a313839b92c5bca49ae4952eb9093cd976866d4c278c010f2c38361c58c97f456cc501050dcc983f672215943ec260d36a02b9e76c251f3420856205ee418d04018acd885cd05c6fbd9cfebab6accb5acf957a7e1a1288d4cbb71879e77540611b96dbb096b31f5cd04d0c9802b5bb2c1ad5837476ad12118bb137c5c04baa61c121575ad30c068537b305cb1b0829f29025a0965299d367607fbb2f5174b502517a4bc0bf93b722b0858def630d3317c4376ab8289bbb186921842cb858b79c123ce587915c523c38e5579a14a1c22e7741f2b1c2418089db17c6786014dd26b443a168aa43b9bbb3063aabfeb1b09b823cd3da434ad35a5a8c43ac1509b8fc6386485aa475069e81712997c2a309054d8ec3df6db9722c49120f465079533dd4c5e23a003df3b2ff0da6d84faade8997b518976dcf913d26345b44a43fa2b2ddc9c66c65a233169697a579228a4c2814a6b0ef90463450f9fdb332627290d607e99070701e4551658cb30e2539325c6a42a6d7451a073f73041255368c8ca5ca54840c559eeb874e183cf8df5cff9929adb7834fb7220ac1737c09a541234254ac850a15c66264a5d1622b2c32b792ad47283f28dfbf12a26f4af682a82abd3a6e490b43ef68868e4bc5e19830a936a74212bfcd91b364511b04bc65bf41c787b5840dca56e539338d43547c51cfe57a0d6ec4e54d3829eb0bec2851b96505d40764e3af0204be36b7e679f8458aad492be6941a370d6189d6712f9e715ab234f475a3d6ee89aa54aa5fab47e74095758898b7b24b30737690c0b5a4f36afc1bca94d9c9447476b5b3c0d01c879e195a29a4bb2045c3860c647a1919a1f572c2ec8cf06b05acd69b059971f7de4407c7337a507bf5ac232838c51016342312251e954aba565627f276c91d1c5765c80d8cc75f62882cf5b063fc3ad8383841490b45788b54eb96bbb241164da858f220b2b204d605c296c3183fcc33b8f0c7c0455bd845c94a668b615b906a820726a84899928c978124cfdd59c4b6870e07c2fa8cc1bb0b68d37a20b9872bf2e340752f770c6d4863c95cc69c71f88a83a0a7a692e0b931794564187a966919f58e31820334a65b8b7fb2c5f88716c35340c08c2cccdaa2f9c242cd13c3b9fa89358e1a63198343bf61e121cc8967104cc45913aa83b0137ce81b822e04c5000078e268b52aa045128fb4ed5926d51b23847f66bb3a86070b629662c887ec9804af2717444b555da2e47b2c38ae356c84c1ac1396e2c64b7755359224b54a9c838f085936b0a12151b36c1f45e07f57b72b99f7be7b03be63c18b36062d310ad49435c240d34110597c76e9fa774e5ac48d91c0c4e706106155b50f35e1f9762e44835e9109ec5bc8831ba6a703bb6fb1002faf81256b6b119d370145390cc2a9ebe1a018bf22a6dc9b257fbb624d548cf52cfd603975dbc128eaacccac1550bc332830a86f2fb3884f3aed0f58856294462f3ad9409876bd65285382f309a043cfb03c2147be5bbbb1d23354bd395794a033d7370d4900e1ea7b05ad5b124a08291d2194ad4c8d5226402ea2514735763125b9d168dacf9733692225596bddea9899ce912ae856c074b867bb53097d20a780b406b5a9cd4e4a3ccfc65e3d0249684b9ae467676a6c490285f80db13fb618709ea608b47991b753891b3a23e7ab0625cc56f6a3e1d72773c8c5d964a1416d838eeb09224096f9efa3a351ac025468e3198b04dd202bdd46961163589d38ece7347d6471331600c917257453208f95ca51d585a65a0b616102435f2af5b449cbecac403ba5a9b59cdcc0101362610a6bba617c4c3cca039b2c3b180661e7607136db5cf0f86865ad78495c34f17ba15ebdc4454650c49d404e8556de1da8185d83e9d4b305bb438888c6edf562336c2891a26af5b0b44ef5295a5606ae459300be0c995e46b8e8b52f36cb21a846fe1a990ff4a94b0b6aa7e69978d15099023baf11427e5989865257c9dbc5f3f980f5f16a6518a92b4e33c2f722ccd39b6018c8f312407e72325793a73a9abc2c5a4c8a057a1a14aade7508245596d11d717f175ccc55773eae9b5cc54225b31afd5f4811e0a22e044caf7f06cc713c5de8c04d001ad111259085438600858d22c92772026dafb1ce20ca213698ccc60b632d73e0d95a6e604720fa7cbfa77a7687378fdb155429714394842d3424d04564f8c0babc03475a2338a599b508cd14fa0c49c967c2a3571a381925635ca180a89305e787884e2b1ddbb95f9b9572e7c2282e32302b798115524c8e17d12b00d08bbac79d92fb2521899b05ff2f3a2ce12426a2922503935c33a7f7974bf4e0264c9e37811706e32672e05fc002c634bb44208dae37dac482ac5834ea0334013c29dc2ec22ace50424d79fec1159cdab5303c27180798493bcc0dd8246327ab19107a6f96bc0d5584ce6a80967e3639d84305eb78144e4782ee19be1470bc6331a31937909d80660810f10146a9ee58737d9c4c5f22852fa89732c0abdf975a034790e42ab8e4a6fdb407ec5c3458d256656b62039c7621e941f062a4543187d799bb90212c6197543d03c79e698c546b11908b0836a93ce2358393e656d08b29b416b3f1ab436492a92011ac93aa4949cd72df2730a68560c0d384747ec55c453a2c9c1cd13248e4352b3f40c6aa2a64d75b5cbecac6b97424d29321768d43d1ab19ab1572026b87250d98cbc3393dac104ec4b5a92879fcbba97c1888a00a273c0473f6a04473db123e16316e4dbbf8b3d98969030f3e407a7f1eb5edc4d5fff113ae8a7fabbb55921121575806655e2697a27b333e84750084cab7c749a438e6d8beb9aeacc1a578b7a295041c76d552baca0d2d98d78b90e9899e03cf3fbf75159502c372aea72538c39049e38eb")
	require.NoError(t, err)
	pubkey1bytes, err := hex.DecodeString("5faeb40e1dabd99c624770e13c1abb51a056ace1e83def8f031894c9b7a5bd1758e1a63198343bf61e121cc8967104cc45913aa83b0137ce81b822e04c5000078e268b52aa045128fb4ed5926d51b23847f66bb3a86070b629662c887ec9804af2717444b555da2e47b2c38ae356c84c1ac1396e2c64b7755359224b54a9c838f085936b0a12151b36c1f45e07f57b72b99f7be7b03be63c18b36062d310ad49435c240d34110597c76e9fa774e5ac48d91c0c4e706106155b50f35e1f9762e44835e9109ec5bc8831ba6a703bb6fb1002faf81256b6b119d370145390cc2a9ebe1a018bf22a6dc9b257fbb624d548cf52cfd603975dbc128eaacccac1550bc332830a86f2fb3884f3aed0f58856294462f3ad9409876bd65285382f309a043cfb03c2147be5bbbb1d23354bd395794a033d7370d4900e1ea7b05ad5b124a08291d2194ad4c8d5226402ea2514735763125b9d168dacf9733692225596bddea9899ce912ae856c074b867bb53097d20a780b406b5a9cd4e4a3ccfc65e3d0249684b9ae467676a6c490285f80db13fb618709ea608b47991b753891b3a23e7ab0625cc56f6a3e1d72773c8c5d964a1416d838eeb09224096f9efa3a351ac025468e3198b04dd202bdd46961163589d38ece7347d6471331600c917257453208f95ca51d585a65a0b616102435f2af5b449cbecac403ba5a9b59cdcc0101362610a6bba617c4c3cca039b2c3b180661e7607136db5cf0f86865ad78495c34f17ba15ebdc4454650c49d404e8556de1da8185d83e9d4b305bb438888c6edf562336c2891a26af5b0b44ef5295a5606ae459300be0c995e46b8e8b52f36cb21a846fe1a990ff4a94b0b6aa7e69978d15099023baf11427e5989865257c9dbc5f3f980f5f16a6518a92b4e33c2f722ccd39b6018c8f312407e72325793a73a9abc2c5a4c8a057a1a14aade7508245596d11d717f175ccc55773eae9b5cc54225b31afd5f4811e0a22e044caf7f06cc713c5de8c04d001ad111259085438600858d22c92772026dafb1ce20ca213698ccc60b632d73e0d95a6e604720fa7cbfa77a7687378fdb155429714394842d3424d04564f8c0babc03475a2338a599b508cd14fa0c49c967c2a3571a381925635ca180a89305e787884e2b1ddbb95f9b9572e7c2282e32302b798115524c8e17d12b00d08bbac79d92fb2521899b05ff2f3a2ce12426a2922503935c33a7f7974bf4e0264c9e37811706e32672e05fc002c634bb44208dae37dac482ac5834ea0334013c29dc2ec22ace50424d79fec1159cdab5303c27180798493bcc0dd8246327ab19107a6f96bc0d5584ce6a80967e3639d84305eb78144e4782ee19be1470bc6331a31937909d80660810f10146a9ee58737d9c4c5f22852fa89732c0abdf975a034790e42ab8e4a6fdb407ec5c3458d256656b62039c7621e941f062a4543187d799bb90212c6197543d03c79e698c546b11908b0836a93ce2358393e656d08b29b416b3f1ab436492a92011ac93aa4949cd72df2730a68560c0d384747ec55c453a2c9c1cd13248e4352b3f40c6aa2a64d75b5cbecac6b97424d29321768d43d1ab19ab1572026b87250d98cbc3393dac104ec4b5a92879fcbba97c1888a00a273c0473f6a04473db123e16316e4dbbf8b3d98969030f3e407a7f1eb5edc4d5fff113ae8a7fabbb55921121575806655")
	require.NoError(t, err)

	pubkey1, err := s.UnmarshalBinaryPublicKey(pubkey1bytes)
	require.NoError(t, err)

	privkey1, err := s.UnmarshalBinaryPrivateKey(privkey1bytes)
	require.NoError(t, err)

	/*
		seed := make([]byte, s.SeedSize())
		_, err = rand.Reader.Read(seed)
		require.NoError(t, err)

		t.Logf("seed %x", seed)
	*/
	seed, err := hex.DecodeString("0de863397db50a2237a379dedc8659b9f9b0759476aad172d4d99cea1824e96ef893c2d6361996ab336a2d418969b8f1fd9fa340e1a8c8f36257cd0fac04b9e85e0ea5e07afb54df8887f7f0928b2d51d8a19e17fb77805390d677846bb8248f")
	require.NoError(t, err)

	ctA, ssA, err := s.EncapsulateDeterministically(pubkey1, seed)
	require.NoError(t, err)

	//t.Logf("KEM ciphertext: %x\n\n", ctA)
	//t.Logf("KEM shared secret: %x\n\n", ssA)

	ctB, err := hex.DecodeString("1f7a6111e35c656edc357c6b54698b9cef3dc023910659e696502e257ae11033aa2f6162e55f597ac01ac06393317c5baaf941eb7b75289ba7828f465a7dd447c329253f67c11585b327dd24482c1ed8535611864e7a5a2231bef7a5bb4b3e8d132f8f648c46a1507cb866ea4699500130234cdf196803f3338e2af3e4848684674a716064af4fb866f8571da3a4cc347ce438384cce3e0e8caacf1d76ebab48d70ca10c8ca556808eec3b4eece3afbd49a9c7b7d50860e8d1fcef087d277e321d87de596d564476dc326763792c6612f1c8434ccc5902e5c2ab4638289cc87ab631c90353ac5923f4652fc824c72672f3d489f11a5816c9983bac3c24edb6727c34e09966ad4f2a98b9b539b60200872603009c945216caab57ae7b3bbc0d07f25dbb93ee357c4f63395922193295dcdde19b778157d6ee8b3d3876fdc65e20b9cf5f466b74edbabafe20b9b995768a46e6fcf59bbc3c81feefeea804ded4a5b52dc914edb5154ccf3333bf6a2394d7c26c7842a2ea46bcd005ce48951baa7cd0cfeed54572d43f44bb1a309cb506719ecfdbe633667024676a4bfbe346fa392e08f34afee3cc7db36ae7302241794029deb6f8db226bc37e2035bfa4e24f68de3122c268174f278045fd266b56776ac1c0df55e3871ded31a1174749dad7d7a05c56b0693076becbf98dad600c0ca0269c31f2103e61c96fc3b969347262bcb867bb0094a9c196a85e054aa7aef4949882692d9bc00c73ed8f6f60fb7503fee716ed5eacc762b2a23a11437dbbca62cf75043d5bbbdda902cdc125d1ee3ef6b92a24abeb080917a15a92e619b98261d23c9a322cbab9f085598825b1627da679f934a9de7d2c693f042695ef0a4bbf67be1a174327e7c45d0dfcd5ab6ecf39a7fe91329993dfd4718bd08e67a1caa623e5ccedee53b5a5d49bf2846726618e397026aa127fef3ea31d20e2aaeb92a354080c726b170a50717cbc3d6270e3a7ba4d38657f0660e1ac903357fbb6cd4df47c1b8413721c14f093fb67ca5860402bc8f8505f38ad548807ed3bfa8968d34b5e5e4310d5a1916939ba2a9f9f19e0d21719385e6315e2e13eb24edd2585999c9acdb721a84628ebe23f73bd47c599a0aa3b40d65f5febdd7210ea2e5922b78bda44a80f9cb4376c7d590b1e91feb615ea96f3f54fcf9d186545c2a80fa0a7ceeead4b7be079abe8acc6f6a8be2d1e27e3d6c825b6974b8ec7a1c4e2475be902248372ad3adb987dd73a0b40cd01dc93589a60b60c3f1e29d9f16ab88cd3456054ae629de9049d35552de86d561ffafd294336974d62cb69e2a2ee4d34672f6f6b03835f5fe7bbc7c69be55c1f9f45a4c9536576d6acc86a3f40644e074a99500ab738ce163194a0bf476ce5b2f8e626074fe58a873d2b83154b46ee20a479d2f7eb587ccff6d647ac594ce23c5c3a73cdbacb422f46640251e04784e7432b86ce3fc6660f6bde72ba4b39e1d54fa0cf3102431239d4298ec1ce098180c742dababec4e781e2d68ad9021aa40f1c9351dcc6cf9970cdf945f1e2e5fccee726211c4db297ebff88277f539a121ba647")
	require.NoError(t, err)

	ssB, err := hex.DecodeString("ecebe437d90ab771958d26f547b4907861bc9961da3aa52f8e3f3b33d28f1e1f")
	require.NoError(t, err)

	require.Equal(t, ctA, ctB)
	require.Equal(t, ssA, ssB)

	ss1b, err := s.Decapsulate(privkey1, ctA)
	require.NoError(t, err)
	require.Equal(t, ssA, ss1b)
}
