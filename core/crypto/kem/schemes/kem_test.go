package schemes

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestHybridKEMOnly(t *testing.T) {
	// test using the KEM used in our PQ Noise protocol
	s := ByName("Kyber768-X25519")

	t.Logf("ciphertext size %d", s.CiphertextSize())
	t.Logf("shared key size %d", s.SharedKeySize())
	t.Logf("private key size %d", s.PrivateKeySize())
	t.Logf("public key size %d", s.PublicKeySize())
	t.Logf("seed size %d", s.SeedSize())
	t.Logf("encapsulation seed size %d", s.EncapsulationSeedSize())

	pubkey1, privkey1, err := s.GenerateKeyPair()
	require.NoError(t, err)
	ct1, ss1, err := s.Encapsulate(pubkey1)
	require.NoError(t, err)
	ss1b, err := s.Decapsulate(privkey1, ct1)
	require.NoError(t, err)
	require.Equal(t, ss1, ss1b)
	t.Logf("our shared key is %x", ss1)

	ct2, ss2, err := s.Encapsulate(pubkey1)
	require.NoError(t, err)
	require.NotEqual(t, ct1, ct2)
	require.NotEqual(t, ss1, ss2)
}

func TestHybridKEMVectors(t *testing.T) {
	// test using the KEM used in our PQ Noise protocol
	s := ByName("Kyber768-X25519")

	/*
		pubkey1, privkey1, err := s.GenerateKeyPair()
		require.NoError(t, err)

		pubkey1bytes, err := pubkey1.MarshalBinary()
		require.NoError(t, err)
		privkey1bytes, err := privkey1.MarshalBinary()
		require.NoError(t, err)

		t.Logf("pubkey1 %x", pubkey1bytes)
		t.Logf("privkey1 %x", privkey1bytes)
	*/

	privkey1bytes, err := hex.DecodeString("a60a963a12f94f7b8c32c59511bfb2128396f8afb560cfeb29d72bff75eee3c4905c77aca79d3f9a1623d71cd5c55f38777246dcc900a92cd9b0519ecc0fbb50cdbc7696f1a132974b8a1b671eb3fc82392a0aac6b3afdd32b25c01998305fe957173e0ab03e963d2720188056acced841fba3596c082d8ea7b7b551b750b66ea1f572fd9c3db629cc1da05f978001ba3645e803776ca508e9c2b2b7548cc485b5ae52607bf3a0f3088c9ce6b83111302582b92ca559c0819e387630b55502e32cac25176f7b0478783567e13b535c43c1bb082d57da052572ce1af600ee549a19d9525080cd83906b84531a78c56dba8cac91827f422b44b968a5db92cd2e44226407a52b2abf0867bbfe548cca472016213c7be44f26d647c426c17a35bf27144c89aa2a18e7a92c278512a7bc30d94f41832a60d692c58796bf6a78ab5762c09cc0f0c4af6b06747a2959cbc7878b2417a9134d59c41010e1ca381c8792d817abd14d9bfa3599864c77d33ef1873ddf6abcdab3b74ab772ae1470e4c096776246770678d3ca1f7621ca21db7c2febc416b158cb6028824b00f153acaf985a993450afd1b877878fee1b5a45119d5143bd7ea18af8486f7f24266fb89bc376c6cd281069ab11e986b435b4a06496309d2802117acfc5568d33011a5cba68b5e3bec25873d4accd131702a1fa74b2703fa581c7495a7ad9b29541c30e2290aa323ca31770ca9ef0af696ab09d96918eca2558f7195652752b6308127c2be2e890305abd3f1758cbf1c42dc34f923053f0050acd4a0aa53131b5277d51c24b3fd151087926a3e8384cf97c0fb9a8dbfb4f84919ffaec96367acc99178aecb8b6049a5a60e1c1279b8d7db293e452c478db1a412b9d2a9bab8bb8a88b330589a369c624882f87496671ceadc0829dd91709381315c1a965549129782fd6a4c8607a86dbd692c4f2cca573ae62dbbc2b03392b075b51e75b22587877c8b076eb064a11343e68045af5b8b25a2021847aa74100d2e8b345a706d6602b94378e5a49094838b200a836e68c6b9ef52f7f43b40afc25515846267b1e1da03078b24b3b85cc97d637d242aaee16ccfc03c2f906a37f4c0015b3c281c923aeca6b0ca5b3d90250331a368474aed27905d6ba74154ba93c6bb18a07727115af2e851f36e818d7219ce062441f7ab83dd261e2d5b2ef787068b675068a4090bc4462026cd8319224b17fdf933b22999bc1337747422048273671844ea2dc5cc5fa0d58189d30225229a920969c7e1a61636ff64e99b4018d40366083299267491d8221d1e4c9e23460209214b629516dd34ff7b8c3eeda04aa9a15ab94ca96db9654138d2771917b6826be025dbb108cf4935c69857a07348ac458a9ae0c23c8eca7f64175c6d6b52b62b9eb0c857ec8732254ccf1136cbfd03b0d8c2663f87b2123b105cc76bf789aa131b8e45bac895094bce15c7b688a86455eb8119b2b60641e51439f93aad68833fff15c8d56cf3606a3b7f30d4db27ab2573f766c28d01b3227a891b0a98a1420c3392b994374b5d3f7a351249a3dc3334644494c095d3886079e7b80ec097925c2a08ce32ec1801d0682cb1c33cbcbe0ad4db92e590ccc82dc1e0f1729c2330145735bd8c640ff867b61ab2bf1b9678ab37eb3e3aa0f60006f327d51cba006b2be79cc68eb7b103fc73f16c81e59b991bfa74c52b02094da5e7f4204211b7a8db67c8bd42ab988bd0b748e6a60084117754bd95d64783fa3626db78681ba24cac40b2b50cb213711a97866204ef079dcf46cdb76bd0f9b0eedcba9b162cd3a4c65f9b05ea0b485e9060c20f4a09a745b5d02abf3d56db38669bb1ca5b95a8bdcf5a4476c20e5487918d959115b6fce439e99dc8d583612efc79588d99541f00a8fb69da71418a1d71ecc6c5171862204f37ddc7c922aa9ca4736cd0ff8b023b01687e868329a1006576727928a23bb3c7521263c720f735705bf649186376bd19b908a926359059e8a280b19457f1909bfb5e9a957b10313491260e9564ad2a9c25aa4191724a9b801e5555f3c82400ed90091f39a22600667b7c0d12c45889740d7300869062f8fac4e590c59a0b5babe29ae00944b1ef7ce66f9276bd917b79bc85d2249bee595c7020bd191cda7474d2df2c42bb0af8b9a492e4c11c1f58fd1768579e85e8b414f0e79c7d3036e32e69b8d7788e7c60c57a48c838248ceea733682ce13f7c066676fb568516d2564edcb1f2f0b2df4f496747a9573d802e91c9b63a7b34edcc569b5bd3ffca549723fdcf550256c1e05f96029b89aadc508311962696ac8dac7795173c6e6787b7d2a601ab58a6acb1157ba959a4192bafb1eb8d77264017a52520ef897b2d38a08220b56d2d42a1c837e17b1a6fea682fe2574d661c5df97b117fa546003aae096c08db588ff5994b2078ca64025cde600be5b682164367602a2a5428218415f81a31362f40ec6c646e85185fe86c8c746cef8752d115ba37ae1b3fdd66a3145310f026311995cf4dc78a975034457976df33d37bc2741f49e700a3a55f7530861a8d916c2a152967f039598e552d4930c8fb890ccdb6b5ac221315bc43c289bebac06c4b626995939162b3ead31cf59d0c8905127760438091c82123cca73a194b347bf6798488afc5a77a13f5fe04444e5ceaff57cb1d7bc83f72aae582406194ca41bc2f3814c44f001d9f2b94f4722892c2b92339fa1f7b861f0b8a28037e3938b40532c3c755c8cc5814becba84dc094268cb910153eba32161d92cdfa2a4f9b88e130c30489347007d3ea6d42e4e521a161c44442148ab895df863580fc612c062c5f024cdcd296f8af7a75c7cae649100d6c8bd9b38b3c9280eaf2b3c39810aae9cbe7e10007535097f7346d600485db81e40047507a90169db563ff28493659a71947711c883b5e93fb1e8cdf19b14d9a8a0333a656df991efea9105f20a6ffa6b4313722746bfdb767dad0b6e58818d4a2425db33445a222d54b096a162adbd2a1fe899c918c186e2e781329a0e1580012eabbbeafc778d672442db7a56ab0912a3adb156580a93547e3125397cbee4fb5b3ac8bcfa3719d3c0b29dd56523e0aeaecb2ed50a838cc052a7f04cd01238a7a9799c871b16832533c22779ea90c0c67e65421d8d1a0802da37ee670b81eb75f8e2cc61062c0fa191f5513ae5509f1ec56708d82842d5169bdc62ea48c513212ec027bfeec82669ec132a19b89e366043f1830b90aa17d52110bcb95fe41e630bcd4f92a1f2a2659d474a3ff47cee0818e83bca0e32cd54324d36393cc2249ba8771efb1d5a8011b909fd3008793b400a529735af64a4f1558a4288ea35aa10af2699267755d0903da005e687d837be2125efaed54121b62569a1082a9119b9177c77180238a2d6ac67768142439e4fcb7102ef03dc62")
	require.NoError(t, err)
	pubkey1bytes, err := hex.DecodeString("586f1761025b66a6afd6b6e056facebdb88ef7d981dbc3e6beba081e88015d5651cba006b2be79cc68eb7b103fc73f16c81e59b991bfa74c52b02094da5e7f4204211b7a8db67c8bd42ab988bd0b748e6a60084117754bd95d64783fa3626db78681ba24cac40b2b50cb213711a97866204ef079dcf46cdb76bd0f9b0eedcba9b162cd3a4c65f9b05ea0b485e9060c20f4a09a745b5d02abf3d56db38669bb1ca5b95a8bdcf5a4476c20e5487918d959115b6fce439e99dc8d583612efc79588d99541f00a8fb69da71418a1d71ecc6c5171862204f37ddc7c922aa9ca4736cd0ff8b023b01687e868329a1006576727928a23bb3c7521263c720f735705bf649186376bd19b908a926359059e8a280b19457f1909bfb5e9a957b10313491260e9564ad2a9c25aa4191724a9b801e5555f3c82400ed90091f39a22600667b7c0d12c45889740d7300869062f8fac4e590c59a0b5babe29ae00944b1ef7ce66f9276bd917b79bc85d2249bee595c7020bd191cda7474d2df2c42bb0af8b9a492e4c11c1f58fd1768579e85e8b414f0e79c7d3036e32e69b8d7788e7c60c57a48c838248ceea733682ce13f7c066676fb568516d2564edcb1f2f0b2df4f496747a9573d802e91c9b63a7b34edcc569b5bd3ffca549723fdcf550256c1e05f96029b89aadc508311962696ac8dac7795173c6e6787b7d2a601ab58a6acb1157ba959a4192bafb1eb8d77264017a52520ef897b2d38a08220b56d2d42a1c837e17b1a6fea682fe2574d661c5df97b117fa546003aae096c08db588ff5994b2078ca64025cde600be5b682164367602a2a5428218415f81a31362f40ec6c646e85185fe86c8c746cef8752d115ba37ae1b3fdd66a3145310f026311995cf4dc78a975034457976df33d37bc2741f49e700a3a55f7530861a8d916c2a152967f039598e552d4930c8fb890ccdb6b5ac221315bc43c289bebac06c4b626995939162b3ead31cf59d0c8905127760438091c82123cca73a194b347bf6798488afc5a77a13f5fe04444e5ceaff57cb1d7bc83f72aae582406194ca41bc2f3814c44f001d9f2b94f4722892c2b92339fa1f7b861f0b8a28037e3938b40532c3c755c8cc5814becba84dc094268cb910153eba32161d92cdfa2a4f9b88e130c30489347007d3ea6d42e4e521a161c44442148ab895df863580fc612c062c5f024cdcd296f8af7a75c7cae649100d6c8bd9b38b3c9280eaf2b3c39810aae9cbe7e10007535097f7346d600485db81e40047507a90169db563ff28493659a71947711c883b5e93fb1e8cdf19b14d9a8a0333a656df991efea9105f20a6ffa6b4313722746bfdb767dad0b6e58818d4a2425db33445a222d54b096a162adbd2a1fe899c918c186e2e781329a0e1580012eabbbeafc778d672442db7a56ab0912a3adb156580a93547e3125397cbee4fb5b3ac8bcfa3719d3c0b29dd56523e0aeaecb2ed50a838cc052a7f04cd01238a7a9799c871b16832533c22779ea90c0c67e65421d8d1a0802da37ee670b81eb75f8e2cc61062c0fa191f5513ae5509f1ec56708d82842d5169bdc62ea48c513212ec027bfeec82669ec132a19b89e366043f1830b90aa17d52110bcb95fe41e630bcd4f92a1f2a2659d474a3ff47cee0818e83bca0e32cd54324d36393cc2249ba8771efb1d5a8011b909fd3008793b400a529735af64a4")
	require.NoError(t, err)

	pubkey1, err := s.UnmarshalBinaryPublicKey(pubkey1bytes)
	require.NoError(t, err)

	privkey1, err := s.UnmarshalBinaryPrivateKey(privkey1bytes)
	require.NoError(t, err)

	/*
		seed := make([]byte, s.EncapsulationSeedSize())
		_, err = rand.Reader.Read(seed)
		require.NoError(t, err)

		t.Logf("seed %x", seed)
	*/
	seed, err := hex.DecodeString("37471457d40bdd01bcd4922a165294ac779c27b8a72054a1122d7f9b7600dfee04009c525048929fa28e9454267001d594ba85fe0213b8fcedce5f98e350185e")
	require.NoError(t, err)

	ctA, ssA, err := s.EncapsulateDeterministically(pubkey1, seed)
	require.NoError(t, err)

	//t.Logf("KEM ciphertext: %x\n\n", ctA)
	//t.Logf("KEM shared secret: %x\n\n", ssA)

	ctB, err := hex.DecodeString("0b26323326565737d3975b28249672719e7cb54d7e4f6f48eac67ccebd43c204521afd489472bc0c76e7fa5aba3a35474c7312fda55875e250b3b6e13e7e69815bbbf48d81fdf5f3a16e2fa32cf89420472e8a752e8ae8f94f2036b99623d9a7c4c825c3c46d619e606cea4f6f04d0d62269baf04a720ac3831bf1021c6dbc45af0cbdeb46e408e804869e1c4ad604b27dc0fe3b233d2b5aa2ac7c295305adcce84fbe0f8289c57a21636b176d7d4cdfb60825e72e75b457e72017c2377b27bded903e8de08b95f2bbc3ea9375d504f9327e22ed434ba32594082c14064b3b87d666017e5f9af45f268c04df94b4c50e1ea525e807883fc35afc4c7a480c3c296f9b3e463553c020f68c4b029b0eba5093857735f1b86d10e5008d2c037d8d75a32b7ee6a5dbaa60fde0c50e3c9cbc7654aa732b50d2472440bd3bed3b70fda6ecc068407d017d6530736b02b9f9f0ee84b20ebabdb704e76490990f29bc3024e871d714ba435afffd70ad210ff12f5216385b2ba44f69edcea85bc90303a8cc688826ccab95d43207e851fb3feb52c28f93323030e4527de3452fbb0aa744ae5d7b0b3de466d4d1b7b3e7e091dd13fdce9c5576aab5baee8887426537db264d350244ccaae84062de1e3d3b0792e3d0751a4c6f9bdb131f3356c642296644cb9355110f7092f120a7095d8ab89e2a79c2d3791e15e803a8522252265117c6ca23f25213696e874227d9dd9896c9d307951a256973ffb6bcd0f408a20927ea3b1988d89f753ec2989dd8628e05b1e9b5aa238323c2471ffb99c9642e74c6fddd1b71b3357d013e4226d12f588f73387ccfc721828ac00e4b6fe41fc1361becd1bb7301c30f2b1c50f42b845e2c04e7b509ca484205f9ed244369083fb7cd432ef7b663723a04fcf6ba492064704a2d06613d00384fdb5826285208189f3cb1bcc5c9684218849707454ef929fb9668c494106e758849254538eaa6c0c8a388bc1e3fa6bd7e1c555df26ee54af7eeadbbda410c569abba0307b4afce6b451bfe6a66035e1a1689b349725945b8fd143d95cbe62b993f518952d62af50c546c8b2917f2fa51e6be37d3f80d777dab82ad9372df3b7924a8c961ba8446bf25a4a1f2797065c1b5387849d3336bdd675ef1aa1d0ad26ebe2fca9ba2ec809d9f89f349005486e87bcbc31e08f089efb4145d6f5f5bb74ba34f4d849491d045bae0abd65222e8e6f4996bc6d2d5e8d64b528ff8c19080e13e8fa7f81544e3d2e2d24823a78357e5f5e1200b4f093b9f817e529df1fb526b53b97f4ec6ccd823c1a1a8dfe511ab059e5730eecbb849449aa84da5dcc8ec9574393d287550c048e028f801aea60a25991400a7a2740903a52da1e8e216a48cec891bf7ca63dacb0a0d4b1b8a0cf454a2bb48b33c48514373e8a8ccfeba837e2018172c87467540a263fe3819a4eb73f3abc7c58e00b84606c1d2505b581b40c574624541f47cffbccd53efe2e97cef317adafcecb1d9da4f6b921c89633260a72f5b0dd7ff1a66ae1e26968c15a2271e6414ccfa4746b50ef69aefbee223517769fcd0a739ba814b5159c")
	require.NoError(t, err)

	ssB, err := hex.DecodeString("f35220e25811c51cd6f8a2ebc5a5af7d8f8f8dca3c492663eff89fa87d16337c")
	require.NoError(t, err)

	require.Equal(t, ctA, ctB)
	require.Equal(t, ssA, ssB)

	ss1b, err := s.Decapsulate(privkey1, ctA)
	require.NoError(t, err)
	require.Equal(t, ssA, ss1b)
}
