// Code generated by protoc-gen-go.
// source: plugin/proto/kaetzchen.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	plugin/proto/kaetzchen.proto

It has these top-level messages:
	Request
	Response
	Params
	Empty
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	ID      uint64 `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
	HasSURB bool   `protobuf:"varint,3,opt,name=HasSURB,json=hasSURB" json:"HasSURB,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto1.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Request) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Request) GetHasSURB() bool {
	if m != nil {
		return m.HasSURB
	}
	return false
}

type Response struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto1.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Params struct {
	Map map[string]string `protobuf:"bytes,1,rep,name=Map,json=map" json:"Map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (m *Params) String() string            { return proto1.CompactTextString(m) }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Params) GetMap() map[string]string {
	if m != nil {
		return m.Map
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto1.RegisterType((*Request)(nil), "proto.Request")
	proto1.RegisterType((*Response)(nil), "proto.Response")
	proto1.RegisterType((*Params)(nil), "proto.Params")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Kaetzchen service

type KaetzchenClient interface {
	OnRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Parameters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Params, error)
}

type kaetzchenClient struct {
	cc *grpc.ClientConn
}

func NewKaetzchenClient(cc *grpc.ClientConn) KaetzchenClient {
	return &kaetzchenClient{cc}
}

func (c *kaetzchenClient) OnRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.Kaetzchen/OnRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaetzchenClient) Parameters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Params, error) {
	out := new(Params)
	err := grpc.Invoke(ctx, "/proto.Kaetzchen/Parameters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Kaetzchen service

type KaetzchenServer interface {
	OnRequest(context.Context, *Request) (*Response, error)
	Parameters(context.Context, *Empty) (*Params, error)
}

func RegisterKaetzchenServer(s *grpc.Server, srv KaetzchenServer) {
	s.RegisterService(&_Kaetzchen_serviceDesc, srv)
}

func _Kaetzchen_OnRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaetzchenServer).OnRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Kaetzchen/OnRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaetzchenServer).OnRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kaetzchen_Parameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaetzchenServer).Parameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Kaetzchen/Parameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaetzchenServer).Parameters(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kaetzchen_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Kaetzchen",
	HandlerType: (*KaetzchenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnRequest",
			Handler:    _Kaetzchen_OnRequest_Handler,
		},
		{
			MethodName: "Parameters",
			Handler:    _Kaetzchen_Parameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/proto/kaetzchen.proto",
}

func init() { proto1.RegisterFile("plugin/proto/kaetzchen.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xdf, 0x4b, 0xc3, 0x30,
	0x10, 0xc7, 0x49, 0xeb, 0xd6, 0xf6, 0x9c, 0x3f, 0x08, 0x22, 0xa5, 0xf8, 0x50, 0x8a, 0x0f, 0x15,
	0xa4, 0x83, 0x09, 0x22, 0x3e, 0xca, 0x06, 0x8a, 0x14, 0x47, 0xc4, 0x3f, 0xe0, 0x74, 0x87, 0x9b,
	0xeb, 0x8f, 0xd8, 0xa4, 0x42, 0xfd, 0xeb, 0x65, 0x49, 0x37, 0xdc, 0x53, 0xf2, 0xc9, 0x97, 0xbb,
	0x7c, 0xee, 0xe0, 0x42, 0x16, 0xed, 0xe7, 0xaa, 0x1a, 0xcb, 0xa6, 0xd6, 0xf5, 0x78, 0x8d, 0xa4,
	0x7f, 0x3f, 0x96, 0x54, 0x65, 0x86, 0xf9, 0xc0, 0x1c, 0x49, 0x0e, 0x9e, 0xa0, 0xef, 0x96, 0x94,
	0xe6, 0xc7, 0xe0, 0x3c, 0x4d, 0x43, 0x16, 0xb3, 0xf4, 0x40, 0x38, 0xab, 0x29, 0x0f, 0xc1, 0x9b,
	0x63, 0x57, 0xd4, 0xb8, 0x08, 0x9d, 0x98, 0xa5, 0x23, 0xe1, 0x49, 0x8b, 0x9b, 0xe4, 0x11, 0xd5,
	0xeb, 0x9b, 0x78, 0x08, 0xdd, 0x98, 0xa5, 0xbe, 0xf0, 0x96, 0x16, 0x93, 0x4b, 0xf0, 0x05, 0x29,
	0x59, 0x57, 0x8a, 0xfe, 0xd7, 0xb3, 0xbd, 0xfa, 0xe4, 0x0b, 0x86, 0x73, 0x6c, 0xb0, 0x54, 0x3c,
	0x05, 0x37, 0x47, 0x19, 0xb2, 0xd8, 0x4d, 0x0f, 0x27, 0xe7, 0x56, 0x2d, 0xb3, 0x59, 0x96, 0xa3,
	0x9c, 0x55, 0xba, 0xe9, 0x84, 0x5b, 0xa2, 0x8c, 0x6e, 0xc1, 0xdf, 0x3e, 0xf0, 0x53, 0x70, 0xd7,
	0xd4, 0x99, 0xae, 0x81, 0xd8, 0x5c, 0xf9, 0x19, 0x0c, 0x7e, 0xb0, 0x68, 0xc9, 0x98, 0x06, 0xc2,
	0xc2, 0xbd, 0x73, 0xc7, 0x12, 0x0f, 0x06, 0xb3, 0x52, 0xea, 0x6e, 0xb2, 0x80, 0xe0, 0x79, 0xbb,
	0x03, 0x7e, 0x0d, 0xc1, 0x4b, 0xb5, 0x1b, 0xbc, 0xff, 0xb7, 0xe7, 0xe8, 0x64, 0xc7, 0xfd, 0x24,
	0x57, 0x00, 0xc6, 0x89, 0x34, 0x35, 0x8a, 0x8f, 0xfa, 0xd8, 0xb4, 0x8d, 0x8e, 0xf6, 0xa4, 0xdf,
	0x87, 0x86, 0x6e, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xd1, 0xfa, 0x39, 0x7d, 0x01, 0x00,
	0x00,
}
